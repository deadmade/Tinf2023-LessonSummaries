{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udf1f Tinf2023-LessonSummaries","text":"<p>Dies ist ein Obsidian Vault f\u00fcr das Semester Tinf2023 an der DHBW Heidenheim. Dieser Vault dient dazu, die im Unterricht vermittelten Informationen ordentlich und strukturiert zusammenzufassen. Er unterst\u00fctzt alle beim Lernen und bietet eine Wissensdatenbank zum Nachschlagen. Ziel ist es, das OneNote-Notizbuch zu ersetzen. Der Vault wird \u00fcber GitHub synchronisiert, um Kosten zu sparen und Versionskontrolle sowie Branches zu erm\u00f6glichen.</p>"},{"location":"#admins","title":"\ud83d\udc68\u200d\ud83d\udcbc Admins","text":"<ul> <li>Manuel   (Noch in Arbeit)</li> </ul>"},{"location":"#regeln-fur-einzelne-ordner-und-notizen","title":"\ud83d\udcc2 Regeln f\u00fcr einzelne Ordner und Notizen","text":"<p>Erstellte Ordner und Notizen sollten, falls vorhanden, mit passenden Icons versehen werden. Es ist auch m\u00f6glich, ein Custom Icon Pack hinzuzuf\u00fcgen, um Icons aus dem Internet zu verwenden.</p>"},{"location":"#wie-kann-man-beitragen","title":"\u270d\ufe0f Wie kann man beitragen?","text":"<p>F\u00fcr jede Zusammenfassung sollte ein eigener Branch erstellt werden. Der Name des Branches sollte das Fach und die jeweilige \u00dcberschrift der Zusammenfassung enthalten. Bei anderen \u00c4nderungen, wie dem Hinzuf\u00fcgen von Plugins, sollte der Name ebenfalls sinnvoll formuliert werden.</p> <p>Sobald eine Zusammenfassung oder andere \u00c4nderung im Branch des jeweiligen Benutzers vorliegt und diese f\u00fcr alle zur Verf\u00fcgung gestellt werden soll, muss ein Pull-Request erstellt werden. Bitte immer nur pro Stoffabschnitt einen Pull-Request stellen.</p> <p>Die Pull-Requests werden von den Admins \u00fcberpr\u00fcft, um sicherzustellen, dass alle notwendigen Informationen in der Zusammenfassung enthalten sind und dass alle Zusammenfassungen \u00e4hnlich aufgebaut sind. Falls alles passt, wird der Pull-Request genehmigt.</p>"},{"location":"#plugins","title":"\ud83d\udd0c Plugins","text":"<p>Um die Arbeit zu erleichtern, wurden einige n\u00fctzliche Plugins in den Vault hinzugef\u00fcgt, die nachfolgend erkl\u00e4rt werden.</p>"},{"location":"#code-emitter","title":"\ud83d\udcbb Code Emitter","text":"<p>Code Emitter erm\u00f6glicht es, auf jeder Plattform Code-Schnipsel auszuf\u00fchren, indem der Code an externe Compiler gesendet wird.</p> <p>Beispiel C: <pre><code>#include &lt;stdio.h&gt;\n\nvoid printArray(int arr[], int size) {\n    for (int i = 0; i &lt; size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int numbers[] = {10, 20, 30, 40, 50, 60};\n    int size = sizeof(numbers) / sizeof(numbers[0]);\n    printArray(numbers, size);\n    return 0;\n}\n</code></pre></p>"},{"location":"#folder-notes","title":"\ud83d\uddc2 Folder Notes","text":"<p>Dieses Plugin erm\u00f6glicht es, f\u00fcr Ordner eigene Notizen anzulegen. Dies ist m\u00f6glich, indem man mit einem Rechtsklick auf den Ordner \u2192 Folder Notes Command \u2192 Create Markdown Folder Note w\u00e4hlt.</p>"},{"location":"#iconize","title":"\ud83d\uddbc Iconize","text":"<p>Erm\u00f6glicht es, Ordnern oder Notizen individuelle Icons hinzuzuf\u00fcgen.</p>"},{"location":"#omnisearch","title":"\ud83d\udd0d Omnisearch","text":"<p>Bietet eine verbesserte Suche.</p>"},{"location":"#quick-latex","title":"\ud83e\uddee Quick LaTeX","text":"<p>Quick LaTeX erm\u00f6glicht es, mathematische Formeln in LaTeX zu schreiben.</p>"},{"location":"#tikz-jax","title":"\ud83d\udcca TikZ Jax","text":"<p>TikZ Jax ist ein Plugin, das es erm\u00f6glicht, LaTeX-Figuren in Obsidian zu erstellen.</p>"},{"location":"#full-calendar","title":"\ud83d\udcc5 Full Calendar","text":"<p>Full Calendar ist ein Plugin, das es erm\u00f6glicht, iCal-Kalender einzubinden. Zum aktuellen Zeitpunkt sind die Zeiten jedoch noch etwas ungenau.</p>"},{"location":"#timeline","title":"\ud83d\udcc8 Timeline","text":"<p>Timeline ist ein Plugin, um eine Zeitleiste zu erstellen, beispielsweise hier: [[2. C, wie alles begann]]</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Digitaltechnik/Schaltalgebra/Schaltungsvereinfachung/","title":"KV-Diagramm","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Digitaltechnik/Schaltalgebra/Schaltungsvereinfachung/#definition","title":"Definition","text":"<p>Gegeben sei eine \\(n\\)-Stellige Bool'sche Funktion (siehe: Pr\u00e4dikat). Ein KV_Diagramm besteht aus \\(2^n\\) Feldern, die zu einem Rechteckschema angeordnet sind. Jedem Feld ist eine Belegung der Variablen zugeordnet.</p> <p>[!tip] Schema f\u00fcr \\(n=1\\)</p> \\(A\\) \\(\\overline{A}\\) \\(1\\) \\(0\\) <p>[!tip] Schema f\u00fcr \\(n=2\\)</p> \\(A\\) \\(\\overline{A}\\) \\(B\\) \\(11\\) \\(01\\) \\(\\overline{B}\\) \\(10\\) \\(00\\) <p>[!tip] Schema f\u00fcr \\(n=3\\)</p> \\(\\overline{A}\\) \\(A\\) \\(A\\) \\(\\overline{A}\\) \\(B\\) \\(010\\) \\(110\\) \\(111\\) \\(011\\) \\(\\overline{B}\\) \\(000\\) \\(100\\) \\(101\\) \\(001\\) \\(\\overline{C}\\) \\(\\overline{C}\\) \\(C\\) \\(C\\) <p>[!tip] Schema f\u00fcr \\(n=4\\)</p> \\(\\overline{A}\\) \\(A\\) \\(A\\) \\(\\overline{A}\\) \\(\\overline{B}\\) \\(0000\\) \\(1000\\) \\(1010\\) \\(0010\\) \\(\\overline{D}\\) \\(B\\) \\(0100\\) \\(1100\\) \\(1110\\) \\(0110\\) \\(\\overline{D}\\) \\(B\\) \\(0101\\) \\(1101\\) \\(1111\\) \\(0111\\) \\(D\\) \\(\\overline{B}\\) \\(0001\\) \\(1001\\) \\(1011\\) \\(0011\\) \\(D\\) \\(\\overline{C}\\) \\(\\overline{C}\\) \\(C\\) \\(C\\) <p>[!example]- Beispiel Gegeben sei die Bool'sche Funktion \\(f(A, B, C) = (A \\land \\overline{B}) \\lor (\\overline{A} \\land B \\land \\overline{C})\\). Zuerst notieren wir die Wahrheitstabelle, zur \u00fcbersicht:</p> \\(A\\) \\(B\\) \\(C\\) \\(A \\land \\overline{B}\\) \\(\\overline{A} \\land B \\land \\overline{C}\\) \\(f(A, B, C)\\) 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 1 1 0 1 1 0 0 0 1 0 0 1 0 1 1 0 1 1 0 1 1 1 0 0 0 0 1 1 1 0 0 0 <p>Jetzt k\u00f6nnen wir gut die entsprechende KV-Tabelle ablesen:</p> \\(\\overline{A}\\) \\(A\\) \\(A\\) \\(\\overline{A}\\) \\(B\\) 1 0 0 0 \\(\\overline{B}\\) 0 1 1 0 \\(\\overline{C}\\) \\(\\overline{C}\\) \\(C\\) \\(C\\)"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Digitaltechnik/Schaltalgebra/Logische%20Grundfunktionen/Antivalenz%20%28Exklusiv-ODER%2C%20XOR%29/","title":"Antivalenz (Exklusiv ODER, XOR)","text":"<p>[!tip] Schreibweisen  \\(y = (x_{1}\\land \\lnot x_{2})\\lor (\\lnot x_{1}\\land x_2)\\) \\(y = (x_{1}\\land \\overline{x_{2}})\\lor (\\overline{x_{1}}\\land x_2)\\)</p> <p>[!info]- Wahrheitstabelle</p> \\(x_1\\) \\(x_2\\) \\(y\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(1\\) \\(1\\) \\(1\\) \\(0\\) \\(1\\) \\(1\\) \\(1\\) \\(0\\)"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Digitaltechnik/Schaltalgebra/Logische%20Grundfunktionen/Disjunktion%20%28ODER%2C%20OR%29/","title":"Disjunktion (ODER, OR)","text":"<p>[!tip] Schreibweisen  \\(y = x_1 \\lor x_2\\) \\(y = x_{1} + x_{2}\\)</p> <p>[!info]- Wahrheitstabelle</p> \\(x_1\\) \\(x_2\\) \\(y\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(1\\) \\(1\\) \\(1\\) \\(0\\) \\(1\\) \\(1\\) \\(1\\) \\(1\\)"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Digitaltechnik/Schaltalgebra/Logische%20Grundfunktionen/Konjunktion%20%28UND%2C%20AND%29/","title":"Konjunktion (UND, AND)","text":"<p>[!tip] Schreibweisen  \\(y = x_1 \\land x_2\\) \\(y = x_{1}\\cdot x_{2} = x_{1}x_{2}\\)</p> <p>[!info]- Wahrheitstabelle</p> \\(x_1\\) \\(x_2\\) \\(y\\) \\(0\\) \\(0\\) \\(0\\) \\(0\\) \\(1\\) \\(0\\) \\(1\\) \\(0\\) \\(0\\) \\(1\\) \\(1\\) \\(1\\)"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Digitaltechnik/Schaltalgebra/Logische%20Grundfunktionen/Logische%20Grundfunktionen/","title":"Logische Grundfunktionen","text":"<p>Aus den drei logischen Grundfunktionen k\u00f6nne alle komplexen logischen Funktionen hergeleitet werden (Vergleich: Aussagenlogik).</p> <p>Es seien jeweils \\(x_i\\) Eing\u00e4nge und \\(y\\) der Entsprechende Ausgang:</p> <p>Negation (NICHT, NOT) Konjunktion (UND, AND) Disjunktion (ODER, OR) NICHT-UND, NAND NICHT-ODER, NOR Antivalenz (Exklusiv-ODER, XOR)</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Digitaltechnik/Schaltalgebra/Logische%20Grundfunktionen/NICHT-ODER%2C%20NOR/","title":"NICHT ODER, NOR","text":"<p>[!tip] Schreibweisen  \\(y = \\lnot(x_1 \\lor x_2)\\) \\(y = \\overline{x_{1} + x_{2}}\\)</p> <p>[!info]- Wahrheitstabelle</p> \\(x_1\\) \\(x_2\\) \\(y\\) \\(0\\) \\(0\\) \\(1\\) \\(0\\) \\(1\\) \\(0\\) \\(1\\) \\(0\\) \\(0\\) \\(1\\) \\(1\\) \\(0\\)"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Digitaltechnik/Schaltalgebra/Logische%20Grundfunktionen/NICHT-UND%2C%20NAND/","title":"NICHT UND, NAND","text":"<p>[!tip] Schreibweisen  \\(y = \\lnot(x_1 \\land x_2)\\) \\(y = \\overline{x_{1}\\cdot x_{2}} = \\overline{x_{1}x_{2}}\\)</p> <p>[!info]- Wahrheitstabelle</p> \\(x_1\\) \\(x_2\\) \\(y\\) \\(0\\) \\(0\\) \\(1\\) \\(0\\) \\(1\\) \\(1\\) \\(1\\) \\(0\\) \\(1\\) \\(1\\) \\(1\\) \\(0\\)"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Digitaltechnik/Schaltalgebra/Logische%20Grundfunktionen/Negation%20%28NICHT%2C%20NOT%29/","title":"Negation (NICHT, NOT)","text":"<p>[!tip] Schreibweisen \\(y = \\lnot x\\) \\(y = \\overline{x}\\)</p> <p>[!info]- Wahrheitstabelle</p> \\(x\\) \\(y\\) \\(0\\) \\(1\\) \\(1\\) \\(0\\)"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/Allgemeine%20Informationen/Gut%20lesbare%20Funktionen/","title":"Gut lesbare Funktionen","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/Allgemeine%20Informationen/Gut%20lesbare%20Funktionen/#zusammenhalt","title":"\ud83e\udd1d Zusammenhalt","text":"<p>Eine Funktion f\u00fchrt nur eine Aufgabe aus. Die Wirkungsweise der Funktion kann in einem einzigen Satz beschrieben werden.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/Allgemeine%20Informationen/Gut%20lesbare%20Funktionen/#allgemeingultigkeit","title":"\ud83c\udf0d Allgemeing\u00fcltigkeit","text":"<p>Eine Funktion sollte ihre Aufgabe f\u00fcr alle zu erwartenden F\u00e4lle und Fehlerf\u00e4lle erf\u00fcllen.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/Allgemeine%20Informationen/Gut%20lesbare%20Funktionen/#einfachheit","title":"\ud83c\udfaf Einfachheit","text":"<p>Eine Funktion sollte ihre Aufgabe auf die einfachstm\u00f6gliche Weise erledigen. Es hat sich bew\u00e4hrt, Funktionen auf ca. 25 bis 100 Zeilen zu beschr\u00e4nken.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/Allgemeine%20Informationen/Gut%20lesbare%20Funktionen/#dokumentation","title":"\ud83d\udcda Dokumentation","text":"<p>Jede Funktion sollte einen Kommentar haben, der ihre Aufgabe beschreibt. Auch Parameter und lokale Variablen der Funktion sollten kommentiert werden.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/Allgemeine%20Informationen/Klassifizierung%20von%20Sprachen/","title":"Klassifizierung von Sprachen","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/Allgemeine%20Informationen/Klassifizierung%20von%20Sprachen/#prozedurale-sprachen","title":"\ud83d\udda5\ufe0f Prozedurale Sprachen","text":"<ul> <li>C</li> <li>Fortran</li> <li>Pascal</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/Allgemeine%20Informationen/Klassifizierung%20von%20Sprachen/#funktionale-sprachen","title":"\ud83c\udf00 Funktionale Sprachen","text":"<ul> <li>LISP</li> <li>Miranda</li> <li>Haskell</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/Allgemeine%20Informationen/Klassifizierung%20von%20Sprachen/#objektorientierte-sprachen","title":"\ud83d\udee0\ufe0f Objektorientierte Sprachen","text":"<ul> <li>C++</li> <li>C#</li> <li>Java</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/Allgemeine%20Informationen/Klassifizierung%20von%20Sprachen/#logische-und-regelbasierte-sprachen","title":"\ud83e\udde9 Logische und regelbasierte Sprachen","text":"<ul> <li>Prolog</li> <li>XSLT</li> <li>OPS5</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/Allgemeine%20Informationen/Klassifizierung%20von%20Sprachen/#assembler-und-maschinensprache","title":"\ud83d\udcbb Assembler und Maschinensprache","text":"<p>Je nach Prozessortyp unterschiedlich.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/Allgemeine%20Informationen/Klassifizierung%20von%20Sprachen/#sonstige-sprachen-und-umgebungen","title":"\ud83c\udf10 Sonstige Sprachen und Umgebungen","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/Allgemeine%20Informationen/Klassifizierung%20von%20Sprachen/#auszeichnungssprachen","title":"\ud83d\udcc4 Auszeichnungssprachen","text":"<ul> <li>HTML</li> <li>XML</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/Allgemeine%20Informationen/Klassifizierung%20von%20Sprachen/#datenbanksprachen","title":"\ud83d\uddc3\ufe0f Datenbanksprachen","text":"<ul> <li>SQL</li> <li>dBase</li> <li>Clipper</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/Allgemeine%20Informationen/Programmierrichtlinien/","title":"Programmierrichtlinien","text":"Element Regel Beispiel #define u. Makros Nur Grossbuchstaben, Trennung mit \"_\" #define MAX_Count Variable nur Kleinbuchstaben, CamelCase int addressArray: mindestens 4 Zeichen, ausser lok. Schleifenz\u00e4hler for(inti=0;i&lt;nzahl;i++) Pointervariable Name beginnt mit p_ int* p_address_array; Funktionsnamen F\u00fchrender Grossbuchstabe, CamelCase void MySortingFunction(); Funktionsparameter Inputparamter: beginnt mit i_ MyFunc(i_count_value,....) Reiner Outputparameter: beginnt mit o_ MyFunc(0_p_count_value,..) In-/Outputparameter: beginnt mit io_ MyFunc(io_p_count_value,....) Wertebereich apr\u00fcfen! int MyFunc(int i_count_value){if(9 &lt;i_count_value)return(EXIT_FAILUre);} if-statement Value left, keine Zuweisungen! if(34==number_students) Zeilenl\u00e4nge Maximal 80 Zeichen Funktionsl\u00e4nge Maximal 50 Zeilen Klammern/Bl\u00f6cke Klammern untereinander,Klammer und Code je 2 spaces einr\u00fccken (kein Tabulator) 1 Statement nach if oder else in gleiche Zeile,&gt;1 Statement pro Block (besser: &gt;=1) immer klammern! 1 Statement pro Zeile (1 x \";\") Kommentare //am Kommentaranfang int my_counter: //z\u00e4hlt Autos /Bei mehrzeiligen Kommentaren/* Konstante Keine Konstanten &gt; 1 im Funktionscode und Definitionen! #define STUD_ANZ 34int array [STUD_ANZ];"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/C/","title":"C","text":"<p>1. Allgemein 2. Variablen 3.Strukturierte Programmierung 4. Operatoren 1. Arrays 1. Funktionen 1. Strukturen</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/1.%20Allgemein/1.%20Allgemein/","title":"1. Allgemein","text":"<p>1. Vorl\u00e4ufer von C 2. C, wie alles began 3. Entstehung von C 4. \u00dcbersetzen und Linken</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/1.%20Allgemein/1.%20Vorl%C3%A4ufer%20von%20C/","title":"1. Vorl\u00e4ufer von C","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/1.%20Allgemein/1.%20Vorl%C3%A4ufer%20von%20C/#cpl-combinded-programming-language","title":"\ud83c\udf10 CPL (Combinded Programming Language)","text":"<p>Erster Versuch der Synthese zwischen problemorientierter h\u00f6herer Programmiersprache Klassifizierung von Sprachen und maschinennaher Programmiersprache;</p> <p>Datum: 1963</p> <p>Problem: - zu komplex - schwierig zu erlernen - schwierig zu implementieren</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/1.%20Allgemein/1.%20Vorl%C3%A4ufer%20von%20C/#bcpl-basic-combined-programming-language","title":"\ud83d\udd24 BCPL (Basic Combined Programming Language)","text":"<p>Beschr\u00e4nkung auf die wesentlichen Eigenschaften von CPL, auch heute noch verwendet (Entwicklung von Betriebssystemen und Compilern)</p> <p>Datum: 1967 Entwickler: Martin Richards</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/1.%20Allgemein/1.%20Vorl%C3%A4ufer%20von%20C/#b","title":"\ud83c\udd71\ufe0f B","text":"<p>Weitere Vereinfachung von CPL, Implementierung von UNIX auf DEC PDP-7; </p> <p>Datum 1969 Entwickler: Ken Thompson, Bell Labs</p> <p>Problem: - zu wenig allgemein - zu beschr\u00e4nkte Anwendungsm\u00f6glichkeiten (z.B. keine Datentypen au\u00dfer Maschinenwort)</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/1.%20Allgemein/2.%20C%2C%20wie%20alles%20began/","title":"2. C, wie alles began","text":"<pre><code>[line-2]\n+ 1972 \n+ Erste Implementierung von C \ud83c\udf10\n+ Implementierung von UNIX auf DEC PDP-11 \ud83d\udda5\ufe0f\n\n+ 1973 \n+ Erg\u00e4nzung und Verbesserung \ud83d\udee0\ufe0f\n+ Entwickler: Brian W. Kernighan, Bell Labs \ud83d\udc68\u200d\ud83d\udcbb\n\n+ 1978\n+ Sprachbeschreibung \u201eK&amp;R-C\u201c \ud83d\udcd8\n+ Hohe Portabilit\u00e4t von UNIX durch C (ca. 13.000 Programmzeilen des damaligen UNIX Systems waren nur ca. 800 in Assembler geschrieben, der Rest in C) \ud83c\udf0d\n+ Nahezu alle UNIX-Dienstprogramme sind in C geschrieben. \ud83d\udee0\ufe0f\n\n+ 1983 \n+ Beginn der Normungsaktivit\u00e4ten \ud83d\udcdc\n\n+ 1988\n+ Ver\u00f6ffentlichung des Norm-Entwurfs \ud83d\udcc4\n+ Einschlie\u00dflich der Standard-C-Bibliothek \ud83d\udcda\n\n+ 1989\n+ Einf\u00fchrung des ANSI-C-Standards (ANSI X3.159-1989) \ud83c\udf10\n+ Inklusive der Standard-C-Bibliothek \ud83d\udcd8\n\n+ 1990\n+ ISO-Standardisierung (ISO 9899:1990) \ud83c\udf10\n+ Entstehung des ANSI/ISO-C (Standard-C) \ud83d\udcd8\n\n+ 1994\n+ Erweiterung der ISO-Norm (Amendment 1 to Standard 9899:1990) \ud83d\udcdd\n\n+ 1995\n+ ISO/IEC 9899/AMD1:1995 (C95) \ud83c\udf0d\n+ Weiteres Amendment zur C-Norm \ud83d\udcd8\n\n+ 1999\n+ ISO/IEC 9899:1999 (C99) \ud83c\udf10\n+ Einf\u00fchrung des neuen ISO-Standards f\u00fcr C \ud83d\udcd8\n\n+ 2001\n+ Technical Corrigendum 1 \ud83d\udcdd\n+ Korrekturen und Verbesserungen gem\u00e4\u00df dem ersten technischen Korrigendum \ud83d\udee0\ufe0f\n\n+ 2004\n+ Technical Corrigendum 2 \ud83d\udcdd\n+ Weitere Korrekturen und Verbesserungen gem\u00e4\u00df dem zweiten technischen Korrigendum \ud83d\udee0\ufe0f\n\n+ 2007\n+ Technical Corrigendum 3 \ud83d\udcdd\n+ Fortgesetzte Korrekturen und Verbesserungen gem\u00e4\u00df dem dritten technischen Korrigendum \ud83d\udee0\ufe0f\n\n+ 2011\n+ ISO/IEC 9899:2011 (ISO C11) \ud83c\udf10\n+ Unsere Entwicklungsumgebung basiert auf diesem ISO-Standard \ud83d\udee0\ufe0f\n\n+ 2018\n+ ISO/IEC 9899:2018 (C18) \ud83c\udf10\n+ Neue Ausgabe des ISO-Standards f\u00fcr C \ud83d\udcd8\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/1.%20Allgemein/3.%20Entstehung%20von%20C/","title":"3. Entstehung von C","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/1.%20Allgemein/4.%20%C3%9Cbersetzen%20und%20Linken/","title":"4. \u00dcbersetzen und Linken","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/1.%20Allgemein/4.%20%C3%9Cbersetzen%20und%20Linken/#abhangigkeiten","title":"Abh\u00e4ngigkeiten","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/2.%20Variablen/1.%20Datentypen/","title":"1. Datentypen","text":"Datentyp Bits Wertebereich bin\u00e4r Wertebereich dezimal short 16 unsigend short 16 int 32 unsigned int 32 long 64 unsigned long 64 <p>Die Gr\u00f6\u00dfen f\u00fcr short, int und long sind Maschinen abh\u00e4ngig und nicht eindeutig festgelegt. </p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/2.%20Variablen/2.%20Ein-%20Ausgabe%20Konsole/","title":"2. Ein  Ausgabe Konsole","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/2.%20Variablen/2.%20Ein-%20Ausgabe%20Konsole/#ausgabefunktion-printf","title":"\ud83d\udda8\ufe0f Ausgabefunktion <code>printf()</code>","text":"<p><code>printf()</code> ist eine grundlegende Funktion in C zur Ausgabe von Daten auf die Konsole. Sie geh\u00f6rt zur Standardbibliothek und ist in der Header-Datei <code>stdio.h</code> definiert. </p> <p>[!Syntax]- - Syntax: <code>int printf(const char *format, ...);</code>  - Erkl\u00e4rung: Diese Funktion druckt den durch den Format-String <code>format</code> spezifizierten Text aus und ersetzt dabei Formatangaben (z.B. <code>%d</code>, <code>%s</code>) durch die Werte der nachfolgenden Variablen. Der R\u00fcckgabewert ist die Anzahl der ausgegebenen Zeichen.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/2.%20Variablen/2.%20Ein-%20Ausgabe%20Konsole/#beispiele-fur-printf-mit-unterschiedlichen-parametern","title":"Beispiele f\u00fcr <code>printf()</code> mit unterschiedlichen Parametern","text":"<pre><code>#include &lt;stdio.h&gt;\nint main() \n{     \n    printf(\"Einfache Ausgabe\\n\");\n    printf(\"Zahl mit Dezimalwert: %d\\n\", 10);\n    printf(\"Zahl mit Hexadezimalwert: %x\\n\", 255); \n    printf(\"Zeichen: %c\\n\", 'A');\n    printf(\"String: %s\\n\", \"Hallo Welt\"); \n    printf(\"Flie\u00dfkommazahl: %.2f\\n\", 3.14159);\n    return 0; \n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/2.%20Variablen/2.%20Ein-%20Ausgabe%20Konsole/#eingabefunktion-scanf","title":"\ud83d\udce5 Eingabefunktion <code>scanf()</code>","text":"<p><code>scanf()</code> ist das Pendant zu <code>printf()</code> und wird verwendet, um Daten von der Standard-Eingabe (normalerweise der Tastatur) zu lesen.</p> <p>[!Syntax]- - Syntax: <code>int scanf(const char *format, ...);</code> - Erkl\u00e4rung: Die Funktion liest die Eingaben entsprechend den in der Formatzeichenkette spezifizierten Anweisungen und speichert die Werte in den angegebenen Variablen. Die Funktion gibt die Anzahl der erfolgreich gelesenen und zugewiesenen Werte zur\u00fcck.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/2.%20Variablen/2.%20Ein-%20Ausgabe%20Konsole/#beispiele-fur-scanf-mit-unterschiedlichen-eingabeparametern","title":"Beispiele f\u00fcr <code>scanf()</code> mit unterschiedlichen Eingabeparametern","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main()\n{ \n    int zahl;\n    char zeichen; \n    float flie\u00dfkommazahl;  \n    char string[100]; \n\n    printf(\"Geben Sie eine ganze Zahl ein: \");\n    scanf(\"%d\", &amp;zahl); \n\n    printf(\"Geben Sie ein Zeichen ein: \");\n    scanf(\" %c\", &amp;zeichen); // Beachten Sie das Leerzeichen vor %c, um das letzte Newline zu \u00fcberspringen\n\n    printf(\"Geben Sie eine Flie\u00dfkommazahl ein: \");\n    scanf(\"%f\", &amp;flie\u00dfkommazahl);\n\n    printf(\"Geben Sie einen String ein: \");\n    scanf(\"%s\", string);      \n\n    return 0; \n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/2.%20Variablen/2.%20Ein-%20Ausgabe%20Konsole/#weitere-moglichkeiten-fur-die-ein-und-ausgabe-in-c","title":"Weitere M\u00f6glichkeiten f\u00fcr die Ein- und Ausgabe in C","text":"<p>Neben <code>printf()</code> und <code>scanf()</code> gibt es noch andere Funktionen zur Datenverarbeitung in C:</p> <ul> <li><code>fgets()</code> und <code>fputs()</code>: Funktionen zum Lesen und Schreiben von Strings. <code>fgets()</code> ist sicherer als <code>scanf()</code> f\u00fcr String-Eingaben, da es das \u00dcberlaufproblem vermeidet.</li> <li><code>getchar()</code> und <code>putchar()</code>: Zum Lesen und Schreiben einzelner Zeichen.</li> <li><code>fprintf()</code> und <code>fscanf()</code>: Diese Funktionen funktionieren \u00e4hnlich wie <code>printf()</code> und <code>scanf()</code>, erm\u00f6glichen jedoch die Angabe eines <code>FILE</code>-Streams, um beispielsweise Daten in eine Datei zu schreiben oder aus einer Datei zu lesen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/2.%20Variablen/2.%20Variablen/","title":"2. Variablen","text":"<p>1. Datentypen 2. Ein- Ausgabe Konsole 3. Schl\u00fcsselw\u00f6rter 4. Dateibasiertes Input Output-Modell in C 5. Headerdateien 6. Pr\u00e4prozessor 7. Globale Variablen</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/2.%20Variablen/3.%20Schl%C3%BCsselw%C3%B6rter/","title":"3. Schl\u00fcsselw\u00f6rter","text":"<ul> <li>auto</li> <li>break</li> <li>case</li> <li>char</li> <li>const</li> <li>continue</li> <li>default</li> <li>do</li> <li>double</li> <li>else</li> <li>enum</li> <li>extern</li> <li>float</li> <li>for</li> <li>goto</li> <li>if</li> <li>int</li> <li>long</li> <li>register</li> <li>return</li> <li>short</li> <li>signed</li> <li>sizeof</li> <li>static</li> <li>struct</li> <li>switch</li> <li>typedef</li> <li>union</li> <li>unsigned</li> <li>void</li> <li>volatile</li> <li>while</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/2.%20Variablen/4.%20Dateibasiertes%20Input%20Output-Modell%20in%20C/","title":"4. Dateibasiertes Input Output Modell in C","text":"<p>In der Programmiersprache C werden alle Ein- und Ausgabeoperationen (I/O) unter dem Konzept des Streams abstrahiert. Das bedeutet, dass Eingaben und Ausgaben als sequentielle Datenstr\u00f6me behandelt werden. Dieser Ansatz ist Teil eines breiteren Modells, das in Unix und vielen Unix-\u00e4hnlichen Betriebssystemen stark verwurzelt ist, wo \"alles eine Datei ist\". Unter diesem Modell k\u00f6nnen Ger\u00e4te, regul\u00e4re Dateien und Netzwerkverbindungen durch Dateideskriptoren repr\u00e4sentiert und mit denselben Funktionen manipuliert werden.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/2.%20Variablen/4.%20Dateibasiertes%20Input%20Output-Modell%20in%20C/#standard-streams","title":"\ud83c\udf1f Standard-Streams","text":"<p>In C gibt es drei vordefinierte Streams, die durch die Standardbibliothek stdio.h zug\u00e4nglich sind:</p> <ul> <li>stdin (Standard Input): Dies ist der Standard-Eingabestream, der in den meisten F\u00e4llen von der Tastatur liest.</li> <li>stdout (Standard Output): Der Standard-Ausgabestream, der typischerweise auf die Konsole oder das Terminalfenster gerichtet ist.</li> <li>stderr (Standard Error): Dieser Stream wird f\u00fcr Fehlermeldungen verwendet und ist ebenfalls auf die Konsole gerichtet, kann aber separat von stdout behandelt werden.</li> </ul> <p>Diese Streams sind in C als Dateien im Sinne des Streams-Modells implementiert. Wenn Sie <code>printf()</code> aufrufen, schreiben Sie tats\u00e4chlich Daten in den <code>stdout</code>-Stream, und wenn Sie <code>scanf()</code> verwenden, lesen Sie aus dem <code>stdin</code>-Stream.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/2.%20Variablen/4.%20Dateibasiertes%20Input%20Output-Modell%20in%20C/#dateideskriptoren","title":"\ud83d\udd0d Dateideskriptoren","text":"<p>Auf einer tieferen Ebene, insbesondere in Betriebssystemen, die dem POSIX-Standard folgen, wird jeder dieser Streams durch einen Dateideskriptor repr\u00e4sentiert:</p> <ul> <li>0: Standard Input (<code>stdin</code>)</li> <li>1: Standard Output (<code>stdout</code>)</li> <li>2: Standard Error (<code>stderr</code>)</li> </ul> <p>Dateideskriptoren sind einfache Ganzzahlen, die vom Betriebssystem verwaltet werden. Wenn ein Programm eine Datei oder eine andere I/O-Ressource (wie ein Netzwerksocket) \u00f6ffnet, weist das Betriebssystem dem Vorgang einen Dateideskriptor zu. Die Funktionen <code>read()</code> und <code>write()</code>, die direkt mit diesen Dateideskriptoren arbeiten, bieten eine sehr niedrige Abstraktionsebene f\u00fcr I/O-Operationen, die f\u00fcr fortgeschrittene Anwendungen n\u00fctzlich sein kann.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/2.%20Variablen/4.%20Dateibasiertes%20Input%20Output-Modell%20in%20C/#umgang-mit-dateien-in-c","title":"\ud83d\udcc2 Umgang mit Dateien in C","text":"<p>Um Dateien in C zu handhaben, werden Funktionen wie <code>fopen()</code>, <code>fclose()</code>, <code>fread()</code>, <code>fwrite()</code>, <code>fscanf()</code> und <code>fprintf()</code> verwendet. Diese Funktionen arbeiten mit Datei-Streams (<code>FILE *</code>), die von der C-Standardbibliothek bereitgestellt werden und eine h\u00f6here Abstraktionsebene als die systemnahen Dateideskriptoren bieten. Ein <code>FILE</code>-Objekt repr\u00e4sentiert dabei den ge\u00f6ffneten Stream.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/2.%20Variablen/4.%20Dateibasiertes%20Input%20Output-Modell%20in%20C/#beispiel-offnen-und-schreiben-in-eine-datei","title":"\ud83d\udcdd Beispiel: \u00d6ffnen und Schreiben in eine Datei","text":"<pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    FILE *fp = fopen(\"example.txt\", \"w\");  // \u00d6ffnet eine Datei zum Schreiben\n    if (fp == NULL) {\n        perror(\"Datei konnte nicht ge\u00f6ffnet werden\");\n        return 1;\n    }\n    fprintf(fp, \"Hallo, Datei!\\n\");  // Schreibt in die Datei\n    fclose(fp);  // Schlie\u00dft den Stream und gibt Ressourcen frei\n    return 0;\n}\n</code></pre> <p>Dieses Modell erm\u00f6glicht es, dass Ein- und Ausgabeoperationen in C konsistent \u00fcber verschiedenste Typen von Datenquellen hinweg funktionieren, indem sie die spezifischen Details der zugrundeliegenden Implementierung hinter einer gemeinsamen Schnittstelle verbergen.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/2.%20Variablen/5.%20Headerdateien/","title":"5. Headerdateien","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/2.%20Variablen/5.%20Headerdateien/#was-sind-header-dateien","title":"\ud83d\udcc4 Was sind Header-Dateien?","text":"<p>Header-Dateien in C sind Textdateien mit der Erweiterung <code>.h</code> und enthalten C-Code, der in anderen C-Dateien wiederverwendet werden kann. Typischerweise enthalten sie:</p> <ul> <li>Deklarationen von Funktionen</li> <li>Definitionen von Makros</li> <li>Strukturdefinitionen</li> <li>Typdefinitionen</li> <li>Externe Variablendeklarationen</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/2.%20Variablen/5.%20Headerdateien/#wie-werden-sie-angezeigt","title":"\ud83d\udda5\ufe0f Wie werden sie angezeigt?","text":"<p>Header-Dateien werden wie normale Textdateien in einem Texteditor angezeigt. Sie enthalten Code, der \u00fcblicherweise nicht ausgef\u00fchrt, sondern beim Kompilieren eines Programms in dieses einbezogen wird.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/2.%20Variablen/5.%20Headerdateien/#wie-funktionieren-sie","title":"\ud83d\udca1 Wie funktionieren sie?","text":"<p>Wenn ein C-Programm kompiliert wird, sucht der Pr\u00e4prozessor nach <code>#include</code>-Direktiven im Code. Sobald eine solche Direktive gefunden wird (z.B. <code>#include &lt;stdio.h&gt;</code>), ersetzt der Pr\u00e4prozessor diese Direktive durch den vollst\u00e4ndigen Inhalt der entsprechenden Header-Datei. Auf diese Weise werden Funktionen und Makros aus der Header-Datei im Quelltext verf\u00fcgbar, noch bevor der Compiler den Code verarbeitet.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/2.%20Variablen/5.%20Headerdateien/#was-ist-in-header-dateien-enthalten","title":"\ud83d\udce6 Was ist in Header-Dateien enthalten?","text":"<p>Ein gutes Beispiel f\u00fcr eine h\u00e4ufig verwendete Header-Datei in C ist <code>stdio.h</code>, die f\u00fcr die Ein- und Ausgabe von Daten verwendet wird. In <code>stdio.h</code> sind unter anderem folgende wichtige Funktionen deklariert:</p> <ul> <li><code>printf()</code> zur Ausgabe von Daten auf die Standardausgabe</li> <li><code>scanf()</code> zur Eingabe von Daten von der Standardeingabe</li> <li><code>fopen()</code>, <code>fclose()</code>, <code>fread()</code> und <code>fwrite()</code> zur Arbeit mit Dateien</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/2.%20Variablen/5.%20Headerdateien/#beispiele","title":"Beispiele","text":"<p>``` cpp title:math_utils.h // Funktion zur Addition zweier Zahlen int add(int x, int y);</p> <p>// Funktion zur Subtraktion zweier Zahlen int subtract(int x, int y);</p> <p>// Funktion zur Multiplikation zweier Zahlen int multiply(int x, int y);</p> <p>// Funktion zur Division zweier Zahlen double divide(int x, int y);</p> <pre><code>```cpp title:math_utils.c\n#include \"math_utils.h\"\n\nint add(int x, int y) {\n    return x + y;\n}\n\nint subtract(int x, int y) {\n    return x - y;\n}\n\nint multiply(int x, int y) {\n    return x * y;\n}\n\ndouble divide(int x, int y) {\n    if (y != 0) {\n        return (double) x / y;\n    } else {\n        return 0.0; // Einfache Fehlerbehandlung, k\u00f6nnte verbessert werden\n    }\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/2.%20Variablen/6.%20Pr%C3%A4prozessor/","title":"6. Pr\u00e4prozessor","text":"<p>Der\u00a0C-Pr\u00e4prozessor\u00a0(auch als\u00a0cpp\u00a0oder\u00a0C Precompiler\u00a0bezeichnet) ist ein wichtiger Bestandteil des Kompilierungsprozesses in der Programmiersprache C. Lassen Sie uns einen genaueren Blick darauf werfen:</p> <ol> <li>Hintergrund:    <ul> <li>In den fr\u00fchesten Versionen der Programmiersprache C gab es keinen Pr\u00e4prozessor.</li> <li>Alan Snyder und andere trugen dazu bei, den Pr\u00e4prozessor einzuf\u00fchren, um das Einf\u00fcgen von Quelltextdateien und das Ersetzen von Makros zu erm\u00f6glichen.</li> <li>Im Laufe der Zeit entwickelte sich der Pr\u00e4prozessor von einem optionalen Zusatzprogramm zu einer standardisierten Komponente der Programmiersprache.</li> </ul> </li> <li>Funktionen des C-Pr\u00e4prozessors:    <ul> <li>Der C-Pr\u00e4prozessor bearbeitet Anweisungen wie:<ul> <li><code>#include</code>: Einf\u00fcgen von Quelltext aus anderen Dateien.</li> <li><code>#define</code>: Ersetzen von Makros.</li> <li><code>#if</code>: Bedingte \u00dcbersetzung.</li> </ul> </li> <li>Die Pr\u00e4prozessor-Anweisungen sind nicht spezifisch f\u00fcr die Grammatik der Sprache C und k\u00f6nnen auch f\u00fcr andere Dateitypen verwendet werden.</li> </ul> </li> <li>Textersetzer:    <ul> <li>Der C-Pr\u00e4prozessor erkennt und bearbeitet nur ihm bekannte Anweisungen.</li> <li>Daher kann er auch als reiner Textersetzer f\u00fcr andere Zwecke verwendet werden.</li> <li>Beispielsweise wird er f\u00fcr die Kompilierung von Ressource-Dateien eingesetzt, um C-Headerdateien einzubetten und Werte zwischen C-Code und Ressource-Code zu teilen.</li> </ul> </li> <li> <p>Phasen:</p> <ul> <li>Der Pr\u00e4prozessor ist der erste Schritt im Kompilierungsprozess.</li> <li>Heutzutage werden die Pr\u00e4prozessor-Anweisungen von den Compilern f\u00fcr C++ und C in einem einzigen Arbeitsgang ber\u00fccksichtigt.</li> </ul> </li> </ol> <p>[!example]- Beispiel ```cpp fold:\"Pr\u00e4prozessor Include\"</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/2.%20Variablen/6.%20Pr%C3%A4prozessor/#include","title":"include  <p>int main(void) {     printf(\"Hello, world!\\n\");     return 0; } <pre><code>```cpp fold:\"Bedingte Ersetzung\"\n#ifdef WIN32\n    #include &lt;windows.h&gt;\n#else\n    #include &lt;unistd.h&gt;\n#endif\n</code></pre></p> <p>```cpp fold:\"Makros\"</p>","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/2.%20Variablen/6.%20Pr%C3%A4prozessor/#include_1","title":"include","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/2.%20Variablen/6.%20Pr%C3%A4prozessor/#include_2","title":"include  <p>#define MELDUNG(text) fprintf(stderr, \\     \"Datei [%s], Zeile %d: %s\\n\", \\     FILE, LINE, text) int main(void) {     MELDUNG(\"Kapitaler Fehler. Programmende.\");     return EXIT_FAILURE; } ```</p>","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/2.%20Variablen/7.%20Globale%20Variablen/","title":"7. Globale Variablen","text":"<p>Globale Variablen sind Variablen, die au\u00dferhalb aller Funktionen deklariert werden und somit im gesamten Programm nach ihrer Deklaration zug\u00e4nglich sind. Sie spielen eine zentrale Rolle in vielen C-Programmen, besonders in gr\u00f6\u00dferen, komplexeren Softwareprojekten. Hier erkl\u00e4re ich, wie globale Variablen funktionieren, welche Vor- und Nachteile sie haben, und in welchen Situationen ihre Nutzung angebracht sein k\u00f6nnte.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/2.%20Variablen/7.%20Globale%20Variablen/#deklaration-und-initialisierung","title":"Deklaration und Initialisierung","text":"<p>Eine globale Variable wird in der Regel am Anfang eines Programms, au\u00dferhalb jeder Funktion, deklariert. Dies kann am Anfang einer Quelldatei geschehen oder in einer Header-Datei, die von mehreren Quelldateien inkludiert wird.</p> <pre><code>##include &lt;stdio.h&gt;\n\nint globalVar = 100; // Globale Variable, initialisiert mit 100\n\nvoid display() {\n    printf(\"GlobalVar = %d\\n\", globalVar);\n}\n\nint main() {\n    display();\n    globalVar += 20;\n    printf(\"GlobalVar = %d\\n\", globalVar);\n    return 0;\n}\n</code></pre> <p>In diesem Beispiel ist <code>globalVar</code> eine globale Variable, die im gesamten Programm nach ihrer Deklaration zug\u00e4nglich ist.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/2.%20Variablen/7.%20Globale%20Variablen/#speicher-und-lebensdauer","title":"Speicher und Lebensdauer","text":"<p>Globale Variablen werden im Datensegment des Speichers abgelegt, das normalerweise in verschiedene Teile f\u00fcr initialisierte und nicht initialisierte Daten unterteilt ist. Ihre Lebensdauer erstreckt sich \u00fcber die gesamte Laufzeit des Programms.</p> <ul> <li>Initialisierte globale Variablen werden im Data Segment gespeichert.</li> <li>Nicht initialisierte globale Variablen (auch bekannt als \"BSS\" Segment) werden im BSS Segment gespeichert, einem Bereich f\u00fcr Variablen, die standardm\u00e4\u00dfig mit Null initialisiert werden.</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/2.%20Variablen/7.%20Globale%20Variablen/#sichtbarkeit-und-scope","title":"Sichtbarkeit und Scope","text":"<p>Der Scope einer globalen Variablen erstreckt sich \u00fcber alle Quelldateien des Programms, es sei denn, sie wird durch <code>static</code> eingeschr\u00e4nkt. Das Schl\u00fcsselwort <code>static</code> vor der Deklaration einer globalen Variablen beschr\u00e4nkt ihren Scope auf die Datei, in der sie deklariert wurde.</p> <pre><code>static int fileLocal = 50; // Globale Variable, sichtbar nur in dieser Datei\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/3.Strukturierte%20Programmierung/1.%20If-Anweisungen/","title":"1. If Anweisungen","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/3.Strukturierte%20Programmierung/1.%20If-Anweisungen/#grundlegendes-zu-if-bedingungen","title":"Grundlegendes zu If-Bedingungen","text":"<p>In C erm\u00f6glichen <code>if</code>-Bedingungen, dass bestimmte Teile des Codes nur dann ausgef\u00fchrt werden, wenn eine spezifische Bedingung wahr (<code>true</code>) ist. Sie sind ein grundlegender Bestandteil der Steuerflusskontrolle in vielen Programmiersprachen.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/3.Strukturierte%20Programmierung/1.%20If-Anweisungen/#syntax-der-if-bedingung","title":"Syntax der If-Bedingung","text":"<p>Die grundlegende Syntax einer <code>if</code>-Bedingung in C sieht wie folgt aus:</p> <pre><code>if (Bedingung) {\n    // Anweisungen, die ausgef\u00fchrt werden, wenn die Bedingung wahr ist\n}\n</code></pre> <ul> <li>Bedingung: Dies ist ein Ausdruck, der zu einem booleschen Wert (wahr oder falsch) ausgewertet wird. In C wird jeder Wert ungleich 0 als <code>true</code> interpretiert und 0 als <code>false</code>.</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/3.Strukturierte%20Programmierung/1.%20If-Anweisungen/#erweiterte-if-bedingungen","title":"Erweiterte If-Bedingungen","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/3.Strukturierte%20Programmierung/1.%20If-Anweisungen/#if-else","title":"If-Else","text":"<p>Man kann eine <code>if</code>-Bedingung erweitern, um alternative Anweisungen auszuf\u00fchren, falls die Bedingung falsch (<code>false</code>) ist. Dies wird durch Hinzuf\u00fcgen eines <code>else</code>-Blocks erreicht:</p> <pre><code>if (Bedingung) {\n    // Anweisungen, die ausgef\u00fchrt werden, wenn die Bedingung wahr ist\n} else {\n    // Anweisungen, die ausgef\u00fchrt werden, wenn die Bedingung falsch ist\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/3.Strukturierte%20Programmierung/1.%20If-Anweisungen/#if-else-if-else","title":"If-Else If-Else","text":"<pre><code>if (Bedingung) {\n    // Anweisungen, die ausgef\u00fchrt werden, wenn die Bedingung wahr ist\n} else {\n    // Anweisungen, die ausgef\u00fchrt werden, wenn die Bedingung falsch ist\n}\n</code></pre> <p>F\u00fcr komplexere Entscheidungsstrukturen kann man mehrere Bedingungen nacheinander pr\u00fcfen, indem man <code>else if</code> verwendet:</p> <pre><code>if (Bedingung1) {\n    // Wird ausgef\u00fchrt, wenn Bedingung1 wahr ist\n} else if (Bedingung2) {\n    // Wird ausgef\u00fchrt, wenn Bedingung1 falsch und Bedingung2 wahr ist\n} else {\n    // Wird ausgef\u00fchrt, wenn Bedingung1 und Bedingung2 falsch sind\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/3.Strukturierte%20Programmierung/1.%20If-Anweisungen/#bedingungen-formulieren","title":"Bedingungen formulieren","text":"<p>Bedingungen in <code>if</code>-Anweisungen bestehen oft aus Vergleichen, die mit relationalen Operatoren wie <code>&lt;</code> (kleiner als), <code>&lt;=</code> (kleiner oder gleich), <code>&gt;</code> (gr\u00f6\u00dfer als), <code>&gt;=</code> (gr\u00f6\u00dfer oder gleich), <code>==</code> (gleich), <code>!=</code> (ungleich) formuliert werden. Logische Operatoren wie <code>&amp;&amp;</code> (logisches UND), <code>||</code> (logisches ODER) und <code>!</code> (logisches NICHT) k\u00f6nnen verwendet werden, um komplexe Bedingungen zu bilden.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/3.Strukturierte%20Programmierung/1.%20If-Anweisungen/#beispiel","title":"Beispiel","text":"<p>Hier ist ein einfaches Beispiel f\u00fcr die Verwendung von <code>if</code>, <code>else if</code>, und <code>else</code> in C:</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    int zahl = 15;\n\n    if (zahl &gt; 20) {\n        printf(\"Die Zahl ist gr\u00f6\u00dfer als 20.\\n\");\n    } else if (zahl &gt; 10) {\n        printf(\"Die Zahl ist gr\u00f6\u00dfer als 10, aber kleiner oder gleich 20.\\n\");\n    } else {\n        printf(\"Die Zahl ist 10 oder kleiner.\\n\");\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/3.Strukturierte%20Programmierung/1.%20If-Anweisungen/#gute-praktiken","title":"Gute Praktiken","text":"<ul> <li>Klammern: Auch wenn der Block nur eine einzige Anweisung enth\u00e4lt, ist es oft eine gute Praxis, Klammern zu verwenden, um die Lesbarkeit zu verbessern und Fehler zu vermeiden, die bei sp\u00e4teren Erweiterungen des Codes auftreten k\u00f6nnen.</li> <li>Vergleich von Flie\u00dfkommazahlen: Direkte Vergleiche von Flie\u00dfkommazahlen k\u00f6nnen zu unerwarteten Ergebnissen f\u00fchren wegen der Ungenauigkeiten bei der Darstellung von Flie\u00dfkommazahlen im Speicher. Es ist oft besser, einen kleinen Toleranzwert zu verwenden.</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/3.Strukturierte%20Programmierung/2.%20Switch%20Case/","title":"2. Switch Case","text":"<p>Der <code>switch</code>-<code>case</code>-Anweisungskomplex in C ist eine Kontrollstruktur, die es erm\u00f6glicht, auf Basis des Wertes einer Variable verschiedene Codebl\u00f6cke auszuf\u00fchren. Sie bietet eine alternative Methode zu mehrfachen <code>if</code>-<code>else if</code>-Anweisungen(1. If-Anweisungen) und wird oft verwendet, um den Code \u00fcbersichtlicher und leichter verst\u00e4ndlich zu machen, besonders wenn viele Bedingungen gepr\u00fcft werden.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/3.Strukturierte%20Programmierung/2.%20Switch%20Case/#grundstruktur-von-switch-case","title":"Grundstruktur von <code>switch</code>-<code>case</code>","text":"<p>Die Syntax der <code>switch</code>-Anweisung ist wie folgt:</p> <pre><code>switch (ausdruck) {\n    case konstante1:\n        // Anweisungen f\u00fcr den Fall, dass ausdruck == konstante1\n        break;\n    case konstante2:\n        // Anweisungen f\u00fcr den Fall, dass ausdruck == konstante2\n        break;\n    default:\n        // Anweisungen, wenn keine anderen `case` zutreffen\n}\n</code></pre> <ul> <li>ausdruck: Dies ist typischerweise eine Variable oder ein Ausdruck, der zu einem Ganzzahltyp evaluiert (int, char etc.). Seit C99 k\u00f6nnen auch Aufz\u00e4hlungstypen verwendet werden.</li> <li>case: Dies kennzeichnet einen Block von Anweisungen, der ausgef\u00fchrt wird, wenn der <code>ausdruck</code> gleich dem nach <code>case</code> stehenden Wert ist.</li> <li>break: Ein <code>break</code> beendet die <code>switch</code>-Anweisung. Wenn <code>break</code> weggelassen wird, \"f\u00e4llt\" das Programm in den n\u00e4chsten <code>case</code>-Block (bekannt als \"fall-through\"), was manchmal n\u00fctzlich, aber oft fehleranf\u00e4llig ist.</li> <li>default: Dieser Block wird ausgef\u00fchrt, wenn keiner der <code>case</code>-Werte mit dem <code>ausdruck</code> \u00fcbereinstimmt. <code>default</code> ist optional, aber es wird empfohlen, ihn zu verwenden, um unerwartetes Verhalten zu handhaben.</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/3.Strukturierte%20Programmierung/2.%20Switch%20Case/#eigenschaften-und-verhalten","title":"Eigenschaften und Verhalten","text":"<ul> <li>Fall-through Verhalten: Wie bereits erw\u00e4hnt, wird ohne <code>break</code> der folgende <code>case</code>-Block ausgef\u00fchrt, auch wenn die Bedingung nicht zutrifft. Dies kann sowohl vorteilhaft als auch nachteilig sein, je nach Situation.</li> <li>Einzigartigkeit der Case-Werte: Jeder <code>case</code> innerhalb einer <code>switch</code>-Anweisung muss einen einzigartigen Wert haben. Es ist nicht m\u00f6glich, denselben Wert f\u00fcr zwei <code>case</code>-Anweisungen zu verwenden.</li> <li>Typenbeschr\u00e4nkungen: Der <code>ausdruck</code> und die Werte in den <code>case</code>-Anweisungen m\u00fcssen Ganzzahltypen sein, was bedeutet, dass Typen wie <code>float</code> oder <code>double</code> nicht direkt verwendet werden k\u00f6nnen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/3.Strukturierte%20Programmierung/2.%20Switch%20Case/#beispiel","title":"Beispiel","text":"<p>Hier ist ein einfaches Beispiel, das zeigt, wie <code>switch</code>-<code>case</code> verwendet wird:</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n    char grade = 'B';\n\n    switch (grade) {\n        case 'A':\n            printf(\"Ausgezeichnet!\\n\");\n            break;\n        case 'B':\n        case 'C':\n            printf(\"Gut gemacht\\n\");\n            break;\n        case 'D':\n            printf(\"Sie haben bestanden\\n\");\n            break;\n        case 'F':\n            printf(\"Besser n\u00e4chstes Mal\\n\");\n            break;\n        default:\n            printf(\"Ung\u00fcltiger Notenwert\\n\");\n    }\n\n    return 0;\n}\n</code></pre> <p>In diesem Beispiel wird der Buchstabe <code>grade</code> verwendet, um die Leistung eines Sch\u00fclers zu bewerten. Beachten Sie, dass die <code>case</code>-Anweisungen f\u00fcr 'B' und 'C' zusammengef\u00fchrt sind, was bedeutet, dass derselbe Code ausgef\u00fchrt wird, wenn <code>grade</code> 'B' oder 'C' ist, was das oben genannte Fall-through Verhalten zeigt.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/3.Strukturierte%20Programmierung/2.%20Switch%20Case/#anwendungsfalle","title":"Anwendungsf\u00e4lle","text":"<p><code>switch</code>-<code>case</code> wird h\u00e4ufig verwendet in Situationen, in denen eine Variable auf viele m\u00f6gliche Werte gepr\u00fcft werden muss, zum Beispiel bei der Verarbeitung von Benutzereingaben oder bei der Implementierung eines Zustandsautomaten in Embedded-Systemen. Es bietet eine klare und effiziente Methode, zwischen einer Reihe von Optionen zu w\u00e4hlen.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/3.Strukturierte%20Programmierung/3.%20Bitweise%20Operatoren/","title":"3. Bitweise Operatoren","text":"<p>In C gibt es sowohl logische als auch bitweise Operatoren, die in ihrer Funktion und Verwendung unterschiedlich sind. Die Operatoren <code>&amp;&amp;</code> und <code>||</code> sind logische Operatoren, w\u00e4hrend <code>&amp;</code> und <code>|</code> bitweise Operatoren sind. Hier erkl\u00e4ren wir detailliert die Unterschiede zwischen diesen Operatoren.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/3.Strukturierte%20Programmierung/3.%20Bitweise%20Operatoren/#logische-operatoren-und","title":"Logische Operatoren: <code>&amp;&amp;</code> und <code>||</code>","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/3.Strukturierte%20Programmierung/3.%20Bitweise%20Operatoren/#logisches-und","title":"Logisches UND (&amp;&amp;)","text":"<ul> <li>Operator: <code>&amp;&amp;</code></li> <li>Beschreibung: Der logische UND-Operator <code>&amp;&amp;</code> gibt <code>true</code> zur\u00fcck, wenn beide Operanden <code>true</code> sind. Andernfalls gibt er <code>false</code> zur\u00fcck.</li> <li>Kurzschlussverhalten: Wenn der erste Operand von <code>&amp;&amp;</code> <code>false</code> ist, wird der zweite Operand nicht mehr evaluiert, da das Ergebnis der gesamten Bedingung bereits als <code>false</code> feststeht, unabh\u00e4ngig vom Wert des zweiten Operanden.</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/3.Strukturierte%20Programmierung/3.%20Bitweise%20Operatoren/#logisches-oder","title":"Logisches ODER (||)","text":"<ul> <li>Operator: <code>||</code></li> <li>Beschreibung: Der logische ODER-Operator <code>||</code> gibt <code>true</code> zur\u00fcck, wenn mindestens einer der Operanden <code>true</code> ist. Er gibt nur dann <code>false</code> zur\u00fcck, wenn beide Operanden <code>false</code> sind.</li> <li>Kurzschlussverhalten: Wenn der erste Operand von <code>||</code> <code>true</code> ist, wird der zweite Operand nicht mehr evaluiert, da das Ergebnis der gesamten Bedingung bereits als <code>true</code> feststeht, unabh\u00e4ngig vom Wert des zweiten Operanden.</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/3.Strukturierte%20Programmierung/3.%20Bitweise%20Operatoren/#bitweise-operatoren-und","title":"Bitweise Operatoren: <code>&amp;</code> und <code>|</code>","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/3.Strukturierte%20Programmierung/3.%20Bitweise%20Operatoren/#bitweises-und","title":"Bitweises UND (&amp;)","text":"<ul> <li>Operator: <code>&amp;</code></li> <li>Beschreibung: Der bitweise UND-Operator <code>&amp;</code> wird verwendet, um die bitweise UND-Operation auf den Bin\u00e4rwerten zweier Operanden durchzuf\u00fchren. F\u00fcr jedes Bit in den Operanden gibt der Operator <code>1</code> zur\u00fcck, wenn beide entsprechenden Bits in den Operanden <code>1</code> sind, sonst gibt er <code>0</code> zur\u00fcck.</li> <li>Beispiel: <code>12 &amp; 5</code> ergibt <code>4</code> (in Bin\u00e4rform: <code>1100 &amp; 0101 = 0100</code>).</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/3.Strukturierte%20Programmierung/3.%20Bitweise%20Operatoren/#bitweises-oder","title":"Bitweises ODER (|)","text":"<ul> <li>Operator: <code>|</code></li> <li>Beschreibung: Der bitweise ODER-Operator <code>|</code> wird verwendet, um die bitweise ODER-Operation auf den Bin\u00e4rwerten zweier Operanden durchzuf\u00fchren. F\u00fcr jedes Bit in den Operanden gibt der Operator <code>1</code> zur\u00fcck, wenn mindestens eines der entsprechenden Bits in den Operanden <code>1</code> ist, sonst gibt er <code>0</code> zur\u00fcck.</li> <li>Beispiel: <code>12 | 5</code> ergibt <code>13</code> (in Bin\u00e4rform: <code>1100 | 0101 = 1101</code>).</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/3.Strukturierte%20Programmierung/3.%20Bitweise%20Operatoren/#unterschiede-und-verwendungszwecke","title":"Unterschiede und Verwendungszwecke","text":"<ul> <li> <p>Logische vs. Bitweise Operationen:</p> <ul> <li>Logische Operatoren (<code>&amp;&amp;</code>, <code>||</code>): Diese Operatoren werden typischerweise in Bedingungen verwendet, um logische Aussagen zu kombinieren. Sie sind auf boolesche Werte oder Bedingungen ausgerichtet, die zu <code>true</code> oder <code>false</code> ausgewertet werden.</li> <li>Bitweise Operatoren (<code>&amp;</code>, <code>|</code>): Diese Operatoren werden verwendet, wenn Operationen direkt auf den Bin\u00e4rwerten von Daten durchgef\u00fchrt werden sollen, wie z.B. bei Manipulationen von Flags, Maskierungen oder anderen operationen, die direkt auf Bit-Ebene arbeiten.</li> <li> <p>Kurzschlussverhalten:</p> </li> <li> <p>Die logischen Operatoren <code>&amp;&amp;</code> und <code>||</code> zeigen Kurzschlussverhalten, was bedeutet, dass die Auswertung gestoppt wird, sobald das Ergebnis der Bedingung feststeht. Dies kann n\u00fctzlich sein, um zu verhindern, dass eine Operation durchgef\u00fchrt wird, die m\u00f6glicherweise einen Fehler oder eine unerw\u00fcnschte Wirkung verursacht (z.B. Zugriff auf ein Null-Pointer-Element).</p> </li> <li>Bitweise Operatoren <code>&amp;</code> und <code>|</code> werten immer beide Operanden aus, was sie in Szenarien ungeeignet macht, in denen der zweite Operand potenziell problematisch ist, wenn der erste Operand einen bestimmten Zustand nicht erf\u00fcllt.</li> </ul> </li> </ul> <p>Diese Unterscheidungen sind wichtig, um effizienten und sicheren Code in C zu schreiben, insbesondere wenn es um die Steuerung des Programmflusses und die Manipulation von Daten auf niedriger Ebene geht.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/3.Strukturierte%20Programmierung/3.Strukturierte%20Programmierung/","title":"3.Strukturierte Programmierung","text":"<p>1. If-Anweisungen 2. Switch Case 3. Bitweise Operatoren</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/4.%20Operatoren/1.%20Ausdr%C3%BCcke/","title":"1. Ausdr\u00fccke","text":"<p>In der Programmiersprache C sind Ausdr\u00fccke (Expressions) Kombinationen von Operatoren, Konstanten, Variablen und Funktionsaufrufen, die nach ihrer Auswertung einen Wert liefern. Ausdr\u00fccke sind die grundlegenden Bausteine f\u00fcr die Durchf\u00fchrung von Berechnungen, die Datenmanipulation und die Entscheidungsfindung in Programmen.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/4.%20Operatoren/1.%20Ausdr%C3%BCcke/#typen-von-ausdrucken","title":"Typen von Ausdr\u00fccken","text":"<ol> <li>Arithmetische Ausdr\u00fccke: Nutzen mathematische Operatoren (zum Beispiel <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>) um Werte zu berechnen.</li> <li>Logische Ausdr\u00fccke: Geben Werte basierend auf Vergleichen (zum Beispiel <code>&amp;&amp;</code>, <code>||</code>, <code>!</code>) zur\u00fcck.</li> <li>Relationale Ausdr\u00fccke: Vergleichen Werte untereinander (zum Beispiel <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code>).</li> <li>Bitweise Ausdr\u00fccke: F\u00fchren bitweise Operationen (zum Beispiel <code>&amp;</code>, <code>|</code>, <code>^</code>, <code>~</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code>) aus.</li> <li>Zuweisungsausdr\u00fccke: Weisen Werte zu Variablen zu (zum Beispiel <code>=</code>, <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>).</li> <li>Funktionsaufruf-Ausdr\u00fccke: Rufen Funktionen auf, deren R\u00fcckgabewerte Teil eines gr\u00f6\u00dferen Ausdrucks sein k\u00f6nnen.</li> </ol>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/4.%20Operatoren/1.%20Ausdr%C3%BCcke/#eigenschaften-von-ausdrucken","title":"Eigenschaften von Ausdr\u00fccken","text":"<ul> <li>Typ: Jeder Ausdruck in C hat einen Typ, der durch die Typen seiner Operanden und den verwendeten Operator bestimmt wird.</li> <li>Wert: Jeder Ausdruck wird zu einem Wert evaluiert, der w\u00e4hrend der Ausf\u00fchrung des Programms verwendet werden kann.</li> <li>Nebeneffekte: Einige Ausdr\u00fccke k\u00f6nnen Nebeneffekte haben, wie die Zuweisung eines Wertes zu einer Variablen, die \u00c4nderung eines Zustands oder die Ausgabe einer Information.</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/4.%20Operatoren/1.%20Ausdr%C3%BCcke/#beispiel-fur-ausdrucke-in-c","title":"Beispiel f\u00fcr Ausdr\u00fccke in C","text":"<p>Hier ein einfaches C-Programm, das verschiedene Arten von Ausdr\u00fccken verwendet:</p> <pre><code>##include &lt;stdio.h&gt;\n\nint main() {\n    int a = 5, b = 3;\n    int result;\n\n    // Arithmetischer Ausdruck\n    result = a + b;\n    printf(\"Summe: %d\\n\", result);\n\n    // Relationaler Ausdruck\n    if (a &gt; b) {\n        printf(\"%d ist gr\u00f6\u00dfer als %d\\n\", a, b);\n    }\n\n    // Logischer Ausdruck\n    if (a &gt; 0 &amp;&amp; b &gt; 0) {\n        printf(\"Beide Zahlen sind positiv\\n\");\n    }\n\n    // Bitweiser Ausdruck\n    result = a &amp; b;  // Bitweise AND\n    printf(\"Bitweise AND: %d\\n\", result);\n\n    // Zuweisungsausdruck\n    result *= 2; // \u00c4quivalent zu result = result * 2\n    printf(\"Resultat nach Verdoppelung: %d\\n\", result);\n\n    return 0;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/4.%20Operatoren/1.%20Ausdr%C3%BCcke/#prioritat-und-assoziativitat-von-operatoren","title":"Priorit\u00e4t und Assoziativit\u00e4t von Operatoren","text":"<p>Die Auswertung von Ausdr\u00fccken h\u00e4ngt von der Priorit\u00e4t (3. Priorit\u00e4ten) und der Assoziativit\u00e4t der Operatoren ab. Operatoren mit h\u00f6herer Priorit\u00e4t werden zuerst ausgewertet. Bei Operatoren gleicher Priorit\u00e4t bestimmt die Assoziativit\u00e4t (links nach rechts oder rechts nach links), in welcher Reihenfolge sie ausgewertet werden.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/4.%20Operatoren/1.%20Ausdr%C3%BCcke/#ausdrucke-und-kontrollstrukturen","title":"Ausdr\u00fccke und Kontrollstrukturen","text":"<p>Ausdr\u00fccke sind integraler Bestandteil von Kontrollstrukturen in C. Sie bestimmen, ob eine <code>if</code>-Anweisung ausgef\u00fchrt wird, steuern die Iterationen in <code>for</code>- und <code>while</code>-Schleifen und sind entscheidend f\u00fcr die Auswertung von Bedingungen in <code>switch</code>-Anweisungen.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/4.%20Operatoren/2.%20Zuweisende%20Operatoren/","title":"2. Zuweisende Operatoren","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/4.%20Operatoren/2.%20Zuweisende%20Operatoren/#grundlegender-zuweisungsoperator","title":"Grundlegender Zuweisungsoperator","text":"<ul> <li><code>=</code>: Der einfache Zuweisungsoperator. Er weist den Wert auf seiner rechten Seite der Variablen auf seiner linken Seite zu.     <pre><code>int a = 5; // Weist der Variablen a den Wert 5 zu.\n</code></pre></li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/4.%20Operatoren/2.%20Zuweisende%20Operatoren/#kombinierte-zuweisungsoperatoren","title":"Kombinierte Zuweisungsoperatoren","text":"<p>Diese Operatoren kombinieren eine arithmetische oder bitweise Operation mit einer Zuweisung.</p> <ul> <li> <p><code>+=</code>: Addiert den rechten Operanden zum linken Operanden und speichert das Ergebnis im linken Operanden.     <pre><code>int a = 5; a += 3; // \u00c4quivalent zu a = a + 3;\n</code></pre></p> </li> <li> <p><code>*=</code>: Multipliziert den linken Operanden mit dem rechten Operanden und speichert das Ergebnis im linken Operanden.     <pre><code>int a = 5; a *= 3; // \u00c4quivalent zu a = a * 3;\n</code></pre></p> </li> <li> <p><code>/=</code>: Dividiert den linken Operanden durch den rechten Operanden und speichert das Ergebnis im linken Operanden.     <pre><code>int a = 15; a /= 3; // \u00c4quivalent zu a = a / 3;\n</code></pre></p> </li> <li> <p><code>%-=</code>: Wendet den Modulo-Operator auf die beiden Operanden an und speichert das Ergebnis im linken Operanden.     <pre><code>int a = 19; a %= 5; // \u00c4quivalent zu a = a % 5; Ergibt 4\n</code></pre></p> </li> <li> <p><code>-=</code>: Subtrahiert den rechten Operanden vom linken Operanden und speichert das Ergebnis im linken Operanden.</p> <pre><code>int a = 5; a -= 3; // \u00c4quivalent zu a = a - 3;\n</code></pre> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/4.%20Operatoren/2.%20Zuweisende%20Operatoren/#bitweise-zuweisungsoperatoren","title":"Bitweise Zuweisungsoperatoren","text":"<ul> <li> <p><code>&lt;&lt;=</code>: Schiebt den linken Operanden um die Anzahl der Stellen des rechten Operanden nach links und speichert das Ergebnis im linken Operanden.     <pre><code>int a = 5; // Bin\u00e4r: 101 a &lt;&lt;= 1; // Schiebt alle Bits um eine Position nach links, Ergebnis: 1010 bin\u00e4r, 10 dezimal\n</code></pre></p> </li> <li> <p><code>&gt;&gt;=</code>: Schiebt den linken Operanden um die Anzahl der Stellen des rechten Operanden nach rechts und speichert das Ergebnis im linken Operanden.</p> <pre><code>int a = 20; // Bin\u00e4r: 10100 a &gt;&gt;= 2; // Schiebt alle Bits um zwei Positionen nach rechts, Ergebnis: 101 bin\u00e4r, 5 dezimal\n</code></pre> </li> <li> <p><code>&amp;=</code>: Wendet die bitweise UND-Operation auf beide Operanden an und speichert das Ergebnis im linken Operanden.   <pre><code>int a = 12; // Bin\u00e4r: 1100 a &amp;= 5;  // Bin\u00e4r: 0101, Ergebnis: 0100 bin\u00e4r, 4 dezimal\n</code></pre></p> </li> <li> <p><code>|=</code>: Wendet die bitweise ODER-Operation auf beide Operanden an und speichert das Ergebnis im linken Operanden.</p> <pre><code>int a = 12; // Bin\u00e4r: 1100 a |= 3;  // Bin\u00e4r: 0011, Ergebnis: 1111 bin\u00e4r, 15 dezimal\n</code></pre> </li> <li> <p><code>^=</code>: Wendet die bitweise XOR-Operation auf beide Operanden an und speichert das Ergebnis im linken Operanden.     <pre><code>int a = 14; // Bin\u00e4r: 1110 a ^= 5;  // Bin\u00e4r: 0101, Ergebnis: 1011 bin\u00e4r, 11 dezimal\n</code></pre></p> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/4.%20Operatoren/2.%20Zuweisende%20Operatoren/#verwendung-von-zuweisungsoperatoren","title":"Verwendung von Zuweisungsoperatoren","text":"<p>Zuweisungsoperatoren sind besonders n\u00fctzlich, um Code zu verk\u00fcrzen und die Lesbarkeit zu verbessern. Sie eignen sich hervorragend f\u00fcr Schleifen und bedingte Anweisungen, wo wiederholt Operationen auf einer Variablen ausgef\u00fchrt werden. Durch die Verwendung der kombinierten Zuweisungsoperatoren kann man Fehler vermeiden, die entstehen k\u00f6nnten, wenn eine Variable mehrfach manuell manipuliert wird.</p> <p>Hier ein einfaches Beispiel, wie Zuweisungsoperatoren in einer Schleife verwendet werden k\u00f6nnen:</p> <pre><code>int sum = 0;\nfor (int i = 1; i &lt;= 10; i++)\n{\n    sum += i; // F\u00fcgt jeden Wert von i zur Summe hinzu \n} \nprintf(\"Summe: %d\\n\", sum);`\n</code></pre> <p>In diesem Beispiel sorgt der <code>+=</code> Operator f\u00fcr eine klare und kompakte Weise, die Summe der ersten zehn positiven Ganzzahlen zu berechnen.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/4.%20Operatoren/3.%20Priorit%C3%A4ten/","title":"3. Priorit\u00e4ten","text":"<p>Die Priorit\u00e4t der Operatoren in C bestimmt, in welcher Reihenfolge die Operatoren in Ausdr\u00fccken ohne Klammern ausgewertet werden. Die Operatoren mit der h\u00f6chsten Priorit\u00e4t werden zuerst ausgewertet. Hier ist eine Liste der Operatoren in C, sortiert von der h\u00f6chsten zur niedrigsten Priorit\u00e4t:</p> <ol> <li> <p>Klammern und Zugriffsoperatoren</p> <ul> <li><code>()</code> Funktionsaufruf</li> <li><code>[]</code> Array-Subskription</li> <li><code>.</code> Struktur/Tupel Mitglied Zugriff</li> <li><code>-&gt;</code> Struktur/Tupel Zeiger Zugriff</li> <li><code>++</code> Postfix Inkrement</li> <li><code>--</code> Postfix Dekrement</li> <li><code>sizeof</code> Gr\u00f6\u00dfe eines Datentyps</li> <li><code>_Alignof</code> Alignment eines Datentyps (seit C11)</li> <li> <p>Un\u00e4re Operatoren</p> </li> <li> <p><code>++</code> Pr\u00e4fix Inkrement</p> </li> <li><code>--</code> Pr\u00e4fix Dekrement</li> <li><code>+</code> Un\u00e4res Plus</li> <li><code>-</code> Un\u00e4res Minus</li> <li><code>!</code> Logische Negation</li> <li><code>~</code> Bitweise Negation</li> <li><code>*</code> Dereferenzierung</li> <li><code>&amp;</code> Adresse</li> <li><code>sizeof</code> Gr\u00f6\u00dfe eines Ausdrucks</li> <li><code>(type)</code> Typumwandlung (Casting)</li> <li> <p>Multiplikative Operatoren</p> </li> <li> <p><code>*</code> Multiplikation</p> </li> <li><code>/</code> Division</li> <li><code>%</code> Modulo</li> <li> <p>Additive Operatoren</p> </li> <li> <p><code>+</code> Addition</p> </li> <li><code>-</code> Subtraktion</li> <li> <p>Bitweise Shift-Operatoren</p> </li> <li> <p><code>&lt;&lt;</code> Links schieben</p> </li> <li><code>&gt;&gt;</code> Rechts schieben</li> <li> <p>Relationale Operatoren</p> </li> <li> <p><code>&lt;</code> Kleiner als</p> </li> <li><code>&gt;</code> Gr\u00f6\u00dfer als</li> <li><code>&lt;=</code> Kleiner oder gleich</li> <li><code>&gt;=</code> Gr\u00f6\u00dfer oder gleich</li> <li> <p>Gleichheitsoperatoren</p> </li> <li> <p><code>==</code> Gleich</p> </li> <li><code>!=</code> Ungleich</li> <li> <p>Bitweise AND</p> </li> <li> <p><code>&amp;</code></p> </li> <li> <p>Bitweise XOR</p> </li> <li> <p><code>^</code></p> </li> <li> <p>Bitweise OR</p> </li> <li> <p><code>|</code></p> </li> <li> <p>Logische AND</p> </li> <li> <p><code>&amp;&amp;</code></p> </li> <li> <p>Logische OR</p> </li> <li> <p><code>||</code></p> </li> <li> <p>Bedingter Operator (Tern\u00e4rer Operator)</p> </li> <li> <p><code>?:</code></p> </li> <li> <p>Zuweisungsoperatoren und Komma</p> </li> <li> <p><code>=</code> Zuweisung</p> </li> <li><code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code>, <code>&lt;&lt;=</code>, <code>&gt;&gt;=</code>, <code>&amp;=</code>, <code>^=</code>, <code>|=</code> Modifizierte Zuweisung</li> <li><code>,</code> Kommaoperator</li> </ul> </li> </ol>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/4.%20Operatoren/4.%20Operatoren/","title":"4. Operatoren","text":"<p>1. Ausdr\u00fccke 2. Zuweisende Operatoren 3. Priorit\u00e4ten</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/5.%20Arrays/1.%20Arrays/","title":"1. Arrays","text":"<p>2. Eindimensionale Arrays 3. Mehrdimensionale Arrays 4. String Arrays 5. malloc 6. relloc</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/5.%20Arrays/2.%20Eindimensionale%20Arrays/","title":"2. Eindimensionale Arrays","text":"<p>Eindimensionale Arrays in C sind eine grundlegende Datenstruktur, die eine feste Anzahl gleichartiger Elemente linear speichert. Sie sind besonders n\u00fctzlich, um eine Sammlung von Elementen gleichen Typs effizient zu verwalten und auf sie zuzugreifen. Hier erkl\u00e4re ich, wie eindimensionale Arrays deklariert, initialisiert und verwendet werden, sowie einige Details zur Speicherverwaltung und typischen Operationen.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/5.%20Arrays/2.%20Eindimensionale%20Arrays/#deklaration-eines-eindimensionalen-arrays","title":"Deklaration eines eindimensionalen Arrays","text":"<p>Ein Array in C wird wie folgt deklariert:</p> <pre><code>datatype arrayName[arraySize];\n</code></pre> <ul> <li>datatype: Der Datentyp jedes Elements im Array (z. B. <code>int</code>, <code>float</code>, <code>char</code> usw.).</li> <li>arrayName: Der Name des Arrays.</li> <li>arraySize: Die Anzahl der Elemente, die das Array speichern kann. Dies muss eine Konstante oder eine Konstanten-Ausdruck sein.</li> </ul> <p>Beispiel: <pre><code>int numbers[10];\n</code></pre></p> <p>Dieser Code deklariert ein Array namens <code>numbers</code>, das 10 <code>int</code>-Werte speichern kann.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/5.%20Arrays/2.%20Eindimensionale%20Arrays/#initialisierung-von-arrays","title":"Initialisierung von Arrays","text":"<p>Ein Array kann bei der Deklaration initialisiert werden, indem die Werte der Elemente in geschweiften Klammern <code>{}</code> angegeben werden:</p> <pre><code>int numbers[5] = {10, 20, 30, 40, 50};\n</code></pre> <p>Falls weniger Werte angegeben werden als das Array Elemente hat, werden die restlichen Elemente auf den Standardwert des Datentyps initialisiert (f\u00fcr grundlegende Datentypen meist <code>0</code>):</p> <pre><code>int numbers[5] = {10, 20}; // \u00c4quivalent zu {10, 20, 0, 0, 0}\n</code></pre> <p>Es ist auch m\u00f6glich, alle Elemente auf 0 zu setzen, indem das Array wie folgt initialisiert wird:</p> <pre><code>int numbers[5] = {0};\n</code></pre> <p>In C99 und sp\u00e4teren Standards kann man auch bestimmte Elemente durch ihre Indexposition initialisieren:</p> <pre><code>int array[10] = {[2] = 20, [5] = 50}; // Setzt array[2] auf 20 und array[5] auf 50, alle anderen auf 0\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/5.%20Arrays/2.%20Eindimensionale%20Arrays/#zugriff-auf-array-elemente","title":"Zugriff auf Array-Elemente","text":"<p>Auf die Elemente eines Arrays kann \u00fcber ihren Index zugegriffen werden, wobei die Indizierung bei 0 beginnt. Das bedeutet, dass das erste Element des Arrays <code>array[0]</code> ist und das letzte Element <code>array[arraySize - 1]</code>.</p> <p>Beispiel:</p> <pre><code>int numbers[5] = {10, 20, 30, 40, 50};\nint firstValue = numbers[0]; // 10\nint thirdValue = numbers[2]; // 30\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/5.%20Arrays/2.%20Eindimensionale%20Arrays/#wichtige-eigenschaften-und-operationen","title":"Wichtige Eigenschaften und Operationen","text":"<ul> <li>Array-Gr\u00f6\u00dfe: Einmal deklariert, kann die Gr\u00f6\u00dfe eines Arrays in C nicht ge\u00e4ndert werden. F\u00fcr dynamische Gr\u00f6\u00dfen muss man andere Datenstrukturen wie Linked Lists oder dynamische Arrays (mittels Pointern und Speicherverwaltungsfunktionen wie <code>malloc</code>(5. malloc) und <code>realloc</code>(6. relloc)) verwenden.</li> <li>Array als Pointer: In C wird der Name eines Arrays als Adresse des ersten Elements (d.h. als Pointer auf den Anfang des Arrays) behandelt. Dies erm\u00f6glicht den Einsatz von Pointer-Arithmetik(DHBW Heidenheim/2023 WiSe/Programmieren 1/C/Pointer/Pointer) zum Zugriff auf Elemente.</li> <li>\u00dcbergabe an Funktionen: Wenn Arrays an Funktionen \u00fcbergeben werden, wird tats\u00e4chlich nur ein Pointer auf das erste Element \u00fcbergeben. Funktionen, die Arrays als Parameter nehmen, m\u00fcssen daher oft auch die Gr\u00f6\u00dfe des Arrays als zus\u00e4tzlichen Parameter erhalten.</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/5.%20Arrays/2.%20Eindimensionale%20Arrays/#beispielprogramm-verwendung-eines-arrays","title":"Beispielprogramm: Verwendung eines Arrays","text":"<p>Hier ein einfaches Beispiel, das die Nutzung eines Arrays in einer Funktion demonstriert:</p> <pre><code>#include &lt;stdio.h&gt;\n\nvoid printArray(int arr[], int size) {\n    for (int i = 0; i &lt; size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int numbers[] = {10, 20, 30, 40, 50, 60};\n    int size = sizeof(numbers) / sizeof(numbers[0]);\n    printArray(numbers, size);\n    return 0;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/5.%20Arrays/3.%20Mehrdimensionale%20Arrays/","title":"3. Mehrdimensionale Arrays","text":"<p>Mehrdimensionale Arrays in C sind Arrays, die aus mehreren Dimensionen oder \"Schichten\" von Elementen bestehen. Sie erm\u00f6glichen die Speicherung von Daten in einer tabellenartigen Struktur, wobei die Elemente in Zeilen und Spalten organisiert sind. Die h\u00e4ufigste Form von mehrdimensionalen Arrays in C sind zweidimensionale Arrays (Matrizen), obwohl C auch Arrays mit mehr als zwei Dimensionen unterst\u00fctzt.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/5.%20Arrays/3.%20Mehrdimensionale%20Arrays/#deklaration-von-mehrdimensionalen-arrays","title":"Deklaration von Mehrdimensionalen Arrays","text":"<p>Die Syntax f\u00fcr die Deklaration eines mehrdimensionalen Arrays ist wie folgt:</p> <pre><code>datatype arrayName[rows][columns];\n</code></pre> <ul> <li>datatype: Der Datentyp jedes Elements im Array (z. B. <code>int</code>, <code>float</code>, <code>char</code> usw.).</li> <li>arrayName: Der Name des Arrays.</li> <li>rows: Die Anzahl der Zeilen im Array.</li> <li>columns: Die Anzahl der Spalten im Array.</li> </ul> <p>Beispiel f\u00fcr eine zweidimensionale Matrix mit 3 Zeilen und 4 Spalten:</p> <pre><code>int matrix[3][4];\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/5.%20Arrays/3.%20Mehrdimensionale%20Arrays/#initialisierung-von-mehrdimensionalen-arrays","title":"Initialisierung von Mehrdimensionalen Arrays","text":"<p>Mehrdimensionale Arrays k\u00f6nnen w\u00e4hrend der Deklaration oder nachtr\u00e4glich initialisiert werden. Die Initialisierung erfolgt durch Angabe von Werten in geschachtelten geschweiften Klammern:</p> <p><pre><code>int matrix[3][4] = {\n    {1, 2, 3, 4},\n    {5, 6, 7, 8},\n    {9, 10, 11, 12}\n};\n</code></pre> In diesem Beispiel wird eine 3x4-Matrix mit vordefinierten Werten initialisiert.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/5.%20Arrays/3.%20Mehrdimensionale%20Arrays/#zugriff-auf-elemente-von-mehrdimensionalen-arrays","title":"Zugriff auf Elemente von Mehrdimensionalen Arrays","text":"<p>Der Zugriff auf Elemente eines mehrdimensionalen Arrays erfolgt \u00fcber Indizes, wobei die Indizierung f\u00fcr jede Dimension separat angegeben wird. Die Indizierung beginnt in C bei 0.</p> <pre><code>int value = matrix[1][2]; // Zugriff auf das Element in der zweiten Zeile und dritten Spalte\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/5.%20Arrays/3.%20Mehrdimensionale%20Arrays/#beispiele-fur-mehrdimensionale-arrays","title":"Beispiele f\u00fcr Mehrdimensionale Arrays","text":"<p>Hier sind einige Beispiele f\u00fcr die Verwendung von mehrdimensionalen Arrays in C:</p> <pre><code>##include &lt;stdio.h&gt;\n\nint main() {\n    // Deklaration und Initialisierung einer 2x3-Matrix\n    int matrix[2][3] = {\n        {1, 2, 3},\n        {4, 5, 6}\n    };\n\n    // Zugriff auf Elemente der Matrix und Ausgabe\n    printf(\"Element in der zweiten Zeile und dritten Spalte: %d\\n\", matrix[1][2]);\n\n    // Deklaration einer 3x3-Matrix ohne Initialisierung\n    int squareMatrix[3][3];\n\n    // Initialisierung der Matrix durch Benutzereingabe\n    printf(\"Geben Sie die Elemente der 3x3-Matrix ein:\\n\");\n    for (int i = 0; i &lt; 3; i++) {\n        for (int j = 0; j &lt; 3; j++) {\n            scanf(\"%d\", &amp;squareMatrix[i][j]);\n        }\n    }\n\n    // Ausgabe der Matrix\n    printf(\"Die eingegebene Matrix ist:\\n\");\n    for (int i = 0; i &lt; 3; i++) {\n        for (int j = 0; j &lt; 3; j++) {\n            printf(\"%d \", squareMatrix[i][j]);\n        }\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/5.%20Arrays/3.%20Mehrdimensionale%20Arrays/#mehrdimensionale-arrays-als-parameter-von-funktionen","title":"Mehrdimensionale Arrays als Parameter von Funktionen","text":"<p>Mehrdimensionale Arrays k\u00f6nnen als Parameter von Funktionen \u00fcbergeben werden. Dabei muss die Anzahl der Spalten der Matrix explizit angegeben werden, da C die Gr\u00f6\u00dfe von mehrdimensionalen Arrays nur f\u00fcr die erste Dimension ableiten kann.</p> <pre><code>void printMatrix(int rows, int columns, int matrix[rows][columns]) {\n    for (int i = 0; i &lt; rows; i++) {\n        for (int j = 0; j &lt; columns; j++) {\n            printf(\"%d \", matrix[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\n\nint main() {\n    int matrix[2][3] = {\n        {1, 2, 3},\n        {4, 5, 6}\n    };\n\n    printMatrix(2, 3, matrix);\n    return 0;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/5.%20Arrays/4.%20String%20Arrays/","title":"4. String Arrays","text":"<p>In C gibt es keinen eingebauten Datentyp f\u00fcr Strings, wie es in vielen anderen Programmiersprachen der Fall ist. Stattdessen werden Strings in C als Arrays von Zeichen, also als <code>char</code>-Arrays, repr\u00e4sentiert. Ein String in C wird immer mit einem Nullzeichen (<code>'\\0'</code>) abgeschlossen, welches als String-Terminator dient. Dieses Nullzeichen ist essenziell, da es Funktionen, die mit Strings arbeiten, signalisiert, wo der String endet.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/5.%20Arrays/4.%20String%20Arrays/#deklaration-und-initialisierung-von-strings","title":"Deklaration und Initialisierung von Strings","text":"<p>Ein String kann in C auf verschiedene Arten deklariert und initialisiert werden:</p> <pre><code>char str1[6] = {'H', 'e', 'l', 'l', 'o', '\\0'};\nchar str2[] = \"Hello\";\nchar str3[6] = \"Hello\";\n</code></pre> <ul> <li><code>str1</code> zeigt die manuelle Zuweisung jedes Zeichens inklusive des Nullzeichens.</li> <li><code>str2</code> und <code>str3</code> sind Beispiele f\u00fcr die Initialisierung mit einem String-Literal. Bei <code>str2</code> wird die Gr\u00f6\u00dfe des Arrays automatisch auf die L\u00e4nge des Strings plus das Nullzeichen gesetzt. <code>str3</code> gibt die Gr\u00f6\u00dfe explizit an, die ausreichend sein muss, um alle Zeichen und das Nullzeichen zu speichern.</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/5.%20Arrays/4.%20String%20Arrays/#wichtige-operationen-und-funktionen","title":"Wichtige Operationen und Funktionen","text":"<p>In C gibt es mehrere Standardfunktionen, die in der Header-Datei <code>string.h</code> definiert sind und die Operationen mit Strings unterst\u00fctzen. Hier sind einige der wichtigsten:</p> <ul> <li> <p>strlen() - Gibt die L\u00e4nge des Strings zur\u00fcck, ohne das abschlie\u00dfende Nullzeichen zu z\u00e4hlen:</p> <pre><code>size_t len = strlen(str2);\n</code></pre> </li> <li> <p>strcpy() - Kopiert einen String in ein anderes Array: <pre><code>char dest[10];\nstrcpy(dest, str2);\n</code></pre></p> </li> <li> <p>strcat() - H\u00e4ngt einen String an das Ende eines anderen an:     <pre><code>char src[20] = \"World\";\nstrcat(str2, src);  // Ergebnis in str2 ist \"HelloWorld\"\n</code></pre></p> </li> <li> <p>strcmp() - Vergleicht zwei Strings und gibt 0 zur\u00fcck, wenn sie gleich sind. Ein R\u00fcckgabewert kleiner als 0 bedeutet, dass der erste String lexikografisch kleiner ist als der zweite, und ein Wert gr\u00f6\u00dfer als 0 das Gegenteil:      <pre><code>int result = strcmp(str1, str2);\n</code></pre></p> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/5.%20Arrays/4.%20String%20Arrays/#sicherheit-und-speicherbedenken","title":"Sicherheit und Speicherbedenken","text":"<p>Ein h\u00e4ufiges Problem in C-Programmen ist der \u00dcberlauf von Puffergrenzen bei der Verwendung von Strings. Um solche Sicherheitsl\u00fccken zu vermeiden, wurden sicherere Varianten einiger Standardfunktionen eingef\u00fchrt, wie z.B. <code>strncpy()</code> f\u00fcr <code>strcpy()</code> und <code>strncat()</code> f\u00fcr <code>strcat()</code>. Diese Funktionen nehmen zus\u00e4tzlich die maximale L\u00e4nge des Zielarrays auf, um \u00dcberl\u00e4ufe zu verhindern:</p> <pre><code>strncpy(dest, src, sizeof(dest) - 1);\ndest[sizeof(dest) - 1] = '\\0'; // Sicherstellen, dass das Ergebnis null-terminiert ist\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/5.%20Arrays/4.%20String%20Arrays/#beispiel","title":"Beispiel","text":"<p>Hier ist ein einfaches Beispiel f\u00fcr die Verwendung von Strings in C:</p> <pre><code>##include &lt;stdio.h&gt;\n##include &lt;string.h&gt;\n\nint main() {\n    char greeting[20] = \"Hello, \";\n    char name[10] = \"Alice\";\n    strcat(greeting, name);  // Verbindet name mit greeting\n    printf(\"Greeting: %s\\n\", greeting);  // Druckt \"Hello, Alice\"\n\n    if (strcmp(greeting, \"Hello, Alice\") == 0) {\n        printf(\"Strings are equal.\\n\");\n    }\n\n    return 0;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/1.%20Funktionen/","title":"1. Funktionen","text":"<p>2. Einf\u00fchrung in Funktionen 3. Deklaration und Definition von Funktionen 4. Parameter\u00fcbergabe 5. Adressen und Speicher 6. Pointer 7. Parameter\u00fcbergabe von Arrays 8. Scope und Lebensdauer 9. Rekursion</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/2.%20Einf%C3%BChrung%20in%20Funktionen/","title":"2. Einf\u00fchrung in Funktionen","text":"<p>In der Programmiersprache C sind Funktionen selbstst\u00e4ndige Bl\u00f6cke von Anweisungen, die zusammen eine spezifische Aufgabe ausf\u00fchren. Jede Funktion in C kann einen Wert zur\u00fcckgeben und Parameter annehmen, um flexibel unterschiedliche Operationen auszuf\u00fchren. Funktionen helfen dabei, Code wiederzuverwenden, die Programmstruktur zu verbessern, und die Lesbarkeit und Wartbarkeit des Codes zu erh\u00f6hen.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/2.%20Einf%C3%BChrung%20in%20Funktionen/#warum-sind-funktionen-notig","title":"Warum sind Funktionen n\u00f6tig?","text":"<ul> <li>Modularit\u00e4t: Funktionen erlauben es, gro\u00dfe Programme in kleinere, handhabbare Einheiten zu unterteilen.</li> <li>Wiederverwendbarkeit: Einmal definierte Funktionen k\u00f6nnen in verschiedenen Teilen eines Programms oder sogar in verschiedenen Programmen verwendet werden.</li> <li>Abstraktion: Funktionen erm\u00f6glichen es, Details einer Implementierung zu verbergen und stattdessen auf einer h\u00f6heren, abstrakteren Ebene zu operieren.</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/2.%20Einf%C3%BChrung%20in%20Funktionen/#definition-einer-funktion-weiterfuhrende-erklarg","title":"Definition einer Funktion( Weiterf\u00fchrende Erkl\u00e4rg)","text":"<p>Eine Funktion in C besteht aus einem R\u00fcckgabetyp, einem Funktionsnamen, einer Parameterliste (kann leer sein) und einem Funktionsk\u00f6rper, der die auszuf\u00fchrenden Anweisungen enth\u00e4lt.</p> <pre><code>R\u00fcckgabetyp Funktionsname(Parametertyp Parametername, ...) {\n    // Anweisungen\n    return R\u00fcckgabewert;  // Optional, abh\u00e4ngig vom R\u00fcckgabetyp\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/2.%20Einf%C3%BChrung%20in%20Funktionen/#beispiel-funktion-zur-addition-zweier-zahlen","title":"Beispiel: Funktion zur Addition zweier Zahlen","text":"<pre><code>##include &lt;stdio.h&gt;\n\nint addiere(int x, int y) {\n    int ergebnis = x + y;\n    return ergebnis;\n}\n\nint main() {\n    int summe = addiere(5, 3);\n    printf(\"Die Summe von 5 und 3 ist %d.\\n\", summe);\n    return 0;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/2.%20Einf%C3%BChrung%20in%20Funktionen/#sichtbarkeit-und-lebensdauer-von-funktionen","title":"Sichtbarkeit und Lebensdauer von Funktionen","text":"<ul> <li>Globale Funktionen: Standardm\u00e4\u00dfig sind alle in C definierten Funktionen global, was bedeutet, dass sie \u00fcberall im Code nach ihrer Deklaration aufgerufen werden k\u00f6nnen.</li> <li>Statische Funktionen: Durch Voranstellen des Schl\u00fcsselwortes <code>static</code> vor die Funktionsdefinition wird die Sichtbarkeit der Funktion auf die Datei beschr\u00e4nkt, in der sie definiert ist. Diese Funktionen sind au\u00dferhalb ihrer Datei nicht sichtbar und k\u00f6nnen somit nicht aufgerufen werden.</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/2.%20Einf%C3%BChrung%20in%20Funktionen/#beispiel-statische-funktion","title":"Beispiel: Statische Funktion","text":"<pre><code>##include &lt;stdio.h&gt;\n\nstatic int subtrahiere(int x, int y) {\n    return x - y;\n}\n\nint main() {\n    int differenz = subtrahiere(10, 6);\n    printf(\"Die Differenz von 10 und 6 ist %d.\\n\", differenz);\n    return 0;\n}\n</code></pre> <p>In diesem Beispiel kann <code>subtrahiere</code> nur innerhalb der Datei, in der sie definiert ist, aufgerufen werden.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/3.%20Deklaration%20und%20Definition%20von%20Funktionen/","title":"3. Deklaration und Definition von Funktionen","text":"<p>In C gibt es klare Unterschiede zwischen der Deklaration und der Definition von Funktionen. Beide Aspekte sind wichtig, um die korrekte Verwendung und Implementierung von Funktionen in einem Programm zu gew\u00e4hrleisten.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/3.%20Deklaration%20und%20Definition%20von%20Funktionen/#funktionendeklaration-prototyp","title":"Funktionendeklaration (Prototyp)","text":"<p>Eine Funktionendeklaration, auch als Prototyp bekannt, teilt dem Compiler mit, welche Art von Funktion sp\u00e4ter im Code verwendet wird. Sie spezifiziert den R\u00fcckgabetyp der Funktion, den Namen der Funktion und ihre Parameter (Typen und Anzahl), gibt jedoch keinen Funktionsk\u00f6rper an. Diese Deklaration ist wichtig, damit der Compiler wei\u00df, wie Aufrufe der Funktion zu behandeln sind, bevor sie tats\u00e4chlich im Code definiert wird.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/3.%20Deklaration%20und%20Definition%20von%20Funktionen/#syntax-der-deklaration","title":"Syntax der Deklaration","text":"<pre><code>R\u00fcckgabetyp Funktionsname(Parametertyp Parametername, ...);\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/3.%20Deklaration%20und%20Definition%20von%20Funktionen/#beispiel","title":"Beispiel","text":"<pre><code>##include &lt;stdio.h&gt;\n\nint addiere(int, int);  // Deklaration der Funktion\n\nint main() {\n    int summe = addiere(10, 20);\n    printf(\"Summe: %d\\n\", summe);\n    return 0;\n}\n\nint addiere(int a, int b) {  // Definition der Funktion\n    return a + b;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/3.%20Deklaration%20und%20Definition%20von%20Funktionen/#funktionsdefinition","title":"Funktionsdefinition","text":"<p>Die Funktionsdefinition ist der Teil, in dem der tats\u00e4chliche Code der Funktion geschrieben wird. Sie umfasst den R\u00fcckgabetyp, den Funktionsnamen, die Parameter und den Funktionsk\u00f6rper, der die auszuf\u00fchrenden Anweisungen enth\u00e4lt. Eine Funktionsdefinition in C erf\u00fcllt auch die Rolle der Deklaration, falls keine separate Deklaration vorliegt.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/3.%20Deklaration%20und%20Definition%20von%20Funktionen/#syntax-der-definition","title":"Syntax der Definition","text":"<pre><code>R\u00fcckgabetyp Funktionsname(Parametertyp Parametername, ...) {\n    // Anweisungen\n    return R\u00fcckgabewert;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/3.%20Deklaration%20und%20Definition%20von%20Funktionen/#warum-deklaration-und-definition-trennen","title":"Warum Deklaration und Definition trennen?","text":"<ol> <li> <p>Organisation: In gr\u00f6\u00dferen Projekten, wo Funktionen in verschiedenen Dateien verwendet werden, ist es n\u00fctzlich, die Deklarationen in einer Header-Datei (<code>.h</code>) zu haben, w\u00e4hrend die Definitionen in Quellcode-Dateien (<code>.c</code>) stehen. So k\u00f6nnen mehrere Programmdateien die gleichen Funktionen nutzen, ohne ihre Implementierung zu kennen.</p> </li> <li> <p>Vermeidung von Fehlern: Wenn eine Funktion in einer Quelldatei verwendet wird, bevor sie definiert ist, f\u00fchrt dies ohne Deklaration zu einem Kompilierungsfehler. Die Deklaration informiert den Compiler vorab \u00fcber die Existenz und die Signatur der Funktion.</p> </li> </ol>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/4.%20Parameter%C3%BCbergabe/","title":"4. Parameter\u00fcbergabe","text":"<p>In C gibt es zwei Hauptarten der Parameter\u00fcbergabe an Funktionen: Durch Wert (pass by value) und durch Referenz (pass by reference). Beide Methoden haben unterschiedliche Einsatzgebiete und Verhaltensweisen, die bei der Programmierung in C ber\u00fccksichtigt werden m\u00fcssen.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/4.%20Parameter%C3%BCbergabe/#parameterubergabe-durch-wert-pass-by-value","title":"Parameter\u00fcbergabe durch Wert (Pass by Value)","text":"<p>Bei der Parameter\u00fcbergabe durch Wert wird der Wert der Argumente, die beim Aufruf der Funktion verwendet werden, kopiert und an die entsprechenden Parameter in der Funktionsdefinition \u00fcbergeben. Dies bedeutet, dass die Funktion mit Kopien der Eingabewerte arbeitet und nicht mit den urspr\u00fcnglichen Variablen selbst.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/4.%20Parameter%C3%BCbergabe/#vorteile","title":"Vorteile","text":"<ul> <li>\u00c4nderungen an Parametern in der Funktion beeinflussen die urspr\u00fcnglichen Variablen au\u00dferhalb der Funktion nicht.</li> <li>Einfach zu verwenden und f\u00fchrt zu weniger Nebeneffekten.</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/4.%20Parameter%C3%BCbergabe/#nachteile","title":"Nachteile","text":"<ul> <li>Das Kopieren gro\u00dfer Datenstrukturen kann ineffizient sein.</li> <li>Nicht geeignet, wenn die Funktion die Werte der urspr\u00fcnglichen Variablen ver\u00e4ndern soll.</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/4.%20Parameter%C3%BCbergabe/#beispiel","title":"Beispiel","text":"<pre><code>##include &lt;stdio.h&gt;\n\nvoid addZehn(int num) {\n    num += 10;  // \u00c4ndert nur die lokale Kopie von num\n    printf(\"Wert in der Funktion: %d\\n\", num);\n}\n\nint main() {\n    int x = 5;\n    addZehn(x);\n    printf(\"Wert nach der Funktion: %d\\n\", x);  // Der Wert von x ist unver\u00e4ndert\n    return 0;\n}\n</code></pre> <p>In diesem Beispiel wird der Wert <code>x</code> an die Funktion <code>addZehn</code> \u00fcbergeben, und \u00c4nderungen in der Funktion haben keine Auswirkungen auf den urspr\u00fcnglichen Wert von <code>x</code>.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/4.%20Parameter%C3%BCbergabe/#parameterubergabe-durch-referenz-pass-by-reference","title":"Parameter\u00fcbergabe durch Referenz (Pass by Reference)","text":"<p>Bei der Parameter\u00fcbergabe durch Referenz wird nicht der Wert selbst, sondern die Adresse einer Variablen \u00fcbergeben. Dies erm\u00f6glicht es der Funktion, direkt auf den Speicherplatz der \u00fcbergebenen Variablen zuzugreifen und deren Wert zu \u00e4ndern.</p> <p>In C wird dies erreicht, indem man Pointer als Funktionsparameter verwendet.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/4.%20Parameter%C3%BCbergabe/#vorteile_1","title":"Vorteile","text":"<ul> <li>Erm\u00f6glicht es der Funktion, die Eingabewerte direkt zu \u00e4ndern.</li> <li>Effizienter f\u00fcr die \u00dcbertragung gro\u00dfer Datenstrukturen, da keine Kopie angefertigt werden muss.</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/4.%20Parameter%C3%BCbergabe/#nachteile_1","title":"Nachteile","text":"<ul> <li>Kann zu unerwarteten Nebeneffekten f\u00fchren, wenn die Funktion nicht korrekt implementiert ist.</li> <li>Die Verwendung von  Pointern kann den Code komplexer und fehleranf\u00e4lliger machen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/4.%20Parameter%C3%BCbergabe/#beispiel_1","title":"Beispiel","text":"<pre><code>##include &lt;stdio.h&gt;\n\nvoid addZehnByRef(int *numPtr) {\n    *numPtr += 10;  // \u00c4ndert den Wert der Variable, auf die numPtr zeigt\n    printf(\"Wert in der Funktion: %d\\n\", *numPtr);\n}\n\nint main() {\n    int x = 5;\n    addZehnByRef(&amp;x);\n    printf(\"Wert nach der Funktion: %d\\n\", x);  // Der Wert von x wurde ge\u00e4ndert\n    return 0;\n}\n</code></pre> <p>In diesem Beispiel wird die Adresse von <code>x</code> an die Funktion <code>addZehnByRef</code> \u00fcbergeben. \u00c4nderungen innerhalb der Funktion wirken sich daher auf den urspr\u00fcnglichen Wert von <code>x</code> aus.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/5.%20Adressen%20und%20Speicher/","title":"5. Adressen und Speicher","text":"<p>In C ist das Verst\u00e4ndnis der Speicherverwaltung und der Umgang mit Adressen zentral f\u00fcr effektives Programmieren, insbesondere wenn es um fortgeschrittene Themen wie Pointer, dynamische Speicherverwaltung und Datenstrukturen geht.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/5.%20Adressen%20und%20Speicher/#speicherstruktur-in-c","title":"Speicherstruktur in C","text":"<p>Der Speicher eines C-Programms ist typischerweise in mehrere Segmente unterteilt:</p> <ol> <li>Code-Segment: Enth\u00e4lt den ausf\u00fchrbaren Code des Programms.</li> <li>Daten-Segment: Unterdividiert in initialisierte und nicht initialisierte Datenbereiche (bzw. .data und .bss).</li> <li>Heap: Bereich f\u00fcr die dynamische Speicherallokation zur Laufzeit des Programms, verwaltet durch Funktionen wie <code>malloc()</code>, <code>calloc()</code>, <code>realloc()</code> und <code>free()</code>. (5. malloc,6. relloc)</li> <li>Stack: Bereich f\u00fcr lokale Variablen und Funktionsaufrufinformationen; erlaubt variable Speicherzuweisungen, die beim Verlassen der Funktion automatisch freigegeben werden.</li> </ol>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/5.%20Adressen%20und%20Speicher/#adressen-und-pointer-6-pointer6-pointer","title":"Adressen und Pointer ([[6. Pointer|6. Pointer]])","text":"<p>In C wird eine Adresse als Speicherort einer Variablen oder eines Objekts im Speicher betrachtet. Ein Pointer ist eine Variable, deren Wert die Adresse einer anderen Variablen ist. Pointer sind m\u00e4chtige Werkzeuge, da sie direkten Zugriff auf den Speicher erm\u00f6glichen und mit ihnen dynamische Datenstrukturen sowie komplexe Speicherverwaltungsaufgaben realisiert werden k\u00f6nnen.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/5.%20Adressen%20und%20Speicher/#deklaration-eines-pointers","title":"Deklaration eines Pointers","text":"<pre><code>int *ptr;  // Pointer auf eine Integer-Variable\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/5.%20Adressen%20und%20Speicher/#beispiel-zur-verwendung-von-pointern","title":"Beispiel zur Verwendung von Pointern","text":"<pre><code>##include &lt;stdio.h&gt;\n\nint main() {\n    int var = 10;\n    int *ptr;\n\n    ptr = &amp;var;  // Der Pointer ptr speichert die Adresse von var\n\n    printf(\"Wert von var: %d\\n\", var);           // Ausgabe des Wertes von var\n    printf(\"Adresse von var: %p\\n\", &amp;var);       // Ausgabe der Adresse von var\n    printf(\"Wert an der Adresse ptr: %d\\n\", *ptr); // Dereferenzierung von ptr zeigt auf den Wert von var\n    printf(\"Adresse in ptr gespeichert: %p\\n\", ptr); // Ausgabe der in ptr gespeicherten Adresse\n\n    return 0;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/5.%20Adressen%20und%20Speicher/#dynamische-speicherverwaltung","title":"Dynamische Speicherverwaltung","text":"<p>In C kann Speicher dynamisch vom Heap angefordert werden, was bedeutet, dass Speicher w\u00e4hrend der Laufzeit des Programms nach Bedarf reserviert und freigegeben wird. Die Standardbibliothek bietet hierf\u00fcr die Funktionen <code>malloc()</code>, <code>calloc()</code>, <code>realloc()</code> und <code>free()</code>. (5. malloc,6. relloc)</p> <ul> <li>malloc(): Reserviert eine bestimmte Menge an Speicher. (5. malloc)</li> <li>calloc(): Reserviert Speicher \u00e4hnlich wie <code>malloc()</code>, initialisiert aber den Speicher auf Null.</li> <li>realloc(): \u00c4ndert die Gr\u00f6\u00dfe eines bereits reservierten Speicherblocks. (6. relloc)</li> <li>free(): Gibt einen reservierten Speicherblock frei.</li> </ul> <p>Beispiel f\u00fcr dynamische Speicherverwaltung:</p> <pre><code>##include &lt;stdio.h&gt;\n##include &lt;stdlib.h&gt;\n\nint main() {\n    int *arr;\n    int n = 5;  // Gr\u00f6\u00dfe des Arrays\n\n    arr = (int*) malloc(n * sizeof(int));  // Speicher f\u00fcr ein Array von 5 Integers\n\n    if (arr == NULL) {\n        fprintf(stderr, \"Speicherzuweisung fehlgeschlagen\\n\");\n        return 1;\n    }\n\n    for (int i = 0; i &lt; n; i++) {\n        arr[i] = i * i;\n    }\n\n    for (int i = 0; i &lt; n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n\n    free(arr);  // Freigabe des Speichers\n    return 0;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/6.%20Pointer/","title":"6. Pointer","text":"<p>Pointer sind eine der grundlegendsten und m\u00e4chtigsten Funktionen in C. Sie erm\u00f6glichen direkten Zugang zum Speicher und erh\u00f6hen die Flexibilit\u00e4t und Effizienz des Programms, machen aber auch das Verst\u00e4ndnis und die Handhabung komplexer.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/6.%20Pointer/#grundkonzept","title":"Grundkonzept","text":"<p>Ein Pointer in C ist eine Variable, deren Wert die Adresse einer anderen Variablen im Speicher ist. Mit einem Pointer k\u00f6nnen Sie auf den Wert der Variablen, auf die er zeigt, zugreifen oder diesen ver\u00e4ndern.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/6.%20Pointer/#deklaration-eines-pointers","title":"Deklaration eines Pointers","text":"<p>Die Deklaration eines Pointers erfordert Angabe des Typs der Variablen, auf die er zeigt, gefolgt von einem Sternchen (<code>*</code>). Hier ein Beispiel:</p> <pre><code>int *pointerZuInt;\nfloat *pointerZuFloat;\nchar *pointerZuChar;\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/6.%20Pointer/#initialisierung-von-pointern","title":"Initialisierung von Pointern","text":"<p>Ein Pointer sollte immer initialisiert werden, bevor er verwendet wird. Ein nicht initialisierter Pointer (ein sogenannter \"wilder Pointer\") kann zuf\u00e4llige Speicheradressen enthalten, was zu undefiniertem Verhalten f\u00fchrt.</p> <pre><code>int var = 29;\nint *ptr = &amp;var;  // Pointer wird mit der Adresse von var initialisiert\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/6.%20Pointer/#zugriff-auf-den-wert-eines-pointers-dereferenzierung","title":"Zugriff auf den Wert eines Pointers (Dereferenzierung)","text":"<p>Durch das Dereferenzieren eines Pointers erhalten Sie den Wert der Variablen, auf die er zeigt. Dies wird durch Voranstellen eines Sternchens (<code>*</code>) vor den Pointer-Namen erreicht:</p> <pre><code>int value = *ptr;  // value erh\u00e4lt den Wert von var durch Dereferenzierung von ptr\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/6.%20Pointer/#pointer-arithmetik","title":"Pointer-Arithmetik","text":"<p>Pointer unterst\u00fctzen spezielle Arten von Arithmetik, was besonders n\u00fctzlich bei der Arbeit mit Arrays ist. Zum Beispiel:</p> <ul> <li>Pointer Inkrementierung (<code>ptr++</code>): Verschiebt den Pointer zum n\u00e4chsten Element des Datentyps, auf den er zeigt.</li> <li>Pointer Dekrementierung (<code>ptr--</code>): Verschiebt den Pointer zum vorherigen Element des Datentyps, auf den er zeigt.</li> <li>Pointer Addition/Subtraktion (<code>ptr + n</code>, <code>ptr - n</code>): Verschiebt den Pointer um <code>n</code> Elemente vorw\u00e4rts oder r\u00fcckw\u00e4rts.</li> </ul> <pre><code>int arr[5] = {10, 20, 30, 40, 50};\nint *ptr = arr;\n\nprintf(\"%d\\n\", *ptr);      // 10\nprintf(\"%d\\n\", *(ptr+1));  // 20, bewegt sich zum n\u00e4chsten int im Array\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/6.%20Pointer/#pointer-und-arrays","title":"Pointer und Arrays","text":"<p>In C sind Arrays und Pointer eng miteinander verbunden. Der Name eines Arrays ist im Grunde ein konstanter Pointer auf das erste Element des Arrays.</p> <pre><code>int arr[3] = {10, 20, 30};\nint *ptr = arr; // \u00c4quivalent zu int *ptr = &amp;arr[0];\n\nfor(int i = 0; i &lt; 3; i++) {\n    printf(\"%d\\n\", *(ptr + i));  // Zugriff auf die Elemente des Arrays \nc\n\n`int var = 123; int *ptr = &amp;var; int **ptrToPtr = &amp;ptr;  printf(\"%d\\n\", **ptrToPtr);  // Zugriff auf var durch einen Pointer auf einen Pointer`mittels Pointer-Arithmetik\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/6.%20Pointer/#pointer-auf-pointer","title":"Pointer auf Pointer","text":"<p>Ein Pointer kann auch die Adresse eines anderen Pointers halten, was als \"Pointer auf Pointer\" bekannt ist. Diese Technik wird oft verwendet, um dynamische Datenstrukturen wie mehrdimensionale Arrays zu verwalten.</p> <pre><code>int var = 123;\nint *ptr = &amp;var;\nint **ptrToPtr = &amp;ptr;\n\nprintf(\"%d\\n\", **ptrToPtr);  // Zugriff auf var durch einen Pointer auf einen Pointer\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/7.%20Parameter%C3%BCbergabe%20von%20Arrays/","title":"7. Parameter\u00fcbergabe von Arrays","text":"<p>In C k\u00f6nnen Arrays nicht direkt als Wert \u00fcbergeben werden. Stattdessen wird bei der \u00dcbergabe eines Arrays an eine Funktion lediglich die Adresse des ersten Elements des Arrays \u00fcbergeben. Dies bedeutet praktisch, dass Funktionen, die Array-Parameter erhalten, mit Pointern arbeiten. Hier sehen wir uns an, wie man sowohl eindimensionale als auch zweidimensionale Arrays an Funktionen \u00fcbergibt.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/7.%20Parameter%C3%BCbergabe%20von%20Arrays/#ubergabe-eindimensionaler-arrays","title":"\u00dcbergabe  eindimensionaler Arrays","text":"<p>Da der Name eines Arrays als [[6. Pointer|6. Pointer]] auf das erste Element fungiert, ist die \u00dcbergabe eines eindimensionalen Arrays an eine Funktion relativ einfach. Hier ist ein Beispiel:</p> <pre><code>##include &lt;stdio.h&gt;\n\nvoid printArray(int *arr, int size) {\n    for (int i = 0; i &lt; size; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    int myArray[] = {1, 2, 3, 4, 5};\n    int n = sizeof(myArray) / sizeof(myArray[0]);\n    printArray(myArray, n);\n    return 0;\n}\n</code></pre> <p>In diesem Beispiel \u00fcbergibt <code>printArray</code> einfach den [[6. Pointer|6. Pointer]] zum ersten Element des Arrays sowie die Gr\u00f6\u00dfe des Arrays. Beachten Sie, dass wir keinen eindimensionalen Arraytyp wie <code>int arr[]</code> als Funktionsparameter verwenden, da C keine Informationen \u00fcber die Gr\u00f6\u00dfe des Arrays \u00fcbergeben w\u00fcrde, weshalb wir die Gr\u00f6\u00dfe separat \u00fcbergeben m\u00fcssen.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/7.%20Parameter%C3%BCbergabe%20von%20Arrays/#ubergabe-zweidimensionaler-arrays","title":"\u00dcbergabe zweidimensionaler Arrays","text":"<p>Zweidimensionale Arrays in C k\u00f6nnen auf verschiedene Arten an Funktionen \u00fcbergeben werden. Eine g\u00e4ngige Methode ist die explizite Angabe der Gr\u00f6\u00dfe der zweiten Dimension im Funktionsparameter. Hier ist ein Beispiel, wie man ein zweidimensionales Array \u00fcbergibt:</p> <pre><code>##include &lt;stdio.h&gt;\n\nvoid print2DArray(int arr[][3], int rows, int cols) {\n    for (int i = 0; i &lt; rows; i++) {\n        for (int j = 0; j &lt; cols; j++) {\n            printf(\"%d \", arr[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\n\nint main() {\n    int my2DArray[2][3] = {{1, 2, 3}, {4, 5, 6}};\n    print2DArray(my2DArray, 2, 3);\n    return 0;\n}\n</code></pre> <p>In <code>print2DArray</code> ist <code>arr[][3]</code> der Funktionsparameter, der besagt, dass jeder \"innere\" Array (d.h., jede Zeile des zweidimensionalen Arrays) 3 Elemente hat. Die Funktion erwartet also, dass die Gr\u00f6\u00dfe der inneren Dimension (Spalten) 3 ist. Die Gr\u00f6\u00dfe der \u00e4u\u00dferen Dimension (Zeilen) wird durch <code>rows</code> bestimmt.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/7.%20Parameter%C3%BCbergabe%20von%20Arrays/#dynamische-zweidimensionale-arrays","title":"Dynamische zweidimensionale Arrays","text":"<p>Bei dynamischen zweidimensionalen Arrays, wo die Gr\u00f6\u00dfe zur Laufzeit bestimmt wird, k\u00f6nnen Sie [[6. Pointer|6. Pointer]] auf [[6. Pointer|6. Pointer]] oder einen [[6. Pointer|6. Pointer]] auf einen einzelnen Array verwenden, der als zweidimensionaler Array interpretiert wird. Hier ist ein Beispiel mit einem [[6. Pointer|6. Pointer]] auf [[6. Pointer|6. Pointer]]:</p> <pre><code>##include &lt;stdio.h&gt;\n##include &lt;stdlib.h&gt;\n\nvoid print2DArray(int **arr, int rows, int cols) {\n    for (int i = 0; i &lt; rows; i++) {\n        for (int j = 0; j &lt; cols; j++) {\n            printf(\"%d \", arr[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\n\nint main() {\n    int rows = 2, cols = 3;\n    int **my2DArray = (int **)malloc(rows * sizeof(int *));\n    for (int i = 0; i &lt; rows; i++) {\n        my2DArray[i] = (int *)malloc(cols * sizeof(int));\n        for (int j = 0; j &lt; cols; j++) {\n            my2DArray[i][j] = i * cols + j + 1;\n        }\n    }\n\n    print2DArray(my2DArray, rows, cols);\n\n    // Speicherfreigabe\n    for (int i = 0; i &lt; rows; i++) {\n        free(my2DArray[i]);\n    }\n    free(my2DArray);\n    return 0;\n}\n</code></pre> <p>In diesem Beispiel wird <code>malloc</code>(5. malloc) verwendet, um Speicher dynamisch zu allokieren. Die Funktion <code>print2DArray</code> nimmt einen [[6. Pointer|6. Pointer]] auf einen [[6. Pointer|6. Pointer]] als Parameter, was die Verwendung von dynamischen zweidimensionalen Arrays erm\u00f6glicht.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/8.%20Scope%20und%20Lebensdauer/","title":"8. Scope und Lebensdauer","text":"<p>Der Scope und die Lebensdauer von [[2. Variablen|2. Variablen]] in C sind wichtige Konzepte, die bestimmen, wo eine [[2. Variablen|2. Variablen]] zug\u00e4nglich ist (ihr Scope) und wie lange eine [[2. Variablen|2. Variablen]] existiert (ihre Lebensdauer). Diese Konzepte gelten f\u00fcr alle Arten von Namen, einschlie\u00dflich Variablen und Funktionen. Hier sehen wir uns die Details dazu an.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/8.%20Scope%20und%20Lebensdauer/#1-scope-von-namen","title":"1. Scope von Namen","text":"<p>Scope bezieht sich auf den Teil des Programms, in dem ein bestimmter Name (zum Beispiel einer [[2. Variablen|2. Variablen]] oder einer Funktion) bekannt und zug\u00e4nglich ist. Es gibt haupts\u00e4chlich zwei Arten von Scopes in C:</p> <ul> <li>Lokaler Scope: Eine [[2. Variablen|2. Variablen]] mit lokalem Scope ist nur innerhalb der Funktion oder des Blocks (<code>{}</code>) sichtbar, in dem sie deklariert wurde. Solche [[2. Variablen|2. Variablen]] werden deklariert, wenn ihre Deklaration erreicht wird, und sind bis zum Ende des Blocks, in dem sie deklariert sind, g\u00fcltig.</li> <li>Globaler Scope: [[2. Variablen|2. Variablen]], die au\u00dferhalb aller Funktionen deklariert sind, haben globalen Scope. Sie sind im gesamten Programm von jedem Punkt nach ihrer Deklaration aus zug\u00e4nglich.</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/8.%20Scope%20und%20Lebensdauer/#2-lebensdauer-von-lokalen-variablen","title":"2. Lebensdauer von lokalen Variablen","text":"<p>Die Lebensdauer einer lokalen Variablen ist auf den Block beschr\u00e4nkt, in dem sie deklariert wird. Wenn der Block verlassen wird, wird der Speicher der Variablen freigegeben, und die Variable existiert nicht mehr. Hier ein Beispiel:</p> <pre><code>void function() {\n    int local = 5; // lokale Variable\n    printf(\"%d\", local); // Zug\u00e4nglich innerhalb dieser Funktion\n}\n// Au\u00dferhalb der Funktion ist `local` nicht mehr zug\u00e4nglich oder existent.\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/8.%20Scope%20und%20Lebensdauer/#automatische-vs-statische-lokale-variablen","title":"Automatische vs. statische lokale Variablen","text":"<ul> <li>Automatische Variablen (Standard f\u00fcr lokale Variablen) haben eine Lebensdauer, die sich auf den Ausf\u00fchrungsblock beschr\u00e4nkt, in dem sie deklariert sind.</li> <li>Statische lokale Variablen behalten ihren Wert zwischen Funktionsaufrufen bei. Ihre Initialisierung erfolgt nur einmal, und sie existieren bis zum Ende des Programms, obwohl ihr Scope weiterhin auf den Block beschr\u00e4nkt bleibt, in dem sie deklariert sind.</li> </ul> <pre><code>void counterFunction() {\n    static int counter = 0; // Initialisierung erfolgt nur einmal\n    counter++;\n    printf(\"%d \", counter); // Beh\u00e4lt seinen Wert zwischen den Aufrufen\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/8.%20Scope%20und%20Lebensdauer/#3-scope-und-lebensdauer-von-globalen-variablen","title":"3. Scope und Lebensdauer von globalen Variablen","text":"<p>Globale Variablen sind \u00fcberall im Programm nach ihrer Deklaration zug\u00e4nglich. Ihre Lebensdauer erstreckt sich \u00fcber die gesamte Laufzeit des Programms. Sie werden typischerweise vor dem Beginn der <code>main()</code>-Funktion initialisiert und bleiben bis zum Programmende bestehen.</p> <pre><code>int globalVar = 10; // Globale Variable\n\nvoid demoFunction() {\n    printf(\"%d\", globalVar); // Zug\u00e4nglich innerhalb dieser Funktion\n}\n\nint main() {\n    demoFunction();\n    printf(\"%d\", globalVar); // Auch hier zug\u00e4nglich\n    return 0;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/8.%20Scope%20und%20Lebensdauer/#4-scope-und-lebensdauer-von-funktionen","title":"4. Scope und Lebensdauer von Funktionen","text":"<p>Funktionen in C haben einen globalen Scope, wenn sie au\u00dferhalb aller Bl\u00f6cke deklariert werden. Sie sind von jedem Punkt des Programms aus aufrufbar, der nach ihrer Deklaration liegt. Ihre Lebensdauer ist analog zu ihrer G\u00fcltigkeitsdauer, die f\u00fcr die Dauer des Programmlaufs besteht.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/9.%20Rekursion/","title":"9. Rekursion","text":"<p>Rekursion ist ein m\u00e4chtiges Konzept in der Programmierung, bei dem eine Funktion sich selbst aufruft, um ein Problem zu l\u00f6sen. Dieser Ansatz wird h\u00e4ufig verwendet, um Probleme zu l\u00f6sen, die nat\u00fcrlich rekursiv sind, wie beispielsweise das Durchlaufen von Baumstrukturen, das Sortieren von Daten oder das Berechnen mathematischer Reihen.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/9.%20Rekursion/#grundprinzipien-der-rekursionrekursivitat","title":"Grundprinzipien der Rekursion(Rekursivit\u00e4t)","text":"<p>Eine rekursive Funktion besteht typischerweise aus zwei Hauptteilen:</p> <ol> <li>Basisfall (auch als Abbruchbedingung bezeichnet): Der Basisfall definiert, wann die Rekursion endet und verhindert, dass die Funktion unendlich oft aufgerufen wird.</li> <li>Rekursiver Fall: Hier ruft sich die Funktion selbst mit einem neuen Satz von Argumenten auf, die das Problem schrittweise reduzieren.</li> </ol>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/6.%20Funktionen/9.%20Rekursion/#beispiel-faktorielle-berechnung","title":"Beispiel: Faktorielle Berechnung","text":"<p>Ein klassisches Beispiel f\u00fcr Rekursion ist die Berechnung der Faktoriellen einer Zahl. Die Faktorielle einer nicht-negativen ganzen Zahl <code>n</code> ist das Produkt aller positiven ganzen Zahlen kleiner oder gleich <code>n</code> und wird als <code>n!</code> dargestellt.</p> <p>Hier ist ein C-Programm, das rekursiv die Faktorielle einer Zahl berechnet:</p> <pre><code>##include &lt;stdio.h&gt;\n\n// Rekursive Funktion zur Berechnung der Faktoriellen\nint factorial(int n) {\n    if (n == 0)  // Basisfall\n        return 1;\n    else         // Rekursiver Fall\n        return n * factorial(n - 1);\n}\n\nint main() {\n    int num = 5;\n    printf(\"Factorial of %d is %d\\n\", num, factorial(num));\n    return 0;\n}\n</code></pre> <p>In diesem Beispiel:</p> <ul> <li>Basisfall: Wenn <code>n</code> gleich 0 ist, gibt die Funktion <code>1</code> zur\u00fcck, da <code>0!</code> per Definition <code>1</code> ist.</li> <li>Rekursiver Fall: Die Funktion ruft sich selbst mit <code>n - 1</code> auf.</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/7.%20Operationen/1.%20Operationen/","title":"1. Operationen","text":"<p>2. Char Operations 3. Math Operations</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/7.%20Operationen/2.%20Char%20Operations/","title":"2. Char Operations","text":"<p>Die C-Bibliothek <code>ctype.h</code> enth\u00e4lt eine Reihe von Funktionen, die es erm\u00f6glichen, bestimmte Eigenschaften von Zeichen zu \u00fcberpr\u00fcfen oder Zeichen zu manipulieren. Diese Funktionen sind besonders n\u00fctzlich, wenn es darum geht, Zeichenketten zu analysieren oder zu bearbeiten, wie z.B. beim Parsen von Text oder bei der Validierung von Benutzereingaben. Jede dieser Funktionen nimmt als Parameter ein <code>int</code>, das normalerweise ein <code>unsigned char</code> ist, das automatisch in ein <code>int</code> konvertiert wird, oder <code>EOF</code>.</p> <p>Hier ist eine \u00dcbersicht \u00fcber die wichtigsten Funktionen in <code>ctype.h</code>:</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/7.%20Operationen/2.%20Char%20Operations/#zeichenprufung","title":"Zeichenpr\u00fcfung","text":"<ul> <li> <p>isalpha(int c)     Pr\u00fcft, ob das \u00fcbergebene Zeichen ein Alphabetzeichen (a-z oder A-Z) ist.</p> </li> <li> <p>isdigit(int c)     Pr\u00fcft, ob das \u00fcbergebene Zeichen eine Ziffer (0-9) ist.</p> </li> <li> <p>isalnum(int c)     Pr\u00fcft, ob das \u00fcbergebene Zeichen alphanumerisch ist, d.h., es ist entweder ein Buchstabe oder eine Ziffer.</p> </li> <li> <p>isspace(int c)     Pr\u00fcft, ob das \u00fcbergebene Zeichen ein Leerzeichen ist. Dazu geh\u00f6ren: Leerzeichen, Tabulator (<code>\\t</code>), neue Zeile (<code>\\n</code>), vertikaler Tabulator (<code>\\v</code>), Seitenvorschub (<code>\\f</code>) und Wagenr\u00fccklauf (<code>\\r</code>).</p> </li> <li> <p>isupper(int c)     Pr\u00fcft, ob das \u00fcbergebene Zeichen ein Gro\u00dfbuchstabe (A-Z) ist.</p> </li> <li> <p>islower(int c)     Pr\u00fcft, ob das \u00fcbergebene Zeichen ein Kleinbuchstabe (a-z) ist.</p> </li> <li> <p>iscntrl(int c)     Pr\u00fcft, ob das \u00fcbergebene Zeichen ein Steuerzeichen ist (Zeichen, die keinem sichtbaren Symbol entsprechen).</p> </li> <li> <p>ispunct(int c)     Pr\u00fcft, ob das \u00fcbergebene Zeichen ein Satzzeichen ist, das kein Leerzeichen, alphanumerisches Zeichen oder Steuerzeichen ist.</p> </li> <li> <p>isxdigit(int c)     Pr\u00fcft, ob das \u00fcbergebene Zeichen eine hexadezimale Ziffer ist (0-9, a-f, A-F).</p> </li> <li> <p>isgraph(int c)     Pr\u00fcft, ob das \u00fcbergebene Zeichen ein druckbares Zeichen ist, au\u00dfer einem Leerzeichen.</p> </li> <li> <p>isprint(int c)     Pr\u00fcft, ob das \u00fcbergebene Zeichen ein druckbares Zeichen ist, einschlie\u00dflich des Leerzeichens.</p> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/7.%20Operationen/2.%20Char%20Operations/#zeichenkonvertierung","title":"Zeichenkonvertierung","text":"<ul> <li> <p>toupper(int c)     Wandelt ein Kleinbuchstaben-Zeichen in den entsprechenden Gro\u00dfbuchstaben um, falls m\u00f6glich. Wenn das Zeichen kein Kleinbuchstabe ist, wird das Zeichen unver\u00e4ndert zur\u00fcckgegeben.</p> </li> <li> <p>tolower(int c)     Wandelt ein Gro\u00dfbuchstaben-Zeichen in den entsprechenden Kleinbuchstaben um, falls m\u00f6glich. Wenn das Zeichen kein Gro\u00dfbuchstabe ist, wird das Zeichen unver\u00e4ndert zur\u00fcckgegeben.</p> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/7.%20Operationen/2.%20Char%20Operations/#beispiel","title":"Beispiel","text":"<p>Hier ist ein einfaches Beispiel, das zeigt, wie einige dieser Funktionen verwendet werden k\u00f6nnen:</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;ctype.h&gt;\n\nint main() {\n    char str[] = \"Hello, World! 1234\";\n    int alpha = 0, digit = 0, punct = 0;\n\n    for (int i = 0; str[i] != '\\0'; i++) {\n        if (isalpha(str[i])) alpha++;\n        if (isdigit(str[i])) digit++;\n        if (ispunct(str[i])) punct++;\n    }\n\n    printf(\"Alphabetic characters: %d\\n\", alpha);\n    printf(\"Digits: %d\\n\", digit);\n    printf(\"Punctuation characters: %d\\n\", punct);\n\n    return 0;\n}\n</code></pre> <p>Dieses Programm z\u00e4hlt die Anzahl der alphabetischen Zeichen, Ziffern und Satzzeichen in der Zeichenkette <code>str</code>.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/7.%20Operationen/3.%20Math%20Operations/","title":"3. Math Operations","text":"<p>Die <code>math.h</code> Header-Datei in C ist Teil der C Standardbibliothek und bietet eine Sammlung von mathematischen Funktionen zur Bearbeitung verschiedener numerischer Operationen.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/7.%20Operationen/3.%20Math%20Operations/#1-ceil","title":"1. ceil()","text":"<p>Rundet die \u00fcbergebene Flie\u00dfkommazahl auf die n\u00e4chste ganze Zahl auf.</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;math.h&gt;\n\nint main() {\n    double num = 3.7;\n    printf(\"ceil(%.1f) = %.1f\\n\", num, ceil(num));\n    return 0;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/7.%20Operationen/3.%20Math%20Operations/#2-floor","title":"2. floor()","text":"<p>Rundet die \u00fcbergebene Flie\u00dfkommazahl auf die n\u00e4chste ganze Zahl ab.</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;math.h&gt;\n\nint main() {\n    double num = 3.7;\n    printf(\"floor(%.1f) = %.1f\\n\", num, floor(num));\n    return 0;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/7.%20Operationen/3.%20Math%20Operations/#3-fabs","title":"3. fabs()","text":"<p>Berechnet den absoluten Wert einer Flie\u00dfkommazahl.</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;math.h&gt;\n\nint main() {\n    double num = -3.7;\n    printf(\"fabs(%.1f) = %.1f\\n\", num, fabs(num));\n    return 0;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/7.%20Operationen/3.%20Math%20Operations/#4-fmod","title":"4. fmod()","text":"<p>Berechnet den Rest der Division zweier Flie\u00dfkommazahlen.</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;math.h&gt;\n\nint main() {\n    double num1 = 5.3, num2 = 2.0;\n    printf(\"fmod(%.1f, %.1f) = %.1f\\n\", num1, num2, fmod(num1, num2));\n    return 0;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/7.%20Operationen/3.%20Math%20Operations/#5-pow","title":"5. pow()","text":"<p>Berechnet eine Zahl potenziert mit einer anderen.</p> <pre><code>```c\n#include &lt;stdio.h&gt;\n#include &lt;math.h&gt;\n\nint main() {\n    double base = 2.0, exp = 3.0;\n    printf(\"pow(%.1f, %.1f) = %.1f\\n\", base, exp, pow(base, exp));\n    return 0;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/7.%20Operationen/3.%20Math%20Operations/#6-sqrt","title":"6. sqrt()","text":"<p>Berechnet die Quadratwurzel einer Zahl.</p> <pre><code>```c\n#include &lt;stdio.h&gt;\n#include &lt;math.h&gt;\n\nint main() {\n    double num = 9.0;\n    printf(\"sqrt(%.1f) = %.1f\\n\", num, sqrt(num));\n    return 0;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/7.%20Operationen/3.%20Math%20Operations/#7-exp","title":"7. exp()","text":"<p>Berechnet den nat\u00fcrlichen Exponentialwert einer Zahl (e hoch x).</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;math.h&gt;\n\nint main() {\n    double num = 1.0;\n    printf(\"exp(%.1f) = %.1f\\n\", num, exp(num));\n    return 0;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/7.%20Operationen/3.%20Math%20Operations/#8-log","title":"8. log()","text":"<p>Berechnet den nat\u00fcrlichen Logarithmus einer Zahl.</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;math.h&gt;\n\nint main() {\n    double num = 2.718282;\n    printf(\"log(%.6f) = %.6f\\n\", num, log(num));\n    return 0;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/7.%20Operationen/3.%20Math%20Operations/#9-log10","title":"9. log10()","text":"<p>Berechnet den dekadischen Logarithmus einer Zahl.</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;math.h&gt;\n\nint main() {\n    double num = 100.0;\n    printf(\"log10(%.1f) = %.1f\\n\", num, log10(num));\n    return 0;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/7.%20Operationen/3.%20Math%20Operations/#10-sin","title":"10. sin()","text":"<p>Berechnet den Sinus eines Winkels (in Radiant).</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;math.h&gt;\n\nint main() {\n    double angle = M_PI / 2; // 90 Grad\n    printf(\"sin(%.1f) = %.1f\\n\", angle, sin(angle));\n    return 0;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/7.%20Operationen/3.%20Math%20Operations/#11-cos","title":"11. cos()","text":"<p>Berechnet den Kosinus eines Winkels (in Radiant).</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;math.h&gt;\n\nint main() {\n    double angle = 0; // 0 Grad\n    printf(\"cos(%.1f) = %.1f\\n\", angle, cos(angle));\n    return 0;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/7.%20Operationen/3.%20Math%20Operations/#12-tan","title":"12. tan()","text":"<p>Berechnet den Tangens eines Winkels (in Radiant).</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;math.h&gt;\n\nint main() {\n    double angle = M_PI / 4; // 45 Grad\n    printf(\"tan(%.1f) = %.1f\\n\", angle, tan(angle));\n    return 0;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/7.%20Operationen/3.%20Math%20Operations/#13-asin","title":"13. asin()","text":"<p>Berechnet den Arcussinus einer Zahl (Ergebnis in Radiant).</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;math.h&gt;\n\nint main() {\n    double num = 1.0;\n    printf(\"asin(%.1f) = %.1f\\n\", num, asin(num));\n    return 0;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/7.%20Operationen/3.%20Math%20Operations/#14-acos","title":"14. acos()","text":"<p>Berechnet den Arcuscosinus einer Zahl (Ergebnis in Radiant).</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;math.h&gt;\n\nint main() {\n    double num = 1.0;\n    printf(\"acos(%.1f) = %.1f\\n\", num, acos(num));\n    return 0;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/7.%20Operationen/3.%20Math%20Operations/#15-atan","title":"15. atan()","text":"<p>Berechnet den Arcustangens einer Zahl (Ergebnis in Radiant).</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;math.h&gt;\n\nint main() {\n    double num = 1.0;\n    printf(\"atan(%.1f) = %.1f\\n\", num, atan(num));\n    return 0;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/7.%20Operationen/3.%20Math%20Operations/#16-atan2","title":"16. atan2()","text":"<p>Berechnet den Arcustangens des Quotienten zweier Zahlen (y/x) und bestimmt den korrekten Quadranten (Ergebnis in Radiant).</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;math.h&gt;\n\nint main() {\n    double y = 10.0, x = 10.0;\n    printf(\"atan2(%.1f, %.1f) = %.1f\\n\", y, x, atan2(y, x));\n    return 0;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/7.%20Operationen/3.%20Math%20Operations/#17-cosh","title":"17. cosh()","text":"<p>Berechnet den hyperbolischen Kosinus einer Zahl.</p> <pre><code>#include &lt;stdio.h&gt;\nimport math.h\n\nint main() {\n    double angle = 1.0;\n    printf(\"cosh(%.1f) = %.1f\\n\", angle, cosh(angle));\n    return 0;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/7.%20Operationen/3.%20Math%20Operations/#18-sinh","title":"18. sinh()","text":"<p>Berechnet den hyperbolischen Sinus einer Zahl.</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;math.h&gt;\n\nint main() {\n    double angle = 1.0;\n    printf(\"sinh(%.1f) = %.1f\\n\", angle, sinh(angle));\n    return 0;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/7.%20Operationen/3.%20Math%20Operations/#19-tanh","title":"19. tanh()","text":"<p>Berechnet den hyperbolischen Tangens einer Zahl.</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;math.h&gt;\n\nint main() {\n    double angle = 1.0;\n    printf(\"tanh(%.1f) = %.1f\\n\", angle, tanh(angle));\n    return 0;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/7.%20Operationen/3.%20Math%20Operations/#20-hypot","title":"20. hypot()","text":"<p>Berechnet die Hypotenuse eines rechtwinkligen Dreiecks aus seinen Katheten.</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;math.h&gt;\n\nint main() {\n    double x = 3.0, y = 4.0;\n    printf(\"hypot(%.1f, %.1f) = %.1f\\n\", x, y, hypot(x, y));\n    return 0;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/7.%20Operationen/3.%20Math%20Operations/#21-cbrt","title":"21. cbrt()","text":"<p>Berechnet die Kubikwurzel einer Zahl.</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;math.h&gt;\n\nint main() {\n    double num = 27.0;\n    printf(\"cbrt(%.1f) = %.1f\\n\", num, cbrt(num));\n    return 0;\n}\n</code></pre> <p>Diese Funktionen sind wesentlich f\u00fcr wissenschaftliche Berechnungen, f\u00fcr Anwendungen, die pr\u00e4zise numerische Methoden ben\u00f6tigen, und f\u00fcr die allgemeine Bearbeitung und Analyse von Daten in C.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/8.%20Strukturen/1.%20Strukturen/","title":"1. Strukturen","text":"<p>2. Was sind Strukturen</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/8.%20Strukturen/2.%20Was%20sind%20Strukturen/","title":"2. Was sind Strukturen","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/8.%20Strukturen/2.%20Was%20sind%20Strukturen/#grundlegende-definition","title":"Grundlegende Definition","text":"<p>Eine Struktur in C wird mit dem Schl\u00fcsselwort <code>struct</code> definiert. Innerhalb der geschweiften Klammern werden die verschiedenen \"Felder\" oder \"Member\" der Struktur aufgef\u00fchrt, wobei jedes Feld seinen eigenen Datentyp hat. Hier ist ein einfaches Beispiel f\u00fcr die Definition einer Struktur:</p> <pre><code>struct Person {\n    char name[100];\n    int alter;\n    float gewicht;\n};\n</code></pre> <p>In diesem Beispiel definiert <code>struct Person</code> eine Struktur mit drei Feldern: <code>name</code> (ein Array von Charakteren), <code>alter</code> (ein Integer) und <code>gewicht</code> (ein Float).</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/8.%20Strukturen/2.%20Was%20sind%20Strukturen/#erstellung-von-strukturvariablen","title":"Erstellung von Strukturvariablen","text":"<p>Nachdem eine Struktur definiert wurde, k\u00f6nnen Sie Variablen dieses Typs erstellen, \u00e4hnlich wie Sie Variablen anderer Datentypen erstellen w\u00fcrden:</p> <pre><code>struct Person person1;\nstruct Person person2;\n</code></pre> <p>Hier werden zwei Variablen <code>person1</code> und <code>person2</code> vom Typ <code>struct Person</code> erstellt.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/8.%20Strukturen/2.%20Was%20sind%20Strukturen/#zugriff-auf-strukturmember","title":"Zugriff auf Strukturmember","text":"<p>Um auf die Member einer Struktur zuzugreifen, verwenden Sie den Punktoperator <code>.</code>, wie im folgenden Beispiel gezeigt:</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main() {\n    struct Person person1;\n\n    // Zugriff auf Strukturmember, um Werte zuzuweisen\n    strcpy(person1.name, \"Max Mustermann\");\n    person1.alter = 30;\n    person1.gewicht = 72.5;\n\n    // Zugriff auf Strukturmember, um Werte zu lesen\n    printf(\"Name: %s\\n\", person1.name);\n    printf(\"Alter: %d\\n\", person1.alter);\n    printf(\"Gewicht: %.1f kg\\n\", person1.gewicht);\n\n    return 0;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/8.%20Strukturen/2.%20Was%20sind%20Strukturen/#wichtige-aspekte-von-strukturen","title":"Wichtige Aspekte von Strukturen","text":"<ul> <li>Flexibilit\u00e4t: Strukturen k\u00f6nnen jede Art von Datentyp als Member haben, einschlie\u00dflich anderer Strukturen oder sogar Zeiger auf dieselbe Struktur.</li> <li>Speicherzuweisung: Standardm\u00e4\u00dfig wird der Speicherplatz f\u00fcr Strukturmember sequenziell im Speicher angeordnet.</li> <li>\u00dcbergabe an Funktionen: Strukturen k\u00f6nnen an Funktionen durchgegeben werden. Sie k\u00f6nnen entweder als Kopie (was mehr Speicher beansprucht) oder als Zeiger \u00fcbergeben werden, um Speicher zu sparen und die Effizienz zu erh\u00f6hen.</li> <li>Strukturen und Zeiger: Man kann auch Zeiger auf Strukturen haben und mittels des Pfeiloperators <code>-&gt;</code> auf die Member zugreifen. Dies ist besonders n\u00fctzlich in dynamischen Datenstrukturen wie verketteten Listen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Programmieren%201/C/8.%20Strukturen/2.%20Was%20sind%20Strukturen/#beispiel-mit-zeigern-auf-strukturen","title":"Beispiel mit Zeigern auf Strukturen","text":"<p>Hier ein Beispiel, wie man mit Zeigern auf Strukturen arbeitet:</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main() {\n    struct Person person1;\n    struct Person *ptr = &amp;person1;\n\n    // Setzen der Strukturmember \u00fcber einen Zeiger\n    strcpy(ptr-&gt;name, \"Max Mustermann\");\n    ptr-&gt;alter = 30;\n    ptr-&gt;gewicht = 72.5;\n\n    // Ausgabe der Strukturmember \u00fcber einen Zeiger\n    printf(\"Name: %s\\n\", ptr-&gt;name);\n    printf(\"Alter: %d\\n\", ptr-&gt;alter);\n    printf(\"Gewicht: %.1f kg\\n\", ptr-&gt;gewicht);\n\n    return 0;\n}\n</code></pre> <p>Strukturen sind ein grundlegendes und sehr m\u00e4chtiges Feature in C, das die Basis f\u00fcr komplexere Datenstrukturen und objektorientierte Programmierans\u00e4tze in anderen Sprachen bildet.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Python/Programmieraufgaben/","title":"Programmieraufgaben","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Python/Programmieraufgaben/#aufgabe-1-schaltjahr-prufen","title":"\ud83d\ude80 Aufgabe 1: Schaltjahr pr\u00fcfen","text":"<p>Schreiben Sie ein Programm, das eine Benutzereingabe einliest und pr\u00fcft, ob es sich um ein Schaltjahr handelt.</p> <p>Ein Jahr ist ein Schaltjahr, wenn es den folgenden Bedingungen entspricht:</p> <ul> <li>Teilbarkeit durch 4: Ein Jahr muss durch 4 teilbar sein, um ein Schaltjahr zu sein.</li> <li>Ausnahme: Teilbarkeit durch 100: Wenn ein Jahr durch 100 teilbar ist, ist es kein Schaltjahr, es sei denn, es erf\u00fcllt auch die n\u00e4chste Bedingung.</li> <li>Teilbarkeit durch 400: Wenn ein Jahr durch 400 teilbar ist, ist es trotz der Teilbarkeit durch 100 ein Schaltjahr.</li> </ul> <p>[!example]- Beispiel  2000 und 2020 sind Schaltjahre. 1900 und 2022 sind keine Schaltjahre.</p> <p>[!tipp]- Tipp: Der Modulo-Operator <code>%</code> berechnet den Rest der Division zwischen zwei Zahlen. Ist der Rest 0, so ist der Dividend durch den Divisor restlos teilbar.</p> <pre><code>inputNumber = 2024\ninputInt = int(inputNumber)\nif inputInt % 100 == 0 and inputInt % 400 != 0:\n    print(\"Kein Schaltjahr\")\nelif inputInt % 400 == 0:\n    print(\"Ist ein Schaltjahr\")\nelif inputInt %4 == 0:   \n    print(\"Ist ein Schaltjahr\")\nelse:\n    print(\"Kein Schaltjahr\")\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Python/Programmieraufgaben/#aufgabe-2-summe-der-geraden-zahlen","title":"\ud83e\uddee Aufgabe 2: Summe der geraden Zahlen","text":"<p>Schreiben Sie ein Programm, das alle geraden Zahlen bis zur Zahl 100 aufsummiert.</p> <pre><code>count = 0\nfor x in range(1, 101, 1):\n    if x % 2 == 0:\n        count += x\n\nprint(count)\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Python/Programmieraufgaben/#aufgabe-3-vokale-zahlen","title":"\ud83d\udd24 Aufgabe 3: Vokale z\u00e4hlen","text":"<p>Schreiben Sie eine Funktion <code>countVowel</code>, die alle Vokale in einem String z\u00e4hlt und geben Sie die Anzahl zur\u00fcck.</p> <pre><code>stringDing = \"Ich maaaaaaag eeeeeuch oooooder uuUUuuuns\"\nvocals = [\"a\", \"e\", \"i\", \"o\", \"u\"]\nfor vocal in vocals:\n    lowerCase = stringDing.count(vocal)\n    upperCase = stringDing.count(vocal.upper())\n    print(lowerCase + upperCase)\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Python/Programmieraufgaben/#aufgabe-4-einfacher-taschenrechner","title":"\ud83e\uddee Aufgabe 4: Einfacher Taschenrechner","text":"<p>Entwickeln Sie einen einfachen Taschenrechner, der zwei Zahlen vom Benutzer sowie eine der vier Grundrechenarten (Addition, Subtraktion, Multiplikation, Division) einliest, die Rechnung durchf\u00fchrt und das Ergebnis ausgibt.</p> <pre><code>numberOne = 5\nnumerTwo = 5\ncalcualtor = \"+\"\n\nnumberOne = int(numberOne)\nnumerTwo = int(numerTwo)\n\nif calcualtor == \"+\":\n    print(numberOne + numerTwo)\nelif calcualtor == \"-\":\n    print(numberOne - numerTwo)\nelif calcualtor == \"*\":\n    print(numberOne * numerTwo)\nelif calcualtor == \"/\":\n    print(numberOne / numerTwo)\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Python/Programmieraufgaben/#aufgabe-5-temperaturumrechner","title":"\ud83c\udf21\ufe0f Aufgabe 5: Temperaturumrechner","text":"<p>Schreiben Sie ein Programm, das die Temperatur von Celsius in Fahrenheit oder umgekehrt umrechnet. Der Benutzer sollte die Option haben, die Eingabeart (Celsius oder Fahrenheit) und die Temperatur einzugeben.</p> <p>[!Formeln]- Formeln - \u00b0C = (\u00b0F - 32) * 5/9 (von Fahrenheit in Celsius) -  \u00b0F = \u00b0C * 1,8 + 32 (von Celsius nach Fahrenheit)</p> <pre><code>def celsius_to_fahrenheit(celsius):\n    return celsius * 1.8 + 32 \n\ndef fahrenheit_to_celsius(fahrenheit):\n    return (fahrenheit - 32) * 5/9\n\nprint(\"Willkommen zum Temperaturumrechner!\")\nprint(\"Geben Sie 1 ein, um von Celsius in Fahrenheit umzurechnen.\")\nprint(\"Geben Sie 2 ein, um von Fahrenheit in Celsius umzurechnen.\")\n\nchoice = \"1\"\n\nif choice == '1':\n    celsius = float(30)\n    fahrenheit = celsius_to_fahrenheit(celsius)\n    print(f\"{celsius}\u00b0C entsprechen {fahrenheit}\u00b0F.\")\nelif choice == '2':\n    fahrenheit = float(150)\n    celsius = fahrenheit_to_celsius(fahrenheit)\n    print(f\"{fahrenheit}\u00b0F entsprechen {celsius}\u00b0C.\")\nelse:\n    print(\"Ung\u00fcltige Eingabe. Bitte geben Sie 1 oder 2 ein.\")\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Python/Programmieraufgaben/#aufgabe-6-palindrom-prufen","title":"\ud83d\udd04 Aufgabe 6: Palindrom pr\u00fcfen","text":"<p>Schreiben Sie eine Funktion, die pr\u00fcft, ob ein String ein Palindrom ist. Ein Palindrom ist ein Text, der vorw\u00e4rts und r\u00fcckw\u00e4rts gelesen dasselbe ergibt. Wenden Sie diese Funktion auf die Liste <code>words</code> an.</p> <pre><code>def is_palindrome(s):\n    # Entfernt Leerzeichen und macht den String kleinbuchstabig f\u00fcr eine genaue \u00dcberpr\u00fcfung\n    cleaned_string = ''.join(filter(str.isalnum, s)).lower()\n    # Pr\u00fcft, ob der bereinigte String ein Palindrom ist\n    return cleaned_string == cleaned_string[::-1]\n\n# Beispiel-Liste von W\u00f6rtern\nwords = [\"Level\", \"Radar\", \"hello\", \"world\", \"madam\", \"racecar\", \"python\"]\n\n# Wendet die Funktion auf die Liste an und druckt die Ergebnisse\npalindromes = [word for word in words if is_palindrome(word)]\n\nprint(\"Die Palindrome in der Liste sind:\", palindromes)\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Python/Programmieraufgaben/#aufgabe-7-zufallszahl-raten","title":"\ud83c\udfb2 Aufgabe 7: Zufallszahl raten","text":"<p>Schreiben Sie ein Python-Programm, das eine Zufallszahl zwischen 1 und 100 generiert. Der Benutzer soll dann die M\u00f6glichkeit haben, die Zahl zu erraten. Das Programm sollte den Benutzer \u00fcber die Korrektheit seines Versuches informieren und ihm bei Bedarf Hinweise geben, ob die gesuchte Zahl gr\u00f6\u00dfer oder kleiner ist.</p> <pre><code>import random\n\ndef rate_die_zahl():\n    # Schritt 1: Generiere eine Zufallszahl zwischen 1 und 100\n    zufallszahl = random.randint(1, 100)\n\n    # Initialisierung der Variablen\n    geraten = False\n\n    print(\"Willkommen zum Zahlenratespiel!\")\n    print(\"Ich habe eine Zahl zwischen 1 und 100 ausgew\u00e4hlt.\")\n\n    # Schritt 2 bis 6: Frage den Benutzer nach seiner Sch\u00e4tzung und gib R\u00fcckmeldungen\n    while not geraten:\n        tipp = int(input(\"Bitte geben Sie Ihre Sch\u00e4tzung ein: \"))\n\n        if tipp &lt; zufallszahl:\n            print(\"Die gesuchte Zahl ist gr\u00f6\u00dfer als Ihre Sch\u00e4tzung.\")\n        elif tipp &gt; zufallszahl:\n            print(\"Die gesuchte Zahl ist kleiner als Ihre Sch\u00e4tzung.\")\n        else:\n            geraten = True\n            print(\"Herzlichen Gl\u00fcckwunsch! Sie haben die richtige Zahl erraten.\")\n\n# Aufruf der Funktion\nrate_die_zahl()\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Python/Programmieraufgaben/#aufgabe-8-hangman-spiel","title":"\ud83c\udfae Aufgabe 8: Hangman-Spiel","text":"<p>Implementieren Sie das Spiel \"Hangman\" (Galgenm\u00e4nnchen). W\u00e4hlen Sie zuf\u00e4llig ein Wort aus der Liste und lassen Sie den Benutzer raten. Die Gro\u00df- und Kleinschreibung soll hierbei keine Rolle spielen. Nach 5 Fehlversuchen ist das Spiel vorbei.</p> <pre><code>import random\n\ndef hangman():\n    words = ['Python', 'Entwicklung', 'Programmierung', 'Galgenm\u00e4nnchen', 'Computer']\n    word = random.choice(words).lower()\n    word_display = ['_'] * len(word)\n    attempts = 5\n    guessed_letters = set()\n\n    print(\"Willkommen zu Hangman!\")\n\n    while attempts &gt; 0 and '_' in word_display:\n        print(\"\\nAktuelles Wort: \" + ' '.join(word_display))\n        print(f\"Fehlversuche \u00fcbrig: {attempts}\")\n        guess = input(\"Geben Sie einen Buchstaben ein: \").lower()\n\n        if not guess.isalpha() or len(guess) != 1:\n            print(\"Bitte geben Sie einen einzelnen Buchstaben ein.\")\n            continue\n\n        if guess in guessed_letters:\n            print(\"Sie haben diesen Buchstaben bereits geraten.\")\n            continue\n\n        guessed_letters.add(guess)\n\n        if guess in word:\n            for i, letter in enumerate(word):\n                if letter == guess:\n                    word_display[i] = guess\n            print(f\"Richtig! '{guess}' ist im Wort.\")\n        else:\n            attempts -= 1\n            print(f\"Falsch! '{guess}' ist nicht im Wort.\")\n\n    if '_' not in word_display:\n        print(\"\\nGl\u00fcckwunsch! Sie haben das Wort erraten: \" + word)\n    else:\n        print(\"\\nLeider verloren! Das Wort war: \" + word)\n\nhangman()\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Python/Python%20%C3%9Cberblick/","title":"Python \u00dcberblick","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Python/Python%20%C3%9Cberblick/#mein-erstes-projekt","title":"\ud83d\ude80 Mein Erstes Projekt","text":"<p>In Python werden Codezeilen nicht mit <code>;</code> beendet. Mithilfe der <code>print()</code>-Funktion k\u00f6nnen Werte ausgegeben werden.</p> <p>\u2192 Das folgende Programm gibt Hello World auf die Konsole aus:</p> <pre><code>print(\"Hello World\")`\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Python/Python%20%C3%9Cberblick/#variablen","title":"\ud83e\uddee Variablen","text":"<p>Datentypen werden nicht explizit angegeben, sondern dynamisch bestimmt. Diese Eigenschaft in Programmiersprachen wird als dynamically typed bezeichnet.</p> <p>Mithilfe der <code>type(x)</code>-Funktion kann der Typ einer Variable <code>x</code> bestimmt werden:</p> <pre><code># Integer\nx = 42  \nprint(type(x))\n\n# String\ny = \"DHBW Heidenheim\"  \nprint(type(y))\n\n# Boolean\nz = True\nprint(type(z))\n</code></pre> <p>Der Typ einer Variable kann sich zur Laufzeit \u00e4ndern:</p> <pre><code># Integer\nx = 42\nprint(type(x))\n\n# String\nx = \"DHBW Heidenheim\"\nprint(type(x))\n</code></pre> <p>In bestimmten Situationen m\u00f6chten wir aber den Typ einer Variable explizit \u00e4ndern. Hier kommen Cast-Operationen ins Spiel:</p> <pre><code># Integer 42\nx = 42\nprint(type(x))  \n\n# Cast von Integer 42 zu String \"42\"\ny = str(x)\nprint(type(y))\n</code></pre> <p>Eine solche Situation ist beispielsweise das Einlesen von Werten. Hierf\u00fcr kann in Python die <code>input()</code>-Funktion verwendet werden. Diese liest Werte aber immer als Typ <code>str</code> ein:</p> <pre><code>inputA = input(\"Gebe Zahl 1 ein\")\ninputB = input(\"Gebe Zahl 2 ein\")\n\nprint(int(inputA) * int(inputB))\n</code></pre> <p>Es ist nicht ungew\u00f6hnlich, dass Funktionen auch kein Ergebnis liefern k\u00f6nnen oder sollen. F\u00fcr solche F\u00e4lle gibt es <code>None</code> sowie den dazugeh\u00f6rigen Typ <code>NoneType</code>. <code>None</code> wird verwendet, um die Abwesenheit eines Wertes zu zeigen.</p> <p>In anderen Programmiersprachen werden \u00e4hnliche Konzepte oft mit Null abgebildet:</p> <pre><code>result = print(\"Hello World\")\nprint(result)\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Python/Python%20%C3%9Cberblick/#operatoren","title":"\u2795 Operatoren","text":"<p>Liste der Python Operatoren</p> <p>Obwohl Python dynamically typed ist, werden zur Laufzeit trotzdem Typ\u00fcberpr\u00fcfungen durchgef\u00fchrt. So k\u00f6nnen einige Operationen nicht auf unvertr\u00e4glichen Typen durchgef\u00fchrt werden.</p> <p>\u2757 Der folgende Code ist ein solches Beispiel und wirft einen <code>TypeError</code>:</p> <pre><code>zahl = 42\ntext = \"Hallo\" \n\nergebnis = zahl + text  # Dies f\u00fchrt zu einem TypeError\n</code></pre> <p>In Python haben logische Operatoren eine andere Syntax als in vielen popul\u00e4ren Programmiersprachen:</p> Logisches Und Logisches Oder Invertierung Python <code>and</code> <code>or</code> <code>not</code> C#, Java, JavaScript, uvm. <code>&amp;&amp;</code> ` <pre><code>def truth_table_or():\n    print(\"A     | B     | A OR B\")\n    print(\"----------------------\")\n    for A in [True, False]:\n        for B in [True, False]:\n            result = A or B\n            print(f\"{A:&lt;5} | {B:&lt;5} | {result}\")\n\ndef truth_table_and():\n    print(\"A     | B     | A AND B\")\n    print(\"-----------------------\")\n    for A in [True, False]:\n        for B in [True, False]:\n            result = A and B\n            print(f\"{A:&lt;5} | {B:&lt;5} | {result}\")\n\ndef truth_table_not():\n    print(\"A     | NOT A\")\n    print(\"----------------\")\n    for A in [True, False]:\n        result = not A\n        print(f\"{A:&lt;5} | {result}\")\n\nprint(\"Truth Table for OR:\")\ntruth_table_or()\nprint()\n\nprint(\"\\nTruth Table for AND:\")\ntruth_table_and()\nprint()\n\nprint(\"\\nTruth Table for NOT:\")\ntruth_table_not()\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Python/Python%20%C3%9Cberblick/#identitatsoperatoren","title":"\ud83d\udd0d Identit\u00e4tsoperatoren","text":"<p>Identit\u00e4tsoperatoren pr\u00fcfen, ob zwei Objekte tats\u00e4chlich dasselbe Objekt (dasselbe im Speicher) sind. Diese Operatoren sind <code>is</code> und <code>is not</code>.</p> <p>\u26a0 Hinweis: Die Operatoren <code>is</code> und <code>==</code> sind unterschiedlich. <code>is</code> vergleicht, ob zwei Objekte dasselbe im Speicher sind, <code>==</code> vergleicht, ob der Wert der Objekte identisch ist.</p> <pre><code>a = 1234\nb = 12345\nc = a  \n\nprint(a is c)\nprint(a is b)\nprint(b is not c)\n</code></pre> <p>\u2757 Im folgenden Beispiel wird der <code>is</code>-Operator falsch eingesetzt. Er sollte nicht zum Vergleich von Werten eingesetzt werden:</p> <pre><code>x = 10  \ny = 10\n\nprint(x == y)\nprint(y is x)\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Python/Python%20%C3%9Cberblick/#listen","title":"\ud83d\udccb Listen","text":"<p>\u26a0 Hinweis: Python hat kein Array als built-in Datenstruktur. Listen werden deswegen oft \u00e4hnlich wie Arrays aus anderen Programmiersprachen verwendet.</p> <p>Mithilfe der <code>len(x)</code>-Funktion kann die Anzahl von Elementen in einer Liste <code>x</code> bestimmt werden:</p> <pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]  \n\n# Indizierung startet bei 0\nprint(fruits[0])\nprint(fruits[2])\nprint(len(fruits))\n</code></pre> <pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]  \n\nfruits.append(\"peach\")\nfruits.remove(\"apple\")  \n\nprint(fruits)\n</code></pre> <pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]\n\nfruits.append(\"peach\")\nfruits.append(\"peach\") \n\nprint(fruits.count(\"peach\"))\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Python/Python%20%C3%9Cberblick/#schleifen","title":"\ud83d\udd04 Schleifen","text":"<p><code>continue</code> bricht die aktuelle Iteration ab, <code>break</code> bricht die gesamte Schleife ab:</p> <pre><code>i = 0\nwhile i &lt; 10:\n    i += 1\n\n    if i == 2:\n        continue\n\n    if i == 8:\n        break\n\n    print(i)\n</code></pre> <p>Eine <code>for</code>-Schleife kann in Kombination mit einem Mitgliedsoperator \u00fcber eine Liste iterieren. Mithilfe der <code>range</code>-Funktion kann auch eine \"z\u00e4hlende\" <code>for</code>-Schleife realisiert werden:</p> <pre><code># Iteration \u00fcber Eintr\u00e4ge einer Liste\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor fruit in fruits:\n  print(fruit)\n\nprint()\n\n# Numerisches Z\u00e4hlen mit Range\nfor x in range(2, 6, 1):\n  print(x)\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Python/Python%20%C3%9Cberblick/#funktionen","title":"\ud83d\udd27 Funktionen","text":"<pre><code>def add(x, y):\n    sum = x + y\n    return sum\n\nresult = add(2,5)\nresult = add(y=2, x=5)\n\nprint(result)\n</code></pre> <p>Funktionen m\u00fcssen definiert werden, bevor diese aufgerufen werden. Wenn nicht, wird ein Fehler ausgel\u00f6st:</p> <pre><code>result = add(2,5)\nprint(result)\ndef add(x, y):\n    sum = x + y\n    return sum\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/1.%20Einf%C3%BChrung%20in%20die%20Informatik/Einordnung%20der%20Informatik%20in%20die%20Naturwissenschaften/","title":"Einordnung der Informatik in die Naturwissenschaften","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/1.%20Einf%C3%BChrung%20in%20die%20Informatik/Methodik%20der%20Informatik/","title":"Methodik der Informatik","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/1.%20Einf%C3%BChrung%20in%20die%20Informatik/Was%20ist%20Informatik/","title":"Definition:","text":"<p>Informatik ist die Wissenschaft von der systematischen Verarbeitung von Informationen, besonders der automatischen Verarbeitung mit Hilfe von Digitalrechnern</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/1.%20Einf%C3%BChrung%20in%20die%20Informatik/Was%20ist%20Informatik/#etymologie","title":"Etymologie:","text":"<p>Informatik setzt sich aus dem Begriff Information und Automatik zusammen \u2192 Die Aufgabe der Informatik ist die automatische Verarbeitung von Informationen</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/2.%20Allgemeine%20Definition/Definition%20Daten/","title":"Definition Daten","text":"<p>Gebilde aus Zeichen oder kontinuierliche Funktionen, due aufgrund bekannter oder unterstellter Abmachungen Information darstellen, vorrangig zum Zwecken der Verarbeitung und als deren Ergebnis (DIN 44300)</p> <p>[!example]- Beispiel Endliches Gebilde aus Zeichen - 01000100101011101100 - abvfndlksanfiuanefwlk - FF12AB3945 - Das also war des Pudels Kern!</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/2.%20Allgemeine%20Definition/Definition%20Information/","title":"Definition Information","text":"<p>Unterrichtung Auskunft</p> <p>[!example]- Beispiel Daten die nach vorgegebenen Regeln eine inhaltliche Bedeutung aufweisen - 0100010010101010 \u2192 Information im Bin\u00e4rcode - FF12AB3945 \u2192 Information im Hexadezimalcode - Das also war des Pudels Kern! \u2192 Information in deutscher Sprache</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/2.%20Allgemeine%20Definition/Definition%20Wissen/","title":"Definition Wissen","text":"<p>Wissen ist die begr\u00fcndete und begr\u00fcndbare Erkenntnis im Unterschied zur Vermutung und Meinung oder zum Glauben</p> <p>[!example]- Beispiel Informationen deren Inhalt verstanden wurde und die dadurch in einen gr\u00f6\u00dferen Kontext eingeordnet werden k\u00f6nnen - Das also war des Pudels Kern! \u2192 Bedeutung: Den wahren Kern einer Sache erfassen. Zitat aus Goethes Faust I.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/2.%20Allgemeine%20Definition/Notation/","title":"Notation","text":"<p>Detaillierte Festlegung der verwendeten Elemente einer Sprache</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/2.%20Allgemeine%20Definition/Semantik/","title":"Semantik","text":"<p>Eine Semantik legt die Bedeutung von W\u00f6rtern fest</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/2.%20Allgemeine%20Definition/Sprache/","title":"Sprache","text":"<p>Sprache ist ein System von Zeichen f\u00fcr Begriffe und Gegenst\u00e4nde um ein System von Regeln f\u00fcr die Kombination dieser Zeichen</p> <p>[!example]- Beispiel - nat\u00fcrliche Sprache - k\u00fcnstliche Sprache - Programmiersprache - Abfragesprache</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/2.%20Allgemeine%20Definition/Syntax/","title":"Syntax","text":"<p>Umfasst die formalen Regeln f\u00fcr den grammatikalischen Aufbau einer Sprache</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/2.%20Allgemeine%20Definition/%C3%9Cbersicht%20Daten%2C%20Information%2C%20Wissen/","title":"\u00dcbersicht Daten, Information, Wissen","text":"<p>Definition Daten Definition Information Definition Wissen </p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Algorithmen/","title":"Algorithmen","text":"<p>Ein Algorithmus ist eine logische Abfolge von endlich vielen, wohldefinierten Einzelschritten, um ein Problem zu l\u00f6sen.</p> <p>Es gibt verschiedene Arten von Algorithmen:</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Algorithmen/#determiniert","title":"Determiniert","text":"<ul> <li>Algorithmus liefert bei wiederholter Eingabe der gleichen Startwerte das gleiche Ergebnis</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Algorithmen/#nicht-determiniert","title":"Nicht-Determiniert","text":"<ul> <li>Algorithmus liefert bei wiederholter Eingabe gleicher Startwerte unterschiedliche Ergebnisse</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Algorithmen/#deterministisch","title":"Deterministisch","text":"<ul> <li>Algorithmus kennt zu jedem Zustand nur einen definierten Folgezustand</li> <li>Gro\u00dfteil der Algorithmen</li> <li>determiniert</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Algorithmen/#nicht-deterministisch","title":"Nicht-Deterministisch","text":"<ul> <li>Algorithmus kennt zu jedem Zustand mehrere mo\u0308gliche Folgezusta\u0308nde</li> <li>ein Folgezustand wird z.B. durch Raten ausgewa\u0308hlt</li> <li>determiniert &amp; nicht-determiniert</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Algorithmen/#probabilistisch","title":"Probabilistisch","text":"<ul> <li>In einem Algorithmus kommt zumindest eine Anweisung vor, bei der der Folgezustand von einer zufa\u0308lligen Gro\u0308\u00dfe abha\u0308ngt</li> <li>i.d.R Algorithmen, die einen Zufallsgenerator benutzen, um Entscheidungen zu treffen</li> <li>nicht-determiniert</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Algorithmen/#heuristisch","title":"Heuristisch","text":"<ul> <li>Algorithmen, die eine Heuristik benutzen<ul> <li>Lo\u0308sungsverfahren bzw. Strategie ist bekannt aber nicht beweisbar</li> </ul> </li> <li>Berechnung von schnellen, mo\u0308glichst optimalen Na\u0308herungen</li> <li>determiniert &amp; nicht-determiniert</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Berechenbarkeit/","title":"Berechenbarkeit","text":"<p>Wir stellen uns die folgende Fragen:</p> <ul> <li>Gibt es fu\u0308r jedes denkbare Problem ein Algorithmus der das Problem lo\u0308st?</li> <li>Gibt es einen Algorithmus, der fu\u0308r alle Eingaben eine gegebene Funktion berechnet?</li> <li>Wenn nicht, gibt es wenigstens einen Algorithmus, der das Problem fu\u0308r die u\u0308blicherweise beno\u0308tigten Eingaben lo\u0308st?</li> <li>Wie kann man zeigen, dass ein Problem berechenbar ist?</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Berechenbarkeit/#kategorien-der-berechenbarkeit","title":"Kategorien der Berechenbarkeit","text":"<ul> <li>berechenbar: ein Algorithmus liefert fu\u0308r jede Eingabe ein Ergebnis in endlicher Zeit</li> <li>entscheidbar: fu\u0308r jede Eingabe terminiert in endlicher Zeit mit dem Ergebnis ja/nein (wahr/falsch)</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Berechenbarkeit/#nachweis-der-berechenbarkeit","title":"Nachweis der Berechenbarkeit","text":"<p>Probleme, bei denen die Komplexit\u00e4t bestimmt werden kann, sind berechenbar.</p> <p>[!tip] Church-Turing These Alle intuitiv berechenbaren Funktionen sind auch mit einer Turingmaschine berechenbar.</p> <p>Also: Falls es eine Turingmaschine gibt, die ein Problem l\u00f6sen kann, so ist das Problem berechenbar.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Berechenbarkeit/#nicht-berechenbare-probleme","title":"Nicht-Berechenbare Probleme","text":"<p>Nicht alle Probleme sind berechenbar. Beweis hierf\u00fcr ist allerdings nicht trivial und wird hier nicht behandelt.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Berechenbarkeit/#beispiele","title":"Beispiele","text":"<ul> <li>Halte-Problem</li> <li>Totalita\u0308tsproblem</li> <li>A\u0308quivalenzprogramm</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Entwurf%20von%20Algorithmen/","title":"Entwurf von Algorithmen","text":"<p>Wir k\u00f6nnen Algorithmen auf verschiedene Arten entwerfen:</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Entwurf%20von%20Algorithmen/#top-down","title":"Top Down","text":"<ul> <li>Ausgangspunkt: Problemstellung</li> <li>Dann schrittweise Vereinfachung</li> <li>Verfeinert werden m\u00fcssen: Operationen, Datenstrukturen, Kontrollfl\u00fcsse</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Entwurf%20von%20Algorithmen/#bottom-up","title":"Bottom Up","text":"<ul> <li>Ausgangspunkt: Einzelaufgaben- / Komponenten</li> <li>Schrittweise Zusammenfassung von Komponenten</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Entwurf%20von%20Algorithmen/#middle-out","title":"Middle Out","text":"<ul> <li>Kombination aus Bottom Up und Top Down. Wird meist in der Praxis angewandt</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Komplexit%C3%A4t/","title":"Komplexit\u00e4t","text":"<p>Nicht alle Algorithmen, die berechenbar sind, sind auch mit Computerprogrammen sinnvoll auszufu\u0308hren, da u.U. die Rechenzeiten viel zu lang sind.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Komplexit%C3%A4t/#rechenschritte-von-algorithmen","title":"Rechenschritte von Algorithmen","text":"<p>Wir k\u00f6nnen die Rechenschritte von Algorithmen z\u00e4hlen. Je mehr Rechenschritte, desto gr\u00f6\u00dfer die Komplexit\u00e4t, d.h. desto zeitaufw\u00e4ndiger sind die Algorithmen.</p> <p>F\u00fcr Algorithmen, die eine variable Anzahl an Rechenschritten haben (also die meisten Algorithmen) beschreiben wir die Anzahl an Rechenschritten mit einer Funktion.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Komplexit%C3%A4t/#landau-symbole","title":"Landau-Symbole","text":"<p>Landau-Symbole werden in der Mathematik und in der Informatik verwendet, um das asymptotische verhalten von Funktionen und Folgen zu beschreiben. In unserem Fall werden wir die Landau-Symbole verwenden, um die Komplexit\u00e4t von Algorithmen zu beschreiben.</p> <p>Im folgenden stellen wir nur einige Landau-Symbole dar, die f\u00fcr uns wichtig sind.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Komplexit%C3%A4t/#groe-o-notation","title":"Gro\u00dfe-O-Notation","text":"<p>Die \\(\\mathcal{O}\\)-Notation wird verwendet, um die asymptotische obere Schranke einer Funktion zu beschreiben.</p> <p>Es sei \\(f:\\mathbb{R} \\to \\mathbb{R}\\) die Funktion, dessen obere Schranke ermittelt werden soll und es sei \\(g:\\mathbb{R} \\to \\mathbb{R}^+\\) die Funktion, die mit \\(f\\) verglichen werden soll. Dann schreiben wir \\(\\(f(x) = \\mathcal{O}(g(x)), \\hspace{8pt} x \\to \\infty\\)\\) falls es \\(M \\in \\mathbb{R}^+\\) und \\(x_{0}\\in \\mathbb{R}\\) gibt mit \\(\\(|f(x)| \\le Mg(x) \\hspace{8pt} \\forall x \\ge x_0\\)\\)</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Komplexit%C3%A4t/#kleine-o-notation","title":"Kleine-o-Notation","text":"<p>Diese Notation ist \u00e4hnlich wie die \\(\\mathcal{O}\\)-Notation. Was hier anders ist: \\(g\\) steigt deutlich schneller als \\(f\\):</p> <p>Es seien \\(f\\) und \\(g\\) wie im oberen Beispiel. Wir schreiben \\(\\(f(x) = o(g(x)), \\hspace{8pt} x \\to \\infty\\)\\) falls es f\u00fcr alle \\(\\varepsilon \\in \\mathbb{R}^+\\) ein \\(x_{0}\\in \\mathbb{R}\\) gibt mit \\(\\(|f(x)| \\le \\varepsilon g(x) \\hspace{8pt} \\forall x \\ge x_0\\)\\) Im Gegensatz zur \\(\\mathcal{O}\\)-Notation muss hier die Bedingung f\u00fcr alle Konstanten gelten und nicht nur f\u00fcr mindestens eine. Also ist die \\(o\\)-Notation aussagekr\u00e4ftiger als die \\(\\mathcal{O}\\)-Notation: Falls \\(f(x) = o(g(x))\\), dann gilt automatisch \\(f(x) = \\mathcal{O}(g(x))\\), aber nicht anders rum!</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Komplexit%C3%A4t/#groe-omega-notation","title":"Gro\u00dfe-Omega-Notation","text":"<p>Es gibt zwei verschiedene, inkonsistente Definitionen f\u00fcr die \\(\\Omega\\)-Notation. Im folgenden erl\u00e4utern wir die Knuth-Definition, benannt nach Donald Knuth. Diese Definition wird am h\u00e4ufigsten in der Informatik verwendet, n\u00e4mlich um die untere Schranke einer Funktion zu beschreiben.</p> <p>Es seien \\(f\\) und \\(g\\) wie im oberen Beispiel. Die Notation \\(\\(f(x) = \\Omega(g(x)), \\hspace{8pt} x \\to \\infty\\)\\) ist \u00e4quivalent zu: \\(\\(g(x) = \\mathcal{O}(f(x))\\)\\)</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Komplexit%C3%A4t/#kleine-omega-notation","title":"Kleine-Omega-Notation","text":"<p>Analog zur \\(o\\)-Notation:</p> <p>Es seien \\(f\\) und \\(g\\) wie im oberen Beispiel. Die Notation \\(\\(f(x) = \\omega(g(x)), \\hspace{8pt} x \\to \\infty\\)\\) ist \u00e4quivalent zu: \\(\\(g(x) = o(f(x))\\)\\)</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Komplexit%C3%A4t/#theta-notation","title":"Theta-Notation","text":"<p>Diese Definition ist ebenfalls per Donald Knuth.</p> <p>Es seien \\(f\\) und \\(g\\) wie im oberen Beispiel. Wir schreiben \\(\\(f(x) = \\Theta(g(x)), \\hspace{8pt} x \\to \\infty\\)\\) falls gilt: \\(\\(f(x) = \\mathcal{O(g(x))} \\hspace{8pt} \\text{ und } \\hspace{8pt} f(x) = \\Omega(g(x))\\)\\)</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Komplexit%C3%A4t/#komplexitatsklassen","title":"Komplexit\u00e4tsklassen","text":"<p>Es ist f\u00fcr uns interessant zu wissen, welche Entscheidungsprobleme \"schnell\" l\u00f6sbar sind und welche nicht. Hierzu gruppieren wir Probleme, die von Turing-Maschinen gel\u00f6st werden k\u00f6nnen, in sogenannten Komplexit\u00e4tsklassen. Wir erl\u00e4utern zun\u00e4chst nur einige Klassen: P, NP, NP-Hard und NP-Vollst\u00e4ndig.</p> <p></p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Komplexit%C3%A4t/#p-probleme","title":"P-Probleme","text":"<p>Als P-Probleme definiert man diejenigen Entscheidungsprobleme, die von einer deterministischen Turing-Maschine in Polynomialzeit gel\u00f6st werden k\u00f6nnen.</p> <p>Diese Probleme sind (\u00fcblicherweise) \"schnell\" l\u00f6sbar.</p> <p>[!example] Beispiel: QuickSort Wir k\u00f6nnen mithilfe des QuickSort-Algorithmus eine Liste in \\(\\mathcal{O}(n \\log_2(n))\\) ordnen und wegen \\(n \\log_{2}(n)= \\mathcal{O}(n^2)\\) in Polynomialzeit.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Komplexit%C3%A4t/#np-probleme","title":"NP-Probleme","text":"<p>Als NP-Probleme definiert man diejenigen Entscheidungsprobleme, bei denen es f\u00fcr \"Ja\"-Antworten Beweise gibt, die in Polynomialzeit von einer deterministischen Turing-Maschine verifiziert werden k\u00f6nnen.</p> <p>Alternativ: Als NP-Probleme definiert man diejenigen Entscheidungsprobleme, die von einer nicht-deterministischen Turing-Maschine in Polynomialzeit gel\u00f6st werden k\u00f6nnen.</p> <p>Somit ist NP also eine Generalisierung von P: Alle P-Probleme sind zugleich NP-Probleme. NP-Probleme sind auch die meisten, \"\u00fcblichen\" Probleme, die im Alltag auftauchen.</p> <p>[!example] Beispiel: Sudoku Wir kennen (bisher) keinen Algorithmus, der ein Sudoku in Polynomialzeit l\u00f6sen kann, also ist das Sudoku-Problem (vermutlich) nicht in P. Wir k\u00f6nnen aber in Polynomialzeit pr\u00fcfen, ob ein fertiges Sudoku richtig ist, also ein NP-Problem.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Komplexit%C3%A4t/#np-hard-probleme","title":"NP-Hard-Probleme","text":"<p>Ein Entscheidungsproblem \\(H\\) hei\u00dft NP-hard, falls es f\u00fcr jedes Problem \\(L\\) in NP eine \u00dcberf\u00fchrung in Polynomialzeit von \\(L\\) zu \\(H\\) gibt.</p> <p>Diese Komplexit\u00e4tsklasse ist wichtig, da eine L\u00f6sung f\u00fcr ein NP-Hard-Problem auch eine L\u00f6sung f\u00fcr alle NP-Probleme ist.</p> <p>[!example] Beispiel: Halteproblem Wir kennen bereits das Halteproblem. Klar: Da das Halteproblem nicht entscheidbar ist kann es nicht in NP sein. Aber das Problem ist in NP-Hard: Es sei oBdA. \\(L\\) ein Problem in NP und es sei \\(M\\) eine nicht-deterministische Turing-Maschine, die \\(L\\) l\u00f6sen kann. Dann k\u00f6nnen wir \\(L\\) zum Halteproblem \u00fcberf\u00fchren und zwar wie folgt: Es sei \\(M'\\) eine Turing-Maschine, die f\u00fcr eine Eingabe \\(x\\) genau dann terminiert, falls \\(x\\) von \\(M\\) akzeptiert wird. \u00dcberf\u00fchre zun\u00e4chst die Eingabe \\(x\\) in die Eingabe \\((M', x)\\). Somit haben wir in Polynomialzeit \\(L\\) in das Halteproblem \u00fcberf\u00fchrt.</p> <p>Hierbei ist es egal, ob \\(M'\\) deterministisch oder nicht-deterministisch ist und es ist egal, ob \\(M'\\) in Polynomialzeit l\u00e4uft. Was relevant ist, ist das die \u00dcberf\u00fchrung \\(x \\mapsto (M', x)\\) in Polynomialzeit m\u00f6glich ist.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Komplexit%C3%A4t/#np-vollstandige-probleme","title":"NP-Vollst\u00e4ndige-Probleme","text":"<p>Falls ein Problem sowohl in NP als auch in NP-Hard ist, so ist das Problem NP-vollst\u00e4ndig.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Komplexit%C3%A4t/#p-vs-np-problem","title":"P vs NP Problem","text":"<p>Dieses sehr bekannte, bisher ungel\u00f6ste Problem Fragt ob es zu allen NP-Problemen eine \u00e4quivalente deterministische Turing-Maschine gibt, die das jeweilige Problem in Polynomialzeit l\u00f6sen kann, also P = NP.</p> <p>[!tip] Was wir bisher nicht wissen Wir wissen nicht, ob es NP-Probleme gibt, die nicht NP-Vollst\u00e4ndig sind. Falls wir das zeigen, dann gilt automatisch P = NP.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Korrektheit/","title":"Korrektheit","text":"<p>Wir stellen uns einige zentrale Fragen: - Arbeitet ein Algorithmus genauso, wie es in der Spezifikation vorgesehen ist? - Gibt ein Algorithmus zu einer Eingabedatenmenge die richtige Ausgabedatenmenge aus? - Sind alle mo\u0308glichen Fa\u0308lle eines Problems durch den Algorithmus abgedeckt? - Ist der Algorithmus frei von Fehlern?</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Korrektheit/#fehlerarten","title":"Fehlerarten","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Korrektheit/#syntaktische-fehler","title":"Syntaktische Fehler","text":"<p>Konstrukte der Programmiersprache wurden nicht richtig angewandt. Diese werden vom Compiler abgefangen.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Korrektheit/#semantische-fehler","title":"Semantische Fehler","text":"<p>Logische Fehler. Diese werden (meist) nicht vom Compiler abgefangen.  Im besten Fall tauchen diese bei Laufzeit auf, im schlimmsten Fall garnicht.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Korrektheit/#terminiertheit","title":"Terminiertheit","text":"<p>Ein Algorithmus hei\u00dft terminierend, wenn er f\u00fcr jede Eingabe terminiert (d.h. ein Ende hat).</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Korrektheit/#arten-der-korrektheit","title":"Arten der Korrektheit","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Korrektheit/#partielle-korrektheit","title":"Partielle Korrektheit","text":"<p>Wenn ein Ergebnis ausgegeben wird, dann muss dieses korrekt sein.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Korrektheit/#totale-korrektheit","title":"Totale Korrektheit","text":"<p>Wenn partiell Korrekt und terminiert.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Korrektheit/#ausfuhrbar","title":"Ausf\u00fchrbar","text":"<p>Betriebsmittel reichen aus, um den Algorithmus durchzufu\u0308hren.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Korrektheit/#nachweisen-der-korrektheit","title":"Nachweisen der Korrektheit","text":"<p>Mo\u0308gliche Vorgehensweisen, um die Korrektheit eines Algorithmus zu zeigen:</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Korrektheit/#testen","title":"Testen","text":"<ul> <li>einfach, aber fehleranfa\u0308llig  </li> <li>meist von Wissen/Erfahrung des Testers abha\u0308ngig  </li> <li>totale Korrektheit kann nicht gezeigt werden (nur partielle Korrektheit)</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Korrektheit/#beweisen","title":"Beweisen","text":"<ul> <li>schwierig, aber totale Korrektheit kann gezeigt werden</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Rekursivit%C3%A4t/","title":"Rekursivit\u00e4t","text":"<p>Ein Algorithmus wird als rekursiv bezeichnet, wenn er sich selbst aufruft.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Rekursivit%C3%A4t/#grundlegende-idee","title":"Grundlegende Idee","text":"<p>Bei jedem Aufruf des Algorithmus wird das Problem \"einfacher\". Der innerste Rekursionsschritt ist der triviale Fall (Rekursionsanker).</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Rekursivit%C3%A4t/#vorteile","title":"Vorteile","text":"<ul> <li>meist k\u00fcrzer als iterativer Algorithmus</li> <li>\u00fcbersichtlicher</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Rekursivit%C3%A4t/#nachteile","title":"Nachteile","text":"<ul> <li>Rekursionsanker muss richtig definiert werden</li> <li>Umsetzung: H\u00f6herer Speicherplatz &amp; langsamer</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Rekursivit%C3%A4t/#typen-von-rekursionen","title":"Typen von Rekursionen","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Rekursivit%C3%A4t/#direkte-rekursion","title":"Direkte Rekursion","text":"<p>Eine Rekursion ruft sich selbst auf.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Rekursivit%C3%A4t/#indirekte-rekursion","title":"Indirekte Rekursion","text":"<p>Eine Methode <code>foo</code> ruft eine Methode <code>bar</code> auf, die wiederum <code>foo</code> aufruft.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Rekursivit%C3%A4t/#lineare-rekursion","title":"Lineare Rekursion","text":"<p>Eine Rekursion ruft sich maximal einmal selbst auf. Ein besonderer Fall ist die Endrekursion: Diese steht als letzte Anweisung in der Methode und es gibt einen \u00e4quivalenten iterativen Algorithmus dazu.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Rekursivit%C3%A4t/#kaskadierende-rekursion","title":"Kaskadierende Rekursion","text":"<p>Eine Rekursion ruft sich mehr als einmal selbst auf.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Rekursivit%C3%A4t/#fehler-bei-rekursionen","title":"Fehler bei Rekursionen","text":"<ul> <li>Kein Abbruchkriterium</li> <li>Abbruchkriterium wird nie Erf\u00fcllt</li> <li>Rekursion wird nicht einfacher, sondern komplexer</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Testen/","title":"Statisches Testen","text":"<p>Mit den statischen Testverfahren kann u\u0308berpru\u0308ft werden: - Komplexit\u00e4t - Erreichbarkeit (ko\u0308nnen u\u0308berhaupt alle Programmteile erreicht werden) - Syntax - Semantik - Programmierrichtlinien Beispiele: - Schreibtischtests - Code-Walkthroughs - Code-Inspection</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Testen/#dynamisches-testen","title":"Dynamisches Testen","text":"<p>Testen eines Programms am Computer.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Testen/#black-box-testing","title":"Black-Box Testing","text":"<ul> <li>beim Testen ist der Inhalt einer Funktion nicht bekannt  </li> <li>es werden Testdaten zusammengestellt, die aus Eingabedaten und den zugeho\u0308rigen korrekten Ergebnissen bestehen  </li> <li>diese Daten werden dann mit der Funktion verarbeitet und die Ergebnisse verglichen  </li> <li>Vorsicht: es ist nicht sichergestellt, dass der Algorithmus immer korrekt arbeitet, sondern nur fu\u0308r die Fa\u0308lle, an die man gedacht hat  </li> <li>mo\u0308glicherweise wurden Teile des Algorithmus gar nicht getestet  </li> <li>in der Praxis sinnvoll, es muss nur angegeben werden, fu\u0308r welche Fa\u0308lle der Algorithmus korrekt arbeitet</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Testen/#white-box-testing","title":"White-Box Testing","text":"<ul> <li>beseitigt Schwa\u0308chen des Black-Box Tests dadurch, dass der Inhalt der getesteten Funktion bekannt ist</li> <li>es ist nun mo\u0308glich alle mo\u0308glichen Situationen zu testen  </li> <li>es wird jeder mo\u0308gliche Pfad mindestens einmal durchlaufen</li> <li>aufwendiger als BBT</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Testen/#beweisen-formales-testen","title":"Beweisen (Formales Testen)","text":"<p>Z.B. mit Hilfe eines speziellen Kalku\u0308ls oder einer speziellen Testsprache durchgefu\u0308hrt. Nur Formales Testen kann die Korrektheit eines Algorithmus sicherstellen.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/3.%20Algorithmentheorie/Testen/#testen-von-komplexen-systemen","title":"Testen von Komplexen Systemen","text":"<p>F\u00fcr komplexe Systeme gilt: - Testen des Gesamtsystems oft nicht vollsta\u0308ndig mo\u0308glich - Test von logischen Funktionseinheiten / Modulen - fu\u0308r einzelne Module wird die Korrektheit bewiesen und Zusicherungen gemacht     - pre-condition: was geht rein, in welchem Zustand befindet sich das System     - post-condition: was kommt raus, in welchem Zustand befindet sich das System     - andere Module verlassen sich auf diese Korrektheit</p> <p>Man kann nun auf zwei Arten testen: Top Down und Bottom Up.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/4.%20Programmierparadigmen/Funktionale%20Programmierung/","title":"Funktionale Programmierung","text":"<ul> <li>zentrale Elemente: Funktion und Rekursion </li> <li>\u00dcberf\u00fchrung von Eingabeparameter in Ausgabeparameter nur durch Anwendung von Funktionen </li> <li>Basis: wenige elementare Funktionen</li> <li>Aufbau von komplexen Funktionen durch Schachtelung von Funktionen</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/4.%20Programmierparadigmen/Funktionale%20Programmierung/#beispiel","title":"Beispiel","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/4.%20Programmierparadigmen/Funktionale%20Programmierung/#lisp-list-processing-language","title":"LISP (list processing language)","text":"<ul> <li>Datenstruktur: Liste </li> <li>Beispielprogramm: Emacs </li> <li>typisches Programm: ((((((()))))))) ... endlos viele Klammern</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/4.%20Programmierparadigmen/Logische%20Programmierung/","title":"Logische Programmierung","text":"<ul> <li>basierend auf Pr\u00e4dikatenlogik (s. Kapitel Pr\u00e4dikatenlogik)</li> <li>Programm besteht aus Fakten und Regeln </li> <li>zur Erzeugung von Antworten wird Resolution verwende</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/4.%20Programmierparadigmen/Logische%20Programmierung/#aufgaben","title":"Aufgaben","text":"<ul> <li>Logisches Schlie\u00dfen </li> <li>Ableiten von neuen Aussagen aus Regelbasis </li> <li>Verifizierung von Aussagen</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/4.%20Programmierparadigmen/Logische%20Programmierung/#beispiel","title":"Beispiel","text":"<p>Prolog</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/4.%20Programmierparadigmen/Objektorientierte%20Programmierung/","title":"Objektorientierte Programmierung","text":"<ul> <li>Modellierung der realen Welt durch Objekte </li> <li>Objekte besitzen Daten und Methoden</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/4.%20Programmierparadigmen/Objektorientierte%20Programmierung/#paradigmen","title":"Paradigmen","text":"<ul> <li>Identit\u00e4t </li> <li>Klassenbildung </li> <li>Kapselung </li> <li>Vererbung </li> <li>Polymorphismus (Overloading, late binding)</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/4.%20Programmierparadigmen/Programmierparadigmen/","title":"Programmierparadigmen","text":"<p>Es gibt verschiedene Ans\u00e4tze ein Algorithmus in eine Programmiersprache umzusetzen. Im Wesentlichen unterscheidet man 4 verschiedene Ans\u00e4tze:</p> <ul> <li>Imperative Programmierung</li> <li>Objektorientierte Programmierung</li> <li>Logische Programmierung</li> <li>Funktionale Programmierung</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/5.%20Aussagenlogik/Aussagen/","title":"Aussage","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/5.%20Aussagenlogik/Aussagen/#definition","title":"Definition","text":"<p>Eine Aussage ist einsprachlich sinnvoller Satz mit der Eigenschaft wahr oder falsch zu sein (aber nicht beides gleichzeitig).</p> <p>Wir schreiben \\(1\\) f\u00fcr wahr und \\(0\\) f\u00fcr falsch.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/5.%20Aussagenlogik/Aussagen/#atomare-formel","title":"Atomare Formel","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/5.%20Aussagenlogik/Aussagen/#definition_1","title":"Definition","text":"<p>Eine atomare Formel ist eine Aussage die nicht in weiteren Aussagen zersetzt werden kann.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/5.%20Aussagenlogik/Aussagen/#junktoren","title":"Junktoren","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/5.%20Aussagenlogik/Aussagen/#definition_2","title":"Definition","text":"<p>Ein Junktor ist ein Logischer Operator zwischen zwei Aussagen, also ein logischer Operator.</p> <p>Es seien \\(A\\) und \\(B\\) Aussagen: - Konjunktion: \\(A \\land B\\) ist genau dann wahr, wenn \\(A\\) und \\(B\\) wahr sind. - Disjunktion: \\(A \\lor B\\) ist genau dann wahr, wenn \\(A\\) oder \\(B\\) wahr ist. - Negation: \\(\\lnot A\\) ist genau dann wahr, wenn \\(A\\) falsch ist. - Implikation: \\(A \\rightarrow B\\) ist genau dann wahr, wenn \\(A\\) falsch ist oder \\(A\\) und \\(B\\) wahr sind. - \u00c4quivalenz:  \\(A \\leftrightarrow B\\) ist genau dann wahr, wenn \\(A \\rightarrow B\\) und \\(B \\rightarrow A\\).</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/5.%20Aussagenlogik/Aussagen/#literale","title":"Literale","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/5.%20Aussagenlogik/Aussagen/#definition_3","title":"Definition","text":"<p>Literale sind atomare Formeln und Negationen dieser.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/5.%20Aussagenlogik/Aussagen/#formeln","title":"Formeln","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/5.%20Aussagenlogik/Aussagen/#definition_4","title":"Definition","text":"<p>Innerhalb der Aussagenlogik definieren wir Formeln wie folgt: - Alle Atomare Formeln sind Formeln. - Ist \\(A\\) eine Formel, so ist auch \\(\\lnot A\\) eine Formel. - Sind \\(A, B\\) Formeln, so sind auch \\((A \\land B), (A \\lor B), (A \\rightarrow B), (A \\leftrightarrow B)\\) Formeln.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/5.%20Aussagenlogik/Erf%C3%BCllbarkeit/","title":"Belegung","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/5.%20Aussagenlogik/Erf%C3%BCllbarkeit/#definition","title":"Definition","text":"<p>Unter einer Belegung einer Formel versteht man eine Abbildung der atomaren Formeln auf die Menge \\(\\{0, 1\\}\\).</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/5.%20Aussagenlogik/Erf%C3%BCllbarkeit/#modell","title":"Modell","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/5.%20Aussagenlogik/Erf%C3%BCllbarkeit/#definition_1","title":"Definition","text":"<p>Unter einem Modell einer Formel versteht man eine wahrmachende Belegung der Formel.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/5.%20Aussagenlogik/Erf%C3%BCllbarkeit/#erfullbarkeit","title":"Erf\u00fcllbarkeit","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/5.%20Aussagenlogik/Erf%C3%BCllbarkeit/#definition_2","title":"Definition","text":"<p>Falls ein Modell f\u00fcr eine Formel existiert, so hei\u00dft diese erf\u00fcllbar. Falls nicht, so hei\u00dft diese unerf\u00fcllbar.</p> <p>Eine Formel hei\u00dft g\u00fcltig, falls alle Belegungen dieser Formel wahrmachend sind (= Tautologie).</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/5.%20Aussagenlogik/Folgerungsbeziehungen/","title":"Syntaktische Folgerung","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/5.%20Aussagenlogik/Folgerungsbeziehungen/#definition","title":"Definition","text":"<p>Es seien \\(F_1\\) und \\(F_2\\) Formeln. Falls \\(F_2\\) von \\(F_1\\) durch einer endlichen Anwendung von definierten Rechenregeln hergeleitet werden kann, so gilt die syntaktische Folgerungsbeziehung \\(F_1 \\vdash F_2\\).</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/5.%20Aussagenlogik/Folgerungsbeziehungen/#semantische-folgerung","title":"Semantische Folgerung","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/5.%20Aussagenlogik/Folgerungsbeziehungen/#definition_1","title":"Definition","text":"<p>Es seien \\(F_1\\) und \\(F_2\\) Formeln. Falls jedes Modell von \\(F_1\\) auch ein Modell von \\(F_2\\) ist, so gilt die semantische Folgerungsbeziehung \\(F_1 \\vDash F_2\\).</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/5.%20Aussagenlogik/Folgerungsbeziehungen/#zusammenhang","title":"Zusammenhang","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/5.%20Aussagenlogik/Folgerungsbeziehungen/#definition_2","title":"Definition","text":"<p>Es seien \\(F_1\\) und \\(F_2\\) Formeln. - Korrektheit: Falls \\(F_1 \\vdash F_2\\), so gilt auch \\(F_1 \\vDash F_2\\).</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/5.%20Aussagenlogik/Logisches%20Schlie%C3%9Fen/","title":"Modus Ponens","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/5.%20Aussagenlogik/Logisches%20Schlie%C3%9Fen/#definition","title":"Definition","text":"<p>Der Modus Ponens erlaubt es uns, aus wahren Aussagen weitere wahre Aussagen zu schlie\u00dfen.</p> <p>[!example] Beispiel 1. Wenn es regnet, dann wird die Stra\u00dfe nass. 2. Es regnet. 3. Also ist die Stra\u00dfe nass.</p> <p>Aus Annahmen der Form \\(A \\rightarrow B\\) und \\(A\\) wird auf die Konklusion \\(B\\) geschlossen. Formal notieren wir die Folgerung: \\(A, A \\rightarrow B \\vdash B\\).</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/5.%20Aussagenlogik/Normalformen/","title":"Disjunktive Normalform (DNF)","text":"<p>Eine Formel ist in DNF, falls sie eine Disjunktion von Monomen ist.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/5.%20Aussagenlogik/Normalformen/#konjunktive-normalform-knf","title":"Konjunktive Normalform (KNF)","text":"<p>Eine Formel ist in KNF, falls sie eine Konjunktion von Klauseln ist.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/5.%20Aussagenlogik/Normalformen/#kanonische-alternative-normalform-kanf","title":"Kanonische Alternative Normalform (KANF)","text":"<p>Eine Formel ist in KANF, falls sie sich in einer DNF befindet und zus\u00e4tzlich jede Variable in jedem Monom genau ein mal vorkommt.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/5.%20Aussagenlogik/Resolution/","title":"Resolution","text":"<p>Die Resolution ist eine korrekte Methode zur syntaktischen Folgerung. Sie ist nicht vollsta\u0308ndig im strengen Sinne. Sie ist jedoch vollsta\u0308ndig genug, um Widerspru\u0308che herleiten zu ko\u0308nnen (refutation completeness).</p> <p>Die Erfu\u0308llbarkeit oder Gu\u0308ltigkeit einer Formel zu beweisen ist ein ha\u0308ufiges Problem. Mit Hilfe der Wahrheitstafel ist dies mo\u0308glich, aber aufwa\u0308ndig. Eine Methode, die oft ein schnelleres Ergebnis liefert, ist die Resolution.</p> <p>Die Resolution wird fu\u0308r drei Aufgaben eingesetzt: - Beweis der Erfu\u0308llbarkeit aussagenlogischer Formeln - Beweis der Herleitbarkeit aussagenlogischer Formeln - Beweis von Tautologien</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/5.%20Aussagenlogik/Resolution/#resolvente","title":"Resolvente","text":"<p>Es seien \\(K_1\\) und \\(K_2\\) Klauseln einer aussagenlogischen Formel, die in KNF liegt, mit \\(K_1 \\neq K_2\\). Gibt es ein Literal \\(L\\), welches in \\(K_1\\) positiv und in \\(K_2\\) negativ vorkommt, dann nennt man \\(\\(R = (K_1 \\backslash \\{L\\}) \\cup (K_2 \\backslash \\{\\lnot L\\})\\)\\)Resolvente von \\(K_1\\) und \\(K_2\\). Insbesondere gibt es keine Resolvente, falls kein solches Literal existiert.</p> <p>[!warning] Achtung Es darf immer nur genau ein Literal resolviert werden!</p> <p>Die Resolvente ist nicht \u00e4quivalent zu den Ausgangsklauseln. Die Bedeutung der Resolvente liegt vielmehr darin, dass die Ausgangsklauseln nur dann\u00a0beide gleichzeitig erf\u00fcllbar\u00a0sind, wenn auch die Resolvente erf\u00fcllbar ist. Insbesondere gilt \\(\\((K_{1}\\land K_{2})\\rightarrow R\\)\\) weil \\(R\\) eine notwendige Bedingung f\u00fcr \\(K_1\\) und \\(K_2\\) ist.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/5.%20Aussagenlogik/Resolution/#erfullbarkeit-aussagenlogischer-formeln","title":"Erfu\u0308llbarkeit aussagenlogischer Formeln","text":"<p>Fu\u0308r die Klauselmenge \\(F\\) einer Formel werden alle mo\u0308glichen Resolventen ermittelt. Ist die leere Klausel in der Klauselmenge enthalten, ist die Formel unerfu\u0308llbar, ansonsten erfu\u0308llbar.</p> <p>[!example] Beispiel Resolution - \\(F = (A \\lor B) \\land (\\lnot A \\lor C) \\land (B \\lor \\lnot C) \\land \\lnot B\\) - \\(K_F = \\{ \\{ A, B \\}, \\{ \\lnot A, C \\}, \\{ B, \\lnot C \\}, \\{ \\lnot B \\} \\}\\) - \\(K_F = \\{ K_1, K_2, K_3, K_4 \\}\\)</p> <ul> <li>\\(K_5 = (K_1 \\backslash \\{ B \\}) \\cup (K_4 \\backslash \\{ \\lnot B \\}) = \\{ A \\}\\)</li> <li>\\(K_6 = (K_2 \\backslash \\{ C \\}) \\cup (K_3 \\backslash \\{ \\lnot C \\}) = \\{ \\lnot A \\land B \\}\\)</li> <li>\\(K_7 = (K_5 \\backslash \\{ A \\}) \\cup (K_6 \\backslash \\{ \\lnot A \\}) = \\{ B \\}\\)</li> <li>\\(K_8 = (K_7 \\backslash \\{ B \\}) \\cup (K_4 \\backslash \\{ \\lnot B \\}) = \\{ \\}\\)</li> </ul> <p>Da die leere Klausel in der Klauselmenge enthalten, ist die Formel unerfu\u0308llbar.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/5.%20Aussagenlogik/Resolution/#beweis-von-tautologien","title":"Beweis von Tautologien","text":"<p>Wenn eine Formelmenge \\(F\\) eine Tautologie darstellt, kann dies bewiesen werden, indem mit Hilfe der Resolution gezeigt wird, dass \\(\\lnot F\\) unerfu\u0308llbar ist.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/5.%20Aussagenlogik/Resolution/#herleitbarkeit-aussagenlogischer-formeln","title":"Herleitbarkeit aussagenlogischer Formeln","text":"<p>Um zu zeigen, dass eine Formel \\(G\\) aus einer Formel \\(F\\) hergeleitet werden kann, muss mit Hilfe der Resolution gezeigt werden, dass \\(F \\land \\lnot G\\) unerfu\u0308llbar ist.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/6.%20Pr%C3%A4dikatenlogik/Gebundenheit%20von%20Variablen/","title":"Gebundenheit von Variablen","text":"<p>Falls eine Variable mit einem Quantor verkn\u00fcpft ist, so hei\u00dft diese gebunden. Falls nicht, so hei\u00dft diese ungebunden oder auch frei.</p> <p>Kommen in einer Formel keine freien Variablen vor, so hei\u00dft diese Satz oder auch Aussage.</p> <p>[!tip] Innerhalb einer Formel kann eine Variable sowohl gebunden als auch ungebunden vorkommen!</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/6.%20Pr%C3%A4dikatenlogik/Normalformen%20%28Pr%C3%A4dikatenlogik%29/","title":"Normalformen (Pr\u00e4dikatenlogik)","text":"<p>In der Aussagenlogik haben wir bereits einige Normalformen kennen gelernt.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/6.%20Pr%C3%A4dikatenlogik/Normalformen%20%28Pr%C3%A4dikatenlogik%29/#pranexform","title":"Pr\u00e4nexform","text":"<p>Eine Formel hei\u00dft pr\u00e4nex, fall alle Quantoren au\u00dferhalb bzw. vor der eigentlichen Formel stehen.</p> <p>[!tip] Bemerkung Zu jeder Formel existiert eine \u00e4quivalente Pr\u00e4nexform.</p> <p>[!example] Beispiel Wir bringen eine Formel in Pr\u00e4nexform: \\(\\lnot (\\exists Xp(X, Y) \\lor \\forall Zq(Z)) \\land \\exists Wp(W)\\) \\(\\lnot \\exists Xp(X, Y) \\land \\lnot \\forall Zq(Z) \\land \\exists Wp(W)\\) \\(\\forall X \\lnot p(X, Y) \\land \\exists Z \\lnot q(Z) \\land \\exists Wp(W)\\) \\(\\forall X \\exists Z \\exists W(\\lnot p(X, Y) \\land \\lnot q(Z) \\land p(W))\\)</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/6.%20Pr%C3%A4dikatenlogik/Normalformen%20%28Pr%C3%A4dikatenlogik%29/#substitution","title":"Substitution","text":"<p>Wir erinnern uns: F\u00fcr Pr\u00e4dikatenlogische Formeln \\(F\\) und \\(G\\) gilt die \u00c4quivalenz \\(\\((\\forall XF \\land G) \\equiv \\forall X(F \\land G)\\)\\) nur dann, wenn \\(X\\) nicht als freie Variable in \\(G\\) vorkommt. Also w\u00e4re es nicht m\u00f6glich, in anderen F\u00e4llen eine Formel in Pr\u00e4nexform zu \u00fcberf\u00fchren!</p> <p>Also wenden wir die Substitution an. Hierbei ersetzen wir eine Variable durch eine Konstante, eine Variable oder eine Funktion ersetzen.</p> <p>[!example] Beispiel \u00c4quivalent zum obigen Beispiel: \\(\\lnot (\\exists Xp(X, Y) \\lor \\forall Zq(X, Z)) \\land \\exists Wp(W)\\) Diese Formel kann nicht in Pr\u00e4nexform \u00fcberf\u00fchrt werden. Wir substituieren: \\(F[X/U]\\) mit \\(F = \\forall Z q(X, Z)\\) Wir erhalten: \\(\\lnot (\\exists Xp(X, Y) \\lor \\forall Zq(U, Z)) \\land \\exists Wp(W)\\)</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/6.%20Pr%C3%A4dikatenlogik/Normalformen%20%28Pr%C3%A4dikatenlogik%29/#bereinigte-form","title":"Bereinigte Form","text":"<p>Eine Formel hei\u00dft bereinigt, falls keine Variablen vorkommen, die sowohl gebunden als auch ungebunden sind. Dies kann mit Substitution erreicht werden, wie im oberen Beispiel.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/6.%20Pr%C3%A4dikatenlogik/Normalformen%20%28Pr%C3%A4dikatenlogik%29/#skolemform","title":"Skolemform","text":"<p>Eine Formel hei\u00dft skolemisiert oder in Skolemform, falls sie in Pr\u00e4nexform ist und keine Existenzquantoren in der Formel vorkommen. \u00dcberfl\u00fcssige Existenzquantoren k\u00f6nnen mithilfe von Substitution entfernt werden.</p> <p>[!example] Einfaches Beispiel Gegeben sei die folgende Formel: \\(\\(\\forall X \\exists Y \\forall Z p(X, Y, Z)\\)\\) Diese Formel ist nicht skolemisiert, weil es den Existenzquantor \\(\\exists Y\\) gibt. Wir k\u00f6nnen diesen aber durch ein Funktionssymbol \\(f\\) ersetzen: \\(\\(\\forall X \\forall Z p(X, f(X), Z)\\)\\) Hierbei ist \\(f\\) von \\(X\\) abh\u00e4ngig, weil \\(\\exists Y\\) ebenfalls von \\(X\\) abh\u00e4ngig ist. Allerdings ist \\(\\exists Y\\) nicht von \\(Z\\) abh\u00e4ngig, also ist \\(f\\) auch nicht von \\(Z\\) abh\u00e4ngig.</p> <p>Falls ein Existenzquantor von keinem Allquantor abh\u00e4ngig ist, so k\u00f6nnen wir die Variable durch eine Konstante ersetzen: \\(\\(\\exists X \\forall Y \\exists Z p(X, Y, Z)\\)\\) Und wir substituieren: \\(\\(\\forall Y \\exists Z p(a, Y, Z)\\)\\)</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/6.%20Pr%C3%A4dikatenlogik/Normalformen%20%28Pr%C3%A4dikatenlogik%29/#hornklausel","title":"Hornklausel","text":"<p>Eine KNF hei\u00dft Horn-Form, falls jede Klausel der KNF h\u00f6chstens ein nicht-negiertes Literal enth\u00e4lt und alle Variablen von einem Allquantor gebunden sind. Die Klauseln dieser KNF hei\u00dfen Hornklauseln.</p> <p>[!example] Beispiel Die Formel \\(\\(\\forall X \\forall Y \\forall Z ((p(X) \\lor \\lnot q(Y) \\lor \\lnot r(Z)))\\)\\) ist in Horn-Form.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/6.%20Pr%C3%A4dikatenlogik/Pr%C3%A4dikatenlogik/","title":"Pr\u00e4dikatenlogik","text":"<p>Die Pr\u00e4dikatenlogik ist eine Erweiterung der Aussagenlogik. Im Unterschied zur Aussagenlogik macht diese aber von Quantoren gebrauch.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/6.%20Pr%C3%A4dikatenlogik/Pr%C3%A4dikatenlogik/#pradikat","title":"Pr\u00e4dikat","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/6.%20Pr%C3%A4dikatenlogik/Pr%C3%A4dikatenlogik/#definition","title":"Definition","text":"<p>Als Pr\u00e4dikat bezeichnet man den Teil einer atomaren Formel, der wahrheitsfunktional ist. Ein Pr\u00e4dikat hat dabei beliebig viele Argumentstellen.</p> <p>Spezifischer: Ein Pr\u00e4dikat ist eine Abbildung \\(p:\\{ 0, 1 \\}^n \\to \\{ 0, 1 \\}\\) f\u00fcr ein beliebiges \\(n \\in \\mathbb{N}_0\\).</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/6.%20Pr%C3%A4dikatenlogik/Pr%C3%A4dikatenlogik/#pradikatenlogik-erster-stufe","title":"Pr\u00e4dikatenlogik erster Stufe","text":"<p>Die Pr\u00e4dikatenlogik erster Stufe l\u00e4sst sich mittels der Zermello-Fraenkel -Mengenlehre formulieren. Die axiomatischen Definition dessen ist f\u00fcr uns zun\u00e4chst \u00fcberfl\u00fcssig und wird hier nicht behandelt.</p> <p>Wir beschreiben hier die verwendete Sprache auf rein syntaktische Weise, das hei\u00dft, wir legen die betrachteten Zeichenketten, die wir Ausdr\u00fccke der Sprache nennen wollen, ohne Bezug auf ihre Bedeutung fest.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/6.%20Pr%C3%A4dikatenlogik/Pr%C3%A4dikatenlogik/#symbole","title":"Symbole","text":"<p>Eine Sprache erster Stufe wird aus folgenden Symbolen aufgebaut - logische Symbole:     - Quantoren: \\(\\forall\\), \\(\\exists\\)     - Junktoren: \\(\\land\\), \\(\\lor\\), \\(\\lnot\\), \\(\\rightarrow\\), \\(\\leftrightarrow\\)     - technische Zeichen: \\((,)\\), \\(\\equiv\\) - Variablensymbole: \\(v_{0}, v_{1}, v_{2}, ...\\) - eine (m\u00f6glicherweise leere) Menge\u00a0\\(\\mathcal {C}\\)\u00a0von Konstantensymbolen - eine (m\u00f6glicherweise leere) Menge\u00a0\\(\\mathcal {F}\\)\u00a0von Funktionssymbolen - eine (m\u00f6glicherweise leere) Menge\u00a0\\(\\mathcal {R}\\)\u00a0von Relationssymbolen</p> <p>Unterschiedliche Sprachen unterscheiden sich in den Symbolen \\(\\mathcal {C}\\), \\(\\mathcal {F}\\) und \\(\\mathcal {R}\\), die man \u00fcblicherweise als Symbolmenge \\(S\\) zusammenfasst. Diese Menge nennt sich die Signatur der Sprache.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/6.%20Pr%C3%A4dikatenlogik/Pr%C3%A4dikatenlogik/#terme","title":"Terme","text":"<p>Die nach folgenden Regeln aufgebaute Zeichenketten hei\u00dfen Terme: - Ist \\(v\\) ein Variablensymbol, so ist \\(v\\) ein Term - Ist \\(c\\) ein Konstantensymbol, so ist \\(c\\) ein Term - Ist \\(f\\) ein \\(n\\)-stelliges Funktionssymbol und \\(t_{1}, t_{2}, ..., t_n\\) Terme, so ist \\(ft_1t_2...t_n\\) ein Term</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/6.%20Pr%C3%A4dikatenlogik/Pr%C3%A4dikatenlogik/#formeln","title":"Formeln","text":"<p>Wir erkl\u00e4ren nun durch Bildungsgesetze, welche Zeichenketten wir als Formeln der Sprache ansehen wollen (vergleich: Aussagenlogik).</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/6.%20Pr%C3%A4dikatenlogik/Pr%C3%A4dikatenlogik/#atomare-formeln","title":"Atomare Formeln","text":"<ul> <li>Sind \\(t_1\\) und \\(t_2\\) Terme, so ist \\(t_{1}\\equiv t_2\\) eine Formel</li> <li>Ist \\(R\\) ein \\(n\\)-stelliges Relationssymbol und \\(t_{1}, t_{2}, ..., t_n\\) Terme, so ist \\(Rt_1t_2...t_n\\) eine Formel</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/6.%20Pr%C3%A4dikatenlogik/Pr%C3%A4dikatenlogik/#zusammengesetzte-formeln","title":"Zusammengesetzte Formeln","text":"<ul> <li>Ist \\(\\varphi\\) eine Formel, so ist \\(\\lnot \\varphi\\) eine Formel</li> <li>Sind \\(\\varphi\\) und \\(\\psi\\) Formeln und \\(K\\) eine Konjunktion, so ist \\(\\varphi K \\psi\\) eine Formel</li> <li>Ist \\(\\varphi\\) eine Formel, \\(Q\\) ein Quantor und \\(x\\) eine Variable, so ist \\(Qx\\varphi\\) eine Formel</li> </ul> <p>Damit sind alle Formeln unserer Sprache festgelegt.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/6.%20Pr%C3%A4dikatenlogik/Quantoren/","title":"Quantoren","text":"<p>Oft mo\u0308chte man fu\u0308r bestimmte Aussagen eine Entscheidung treffen, ob sie allgemeingu\u0308ltig oder erfu\u0308llbar sind. Um dies zu ermo\u0308glich, werden in der Pra\u0308dikatenlogik sogenannte Quantoren eingefu\u0308hrt.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/6.%20Pr%C3%A4dikatenlogik/Quantoren/#quantoren","title":"Quantoren","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Theoretische%20Informatik/6.%20Pr%C3%A4dikatenlogik/Quantoren/#definition","title":"Definition","text":"<p>Ein Quantor ist ein Operator der Pr\u00e4dikatenlogik. - Allquantor: \\(\\forall\\) (\"f\u00fcr alle\") - Existenzquantor: \\(\\exists\\) (\"es existiert\")</p> <p>[!example]- Beispiel - \\(\\forall X(X \\in G; p(X))\\) (\"F\u00fcr alle Elemente \\(X\\) der Menge \\(G\\) gilt \\(p(X)\\)\") - \\(\\exists X(X \\in G; p(X))\\) (\"Es existiert ein Element \\(X\\) der Menge \\(G\\) sodass \\(p(X)\\) gilt\")</p> <p>Kurzform: Ist die Grundmenge klar, so kann man auch kurz \\(\\forall X p(X)\\) und \\(\\exists X p(X)\\) schreiben.</p> <p>[!caution] Kommutativit\u00e4t Gleiche Quantoren sind kommutativ. Unterschiedliche Quantoren sind nicht kommutativ!</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Barrierefreiheit/Barrieren/","title":"BarrierFree","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Barrierefreiheit/Barrieren/#einschrankungen","title":"Einschr\u00e4nkungen","text":"<ul> <li>Barrieren verhindern Zugang ins Internet f\u00fcr Menschen mit Einschr\u00e4nkungen</li> <li>Einschr\u00e4nkungen k\u00f6nnen jeden treffen:<ul> <li>Permanent: Behinderung</li> <li>Tempor\u00e4r: Erkrankung / Verletzung</li> <li>Situativ: abh\u00e4ngig vom Kontext (z.B. laute Umgebung, beim mobilen Arbeiten, \u2026)</li> </ul> </li> <li>Beginnt bei 2. Konzeption</li> </ul> <p>[!info] Barrierefreies Webdesign Unabh\u00e4ngig von der k\u00f6rperlichen, mentalen oder technischen Situation m\u00fcssen Funktionen und Informationen erreichbar sein</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Barrierefreiheit/Standardisierung/","title":"BarrierFree","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Barrierefreiheit/Standardisierung/#web-accessibility-initiative-wai","title":"Web Accessibility Initiative (WAI)","text":"<ul> <li>Bereich innerhalb des W3C</li> <li>Besch\u00e4ftigt sich seit 1997 mit barrierefreiem Zugang zum Web und seinen Inhalten</li> <li>Web Content Accessibility Guidelines (WCAG)<ul> <li>Richtlinien f\u00fcr barrierefreie Webinhalte</li> <li>Definieren Anforderungen bzgl. Webseitenprogrammierung, Inhaltsarchitektur, Layout-Grundlagen und Technik-Verwendung</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Barrierefreiheit/Standardisierung/#wcag-21","title":"WCAG 2.1","text":"<ul> <li>Web Content Accessibility Guidelines</li> <li>Richtlinien f\u00fcr Barrierefreies Webdesign<ul> <li>Enth\u00e4lt 13 Richtlinien</li> <li>Unterteilt in 4 Prinzipien</li> <li>Bewertet nach 78 Erfolgskriterien (testbare Anforderungen)</li> <li>Eingeteilt in 3 Konformit\u00e4tsstufen (Level A, AA, AAA)</li> </ul> </li> <li>Vier Prinzipien:<ul> <li>Wahrnehmbar</li> <li>Bedienbar</li> <li>Verst\u00e4ndlich</li> <li>Robust</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Barrierefreiheit/Standardisierung/#konformitatsstufen","title":"Konformit\u00e4tsstufen","text":"<ul> <li>Level A: 30 Kriterien<ul> <li>Mindestanforderungen f\u00fcr Barrierefreiheit</li> </ul> </li> <li>Level AA: 20 Kriterien<ul> <li>Mindestanforderungen nach EU-Norm</li> </ul> </li> <li>Level AAA: 28 Kriterien<ul> <li>Maximum des technisch M\u00f6glichen</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Barrierefreiheit/Standardisierung/#prinzip-wahrnehmbarkeit","title":"Prinzip Wahrnehmbarkeit","text":"<ul> <li>Textalternativen:<ul> <li>Textuelle Beschreibungen f\u00fcr alle Nicht-Text-Inhalte angeben (z.B. Bilder)</li> </ul> </li> <li>Zeit-basierte Medien:<ul> <li>Alternativen f\u00fcr zeit-basierte Medien zur Verf\u00fcgung stellen (z.B. Untertitel bei Videos)</li> </ul> </li> <li>Anpassbar:<ul> <li>Inhalte k\u00f6nnen auf verschiedenen Arten dargestellt werden (z.B. einfacheres Layout)</li> </ul> </li> <li>Unterscheidbar:<ul> <li>Inhalte k\u00f6nnen leichter wahrgenommen werden (z.B. durch hohe Kontraste)</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Barrierefreiheit/Standardisierung/#prinzip-bedienbarkeit","title":"Prinzip Bedienbarkeit","text":"<ul> <li>Funktionen per Tastatur bedienbar</li> <li>Gen\u00fcgend Zeit zum Lesen &amp; Nutzen der Inhalte</li> <li>Trigger f\u00fcr (z.B. epileptische) Anf\u00e4lle vermeiden</li> <li>Unterst\u00fctzung bei Navigation &amp; suchen von Inhalten</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Barrierefreiheit/Standardisierung/#prinzip-verstandlichkeit","title":"Prinzip Verst\u00e4ndlichkeit","text":"<ul> <li>Lesbar: Verst\u00e4ndliche Inhalte (Darstellung, Struktur, Formulierung)</li> <li>Vorhersehbar: Aussehen &amp; Funktionsweise (Konventionen)</li> <li>Hilfestellung bei Eingabe: Fehlervermeidung &amp; Korrektur</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Barrierefreiheit/Standardisierung/#prinzip-robustheit","title":"Prinzip Robustheit","text":"<ul> <li>Kompatibilit\u00e4t: Aktuelle &amp; Zuk\u00fcnftige Technologien</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Barrierefreiheit/Standardisierung/#eu-norm-en-301-549","title":"EU-Norm EN 301 549","text":"<ul> <li>Europ\u00e4ischer Standard zur barrierefreien Gestaltung von digitalen Inhalten</li> <li>Erf\u00fcllung der 50 Erfolgskriterien der WCAG 2.1 auf Stufe AA</li> <li>Umsetzung in Deutschland:<ul> <li>Behindertengleichstellungsgesetz (BGG)</li> <li>Barrierefreie Informationstechnik-Verordnung (BITV 2.0)</li> <li>Gleichstellungsgesetze &amp; IT-Verordnungen der L\u00e4nder</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Barrierefreiheit/Standardisierung/#bitv-20","title":"BITV 2.0","text":"<ul> <li>Erweiterung gegen\u00fcber EU-Normen<ul> <li>Anwendung des Stands der Technik, wenn keine Vorgabe in EU-Norm existiert</li> <li>Zentrale Navigation / Einstiegsseiten sowie Formulare und interaktive Prozesse nach Level AAA</li> <li>Startseite muss wesentliche Informationen in Geb\u00e4rden- und leichter Sprache enthalten</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Barrierefreiheit/Standardisierung/#aria","title":"ARIA","text":"<ul> <li>Accessible Rich Internet Applications</li> <li>Ziel: Inhalte f\u00fcr Technologien (z.B. Screenreader) zug\u00e4nglich machen</li> </ul> <p>[!tip] Don't use ARIA! Nur verwenden wenn HTML-Elemente kein Accessibility-Support bieten. Besser: Semantische HTML-Elemente.</p> <p>[!tip] No ARIA is better than bad ARIA Keine Widerspr\u00fcche erzeugen! Attribute korrekt verwenden. Keine falschen &amp; redundanten Rollen. - Schlecht: <code>&lt;footer role=\"button\"&gt;...</code> - Besser: <code>&lt;footer&gt;&lt;button&gt;...</code></p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Geschichte%20des%20Internets/Funktionsweise%20des%20WWW/","title":"Standards Im WWW","text":"<ul> <li> <p>Kernstandards</p> <ul> <li>HTTP als freies Protokoll</li> <li>HTML als Auszeichnungssprache</li> <li>URI als eindeutige Bezeichnung einer Ressource</li> </ul> </li> <li> <p>Sp\u00e4tere Standards</p> <ul> <li>CSS zur Darstellung (\u201dVersch\u00f6nerung\u201d)</li> <li>HTTPS zur Verschl\u00fcsselung des Datentransfers</li> <li>DOM als Schnittstelle f\u00fcr Skriptsprachen</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Geschichte%20des%20Internets/Funktionsweise%20des%20WWW/#uri","title":"URI","text":"<ul> <li>Uniform Resource Identifier</li> <li>Identifiziert Ressourcen im Internet</li> <li>Aufbau:<ul> <li>Syntax: <code>&lt;scheme&gt;:&lt;scheme-specific-part&gt;</code></li> <li>Schema: Definiert Kontext</li> <li>Schema-spezifischer Teil: Enth\u00e4lt angaben zur Ressource</li> </ul> </li> <li>Beispiele:<ul> <li>https://de.wikipedia.org/</li> <li>tel:+1-816-555-1212</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Geschichte%20des%20Internets/Funktionsweise%20des%20WWW/#url","title":"URL","text":"<ul> <li>Uniform Resource Locator</li> <li>H\u00e4ufigste Art von URI</li> <li>Identifiziert + Lokalisiert Ressourcen im Internet</li> <li>Bekannte Schemata: <code>http</code>, <code>https</code>, <code>mailto</code>, <code>file</code></li> <li>Beispiele: <ul> <li>http://example.com/foo/bar.html</li> <li>file://system/fonts/</li> <li>mailto:tim@cern.ch</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Geschichte%20des%20Internets/Funktionsweise%20des%20WWW/#urn","title":"URN","text":"<ul> <li>Uniform Resource Name</li> <li>Benennt Ressource eindeutig (unabh\u00e4ngig vom Standort)</li> <li>Schema ist immer <code>urn</code></li> <li>Beispiel:<ul> <li>urn:ISBN:978-0062515872</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Geschichte%20des%20Internets/Funktionsweise%20des%20WWW/#tcpip-referenzmodell","title":"TCP/IP Referenzmodell","text":"<p>[ - Rahmen f\u00fcr Entwicklung von Netzwerkprotokollen - Vier Schichten:     1. Anwendungsschicht     2. Transportschicht     3. Netzwerkschicht     4. Verbindingsschicht - Grundlage f\u00fcr Web-Technologien: Client-Server Modell - Datenaustausch muss \u00fcber Protokolle geregelt werden</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Geschichte%20des%20Internets/Funktionsweise%20des%20WWW/#http","title":"HTTP","text":"<ul> <li>HyperText Transfer Protocol</li> <li>Protokoll zur \u00dcbertragung von Daten</li> <li>Frage-Antwort Schema<ul> <li>Client &amp; Server tauschen Nachrichten aus</li> <li>Request: Client sendet Anfrage an Server</li> <li>Response: Server Antwortet auf Anfrage</li> </ul> </li> <li>Zwei wichtige Anfragemethoden<ul> <li><code>GET</code>: Client empf\u00e4ngt Daten vom Server</li> <li><code>POST</code>: Client sendet Nachrichten am Server</li> </ul> </li> <li>Nachrichten bestehen aus Request-/Status-Line, Header (Metadaten), Body</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Geschichte%20des%20Internets/Funktionsweise%20des%20WWW/#tcp","title":"TCP","text":"<ul> <li>Transmission Control Protocol</li> <li>Kommunikationsprotokoll f\u00fcr Internet &amp; Intranet</li> <li>Daten werden als Pakete \u00fcbertragen</li> <li>Pakete kommen vollst\u00e4ndig &amp; in richtiger Reihenfolge an</li> <li>Verbindung eindeutig identifizierbar durch zwei Endpunkte<ul> <li>Endpunkt: Geordnetes Paar aus IP &amp; Port (= Socket)</li> <li>TCP-Verbindung: lokaler Rechner, lokaler Port, entfernter Rechner, entfernter Port</li> </ul> </li> <li>Eigenschaften:<ul> <li>zuverl\u00e4ssig, verbindungsorientiert</li> <li>Daten\u00fcbertragung in beide Richtungen gleichzeitig m\u00f6glich</li> <li>Datenverluste werden erkannt + automatisch behoben</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Geschichte%20des%20Internets/Funktionsweise%20des%20WWW/#https","title":"HTTPS","text":"<ul> <li>HyperText Transfer Protocol Secure</li> <li>Erweiterung von HTTP<ul> <li>Daten werden bei der \u00dcbertragung verschl\u00fcsselt</li> </ul> </li> <li>Erweitert TCP um TLS (Transport Layer Security)</li> <li>Mittels URI-Schema genutzt <ul> <li>Auch andere ungesicherte Protokolle k\u00f6nnen abgesichert werden</li> </ul> </li> <li>Ziele:<ul> <li>Vertraulichkeit: Verschl\u00fcsselung der Daten (kein Mitlesen m\u00f6glich)</li> <li>Integrit\u00e4t: Daten w\u00e4hrend \u00dcbertragung unver\u00e4nderbar</li> <li>Authentizit\u00e4t: Kommunikationspartner \u00fcber Zertifikate verifiziert</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Geschichte%20des%20Internets/Funktionsweise%20des%20WWW/#ip","title":"IP","text":"<ul> <li>Internet Protocol</li> <li>Definiert, wie Datenpakete erstellt, adressiert und versendet werden</li> <li>\u00d6ffentliche IP-Addressen weltweit eindeutig \u2192 Vergabe durch IANA</li> <li>Gruppierung von Rechnern innerhalb eines Netzwerks in logische Einheiten durch IP-Addressen</li> <li>IPv4<ul> <li>c.a. 4 Mrd. unterschiedliche Addressen \u2192 Addressraum zu klein</li> <li>seit 2011 nichts mehr frei</li> <li>Beispiel: <code>188.184.9.235</code></li> </ul> </li> <li>IPv6<ul> <li>c.a. 340 Sextillionen (\\(10^{38}\\)) unterschiedliche Addressen \u2192 Keine Konflikte mehr</li> <li>Beispiel: <code>2607:f8b0:4004:836::2003</code></li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Geschichte%20des%20Internets/Funktionsweise%20des%20WWW/#dns","title":"DNS","text":"<ul> <li>Domain Name System</li> <li>Problem: IP-Adressen schwer merkbar</li> <li>DNS wandelt Webadressen in IP-Adressen um</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Geschichte%20des%20Internets/Ursprung%20des%20Internets/","title":"Geschichte des Internets","text":"<p>[!tip] ARPA Die Advanced Research Projects Agency (ARPA), wurde 1958 w\u00e4hrend des Kalten Krieges mit dem Ziel gegr\u00fcndet, ein dezentralisiertes Computernetzwerk zu schaffen. Dieses Netzwerk sollte so gestaltet sein, dass es auch dann noch funktionieren w\u00fcrde, wenn Teile davon zerst\u00f6rt w\u00fcrden, was im Kontext des Kalten Krieges eine wichtige \u00dcberlegung war. Dieses Netzwerk wurde ARPAnet genannt.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Geschichte%20des%20Internets/Ursprung%20des%20Internets/#entwicklung-des-arpanet","title":"Entwicklung des ARPAnet","text":"<pre><code>[line-2]\n+ 1957\n+ Kalter Krieg\n+\n\n+ 1958\n+ Gr\u00fcndung ARPA\n+ - heute: DARPA (= Defense)\n\n+ 1968\n+ Konzept zur Paketvermittlung f\u00fcr Kommunikationsbotschaften\n+ - Grundlage f\u00fcr heutige Datenkommunikation\n\n+ 1969\n+ Verwirklichung ARPAnet\n+ - 4 Knotenpunkte (4 Universit\u00e4ten)\n- Wird zun\u00e4chst f\u00fcr forschungszwecken genutzt\n</code></pre>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Geschichte%20des%20Internets/Ursprung%20des%20Internets/#entwicklung-des-internet","title":"Entwicklung des Internet","text":"<pre><code>[line-2]\n+ 1971\n+ Vorstellung Email Nachrichtensystem\n+\n\n+ 1972\n+ Entwicklung File Trasfer Protocol (FTP)\n+\n\n+ 1973\n+ Entwicklung Transmission Control Protocol (TCP)\n+\n\n+ 1981\n+ Spezifizierung Internetprotokolle (TCP, IPv4, ICMP)\n+ \n</code></pre> <ul> <li>Entwicklung des ARPAnet<ul> <li>1957: Kalter Krieg</li> <li>1958: Gr\u00fcndung ARPA<ul> <li>heute: DARPA (= Defense)</li> </ul> </li> <li>1968: Konzept zur Paketvermittlung f\u00fcr Kommunikationsbotschaften<ul> <li>Grundlage f\u00fcr heutige Datenkommunikation</li> </ul> </li> <li>1969: Verwirklichung ARPAnet<ul> <li>4 Knotenpunkte (an 4 Universit\u00e4ten)</li> <li>Wird zun\u00e4chst f\u00fcr Forschungszwecken genutzt</li> </ul> </li> </ul> </li> <li>Entwicklung des Internets<ul> <li>1971: Vorstellung Email Nachrichtensystem</li> <li>1972: Entwicklung File Transfer Protocol (FTP)</li> <li>1973: Entwicklung Transmission Control Protocol (TCP)</li> <li>1981: Spezifizierung Internetprotokolle (TCP, IPv4, ICMP)</li> <li>1981-1983: Umstellung ARPAnet auf neues Internet-Protokolle<ul> <li>Name \u201cInternet\u201d beginnt sich zu durchsetzen</li> </ul> </li> <li>Folgejahre: Verbreitung Internet in USA</li> <li>1984: Entwicklung Domain Name System (DNS)</li> <li>1989: Erster Entwurf f\u00fcr World Wide Web (WWW)</li> <li>1990: Freigabe des Internets auch au\u00dferhalb der USA</li> <li>1990: ARPAnet wird au\u00dfer betrieb genommen</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Geschichte%20des%20Internets/Ursprung%20des%20Internets/#geschichte-des-www","title":"Geschichte des WWW","text":"\ud83d\udca1 Das *World Wide Web* (**WWW**) ist ein Informationssystem, das Dokumente und andere Webressourcen, die durch URLs identifiziert und \u00fcber das Internet verbunden sind, verkn\u00fcpft und zug\u00e4nglich macht. Es wurde 1989 von dem britischen Informatiker **Tim Berners-Lee** erfunden. Das WWW ist nicht dasselbe wie das Internet; es ist eine der Dienstleistungen, die im Internet verf\u00fcgbar sind.   <ul> <li>Entwicklung des WWW<ul> <li>Problem am CERN: unterschiedliche Netzwerkstruktur in Schweiz &amp; Frankreich<ul> <li>\u2192 Kommunikation erschwert</li> </ul> </li> <li>1989: Erster Entwurf WWW von Tim Berners-Lee</li> <li>1990: Vorstellung WWW beim CERN-Direktorium</li> <li>1990: Erste Website (von Tim Berners-Lee)</li> <li>1991: WWW-Projekt \u00f6ffentlich &amp; weltweit verf\u00fcgbar (von Tim Berners-Lee)</li> <li>1993: WWW f\u00fcr \u00d6ffentlichkeit kostenlos verf\u00fcgbar (von CERN-Direktorium)</li> <li>1994: World Wide Web Consortium (W3C) zur Standardisierung von Web-Techniken</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/Gestaltungsgesetze/","title":"Gesetz der \u00c4hnlichkeit","text":"<ul> <li>Zusammengeh\u00f6rige Elemente durch \u00c4hnlichkeit erkannt<ul> <li>Farbe, Form, Textur, Position, Orientierung, Gr\u00f6\u00dfe, \u2026</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/Gestaltungsgesetze/#gesetz-der-nahe","title":"Gesetz der N\u00e4he","text":"<ul> <li>Elemente mit geringem Abstand werden als zusammengeh\u00f6rig angenommen</li> <li>Wei\u00dfraum \u2192 Orientierung &amp; Ordnung</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/Gestaltungsgesetze/#gesetz-der-pragnanz","title":"Gesetz der Pr\u00e4gnanz","text":"<ul> <li>Elemente mit bestimmten Merkmalen heben sich von anderen Elementen ab<ul> <li>Farbe, Gr\u00f6\u00dfe, Form, \u2026</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/Gestaltungsgesetze/#gesetz-der-geschlossenheit","title":"Gesetz der Geschlossenheit","text":"<ul> <li>Objekte werden m\u00f6glichst als Einheit wahrgenommen<ul> <li>Einfache, bekannte Formen werden schneller identifiziert</li> <li>Anwendung: Umrandungen, Farben, \u2026</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/Gestaltungsgesetze/#gesetz-der-kontinuitat","title":"Gesetz der Kontinuit\u00e4t","text":"<ul> <li>Einzelne Elemente so gruppieren, dass sie die erdachte Linie / Kurve im Sinne der bisherigen Linienf\u00fchrung fortsetzen</li> <li>Anwendung bei komplexen Navigationen zur Gliederung der einzelnen Hierarchiestufen<ul> <li>Inhalte auf der gleichen Fluchtlinie geh\u00f6ren zur gleichen logischen Ebene</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/Gestaltungsgesetze/#gesetz-des-gemeinsamen-schicksals","title":"Gesetz des gemeinsamen Schicksals","text":"<ul> <li>Gleiche Interaktion = Zusammengeh\u00f6rig<ul> <li>Animationen, Ger\u00e4usche, \u2026</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/Gestaltungsgesetze/#gesetz-der-gemeinsamen-regionen","title":"Gesetz der gemeinsamen Regionen","text":"<ul> <li>Elemente in einer Region \u2192 Zusammengeh\u00f6rig<ul> <li>Region durch Farbe, Wei\u00dfraum, Formen, Contourlinien, \u2026</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/Gestaltungsgesetze/#gesetz-der-verbundenheit","title":"Gesetz der Verbundenheit","text":"<ul> <li>Miteinander verbundene Formen werden als Einheit wahrgenommen</li> <li>Kann andere Gestaltgesetze (z.B. N\u00e4he, \u00c4hnlichkeit) \u00fcbersteuern</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/ISO-Normen/","title":"DIN EN ISO 9241","text":"<ul> <li>Internationaler Standard f\u00fcr Mensch-Computer-Interaktion</li> <li>\"Ergonomie der Mensch-System-Interaktion\" Normenreihe</li> <li>Anforderungen an Umgebung, Hardware und Software</li> <li>Wichtige Teile f\u00fcr Website-Entwicklung: Teil 11-16, 110, 129, 143</li> <li>Gestaltungsrichtlinien f\u00fcr WWW-Benutzerschnittstellen: Teil 151</li> <li>Gestaltungsprozess f\u00fcr nutzbare interaktive Systeme: Teil 210</li> <li>Weitere Normen: ISO 14915, ISO 25000</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/ISO-Normen/#iso-9241-210-human-centered-design-process","title":"ISO 9241-210: Human-centered design process","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/ISO-Normen/#user-centered-design","title":"User-Centered Design","text":"<ul> <li>Fokussiert auf Benutzerbed\u00fcrfnisse und -erwartungen</li> <li>Nutzt User-Feedback und -daten zur Verbesserung der Website</li> <li>Priorisiert Benutzerfreundlichkeit und intuitive Navigation</li> <li>Umfasst st\u00e4ndige Tests und Optimierung der Benutzererfahrung</li> <li>Beinhaltet die Entwicklung einer ansprechenden und effektiven Benutzeroberfl\u00e4che</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/ISO-Normen/#user-interface","title":"User Interface","text":"<ul> <li>Benutzerschnittstelle</li> <li>UI-Design: Gestaltung der grafischen Nutzeroberfl\u00e4che</li> <li>Wichtige Allgemeine Richtlinien:<ul> <li>Google Material Design</li> <li>Apple Human Interface Guidelines</li> <li>Microsoft Universal Platform Design</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/ISO-Normen/#usability","title":"Usability","text":"<ul> <li>ISO 9241-11 (2018): Gebrauchstauglichkeit eines Produkts <p>Ausma\u00df, in dem ein Produkt / System / Dienstleistung durch bestimmte Benutzer in einem bestimmten Nutzungskontext genutzt werden kann, um bestimmte Ziele effektiv, effizient und zufriedenstellend zu erreichen</p> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/ISO-Normen/#user-experience","title":"User Experience","text":"<ul> <li> <p>ISO 9241-210 (2011): Gesamtes Benutzererlebnis bei der Verwendung eines Produkts</p> <p>Wahrnehmungen und Reaktionen einer Person, die aus der tats\u00e4chlichen und / oder der erwarteten Benutzung eines Produkts / Systems / Dienstleistung resultieren</p> </li> <li> <p>Gute UX befriedigt individuelle Bed\u00fcrfnisse des Nutzers</p> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/ISO-Normen/#ux-pyramid-of-needs","title":"UX Pyramid of Needs","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/ISO-Normen/#4-functional","title":"4. Functional","text":"<ul> <li>Produkt muss sein, was der Nutzer erwartet</li> <li>Zudem: Produkt soll barrierefrei sein</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/ISO-Normen/#3-reliable","title":"3. Reliable","text":"<ul> <li>Produkt funktioniert akkurat und konsistent</li> <li>Produkt muss zuverl\u00e4sslich sein</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/ISO-Normen/#2-usable","title":"2. Usable","text":"<ul> <li>Produkt soll einfach und intuitiv sein</li> <li>Nutzer sollen mit dem Produkt schnell Ziele erreichen k\u00f6nnen</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/ISO-Normen/#1-pleasurable","title":"1. Pleasurable","text":"<ul> <li>Produkt soll \u00e4sthetisch sein (gutes UI)</li> <li>Produkt soll bei der Nutzung positive Emotionen hervorrufen</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/ISO-Normen/#jakob-nielsens-10-usability-heuristics","title":"Jakob Nielsen\u2019s 10 Usability Heuristics","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/ISO-Normen/#1-visibility-of-system-status","title":"1. Visibility of system status","text":"<p>Keep users informed about what\u2019s happening through appropriate feedback within a reasonable time.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/ISO-Normen/#2-match-between-system-and-the-real-world","title":"2. Match Between System and the Real World","text":"<p>The system should speak the users\u2019 language, with words, phrases, and concepts familiar to the user, rather than system-oriented terms.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/ISO-Normen/#3-user-control-and-freedom","title":"3. User Control and Freedom","text":"<p>Allow users to easily navigate and exit situations, such as providing a \u201cCancel\u201d or \u201cGo Back\u201d option during a multi-step process.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/ISO-Normen/#4-consistency-and-standards","title":"4. Consistency and Standards","text":"<p>Follow consistent conventions and design patterns throughout your interface.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/ISO-Normen/#5-error-prevention","title":"5. Error Prevention","text":"<p>Implement safeguards to prevent errors, such as confirmation dialogs before critical actions like deleting data.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/ISO-Normen/#6-recognition-rather-than-recall","title":"6. Recognition Rather Than Recall","text":"<p>Make information, options, and actions visible and easily accessible.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/ISO-Normen/#7-flexibility-and-efficiency-of-use","title":"7. Flexibility and Efficiency of Use","text":"<p>Cater to both novice and expert users. Offer shortcuts and advanced features for experienced users while keeping basic functions simple for beginners.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/ISO-Normen/#8-aesthetic-and-minimalist-design","title":"8. Aesthetic and Minimalist Design","text":"<p>Strive for a clean and minimalist design with only essential elements to reduce cognitive load and visual clutter.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/ISO-Normen/#9-help-users-recognize-diagnose-and-recover-from-errors","title":"9. Help Users Recognize, Diagnose, and Recover from Errors","text":"<p>Clearly communicate error messages, their causes, and provide guidance on how to recover from them.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/ISO-Normen/#10-help-and-documentation","title":"10. Help and Documentation","text":"<p>Provide help and documentation where necessary. However, it should be designed to be unnecessary.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/Komponenten%20des%20Webdesigns/","title":"Farbmodelle und -systeme","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/Komponenten%20des%20Webdesigns/#rgb-additive-farbmischung","title":"RGB (additive Farbmischung)","text":"<ul> <li>Mischung von farbigem Licht</li> <li>Dre Grundfarben: Rot, Gr\u00fcn, Blau</li> <li>F\u00fcr Webdesign relevant</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/Komponenten%20des%20Webdesigns/#cmyk-subtraktive-farbmischung","title":"CMYK (subtraktive Farbmischung)","text":"<ul> <li>Mischung von Farbstoffen</li> <li>Drei Grundfarben: Cyan, Magenta, Gelb</li> <li>F\u00fcr Drucker relevant</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/Komponenten%20des%20Webdesigns/#farbeigenschaften","title":"Farbeigenschaften","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/Komponenten%20des%20Webdesigns/#hue-farbton","title":"Hue (Farbton)","text":"<ul> <li>Ton im Farbkreis (Gelb, Rot, Blau)</li> <li>Prinzipielle Einordnung</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/Komponenten%20des%20Webdesigns/#saturation-sattigung","title":"Saturation (S\u00e4ttigung)","text":"<ul> <li>Buntheit einer Farbe (\u201dLeuchtkraft\u201d)</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/Komponenten%20des%20Webdesigns/#brightness-valuehelligkeit","title":"Brightness / Value(Helligkeit)","text":"<ul> <li>Helligkeit der Farbe</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/Komponenten%20des%20Webdesigns/#farbdefinition","title":"Farbdefinition","text":"<ul> <li>Farbdefinition nach RGB-Farbsystem als Hex-Werte<ul> <li># RRGGBB</li> </ul> </li> <li>Transparenz via Alpha-Kanal (RGBA)<ul> <li># RRGGBBAA</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/Komponenten%20des%20Webdesigns/#farbwirkung","title":"Farbwirkung","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/Komponenten%20des%20Webdesigns/#farbkontraste","title":"Farbkontraste","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/Komponenten%20des%20Webdesigns/#farbe-an-sich","title":"Farbe-an-sich","text":"<p>\u2026</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/Komponenten%20des%20Webdesigns/#typographie","title":"Typographie","text":"<ul> <li>Schriftart, Schriftgestaltung, Lesbarkeit</li> <li>Gute Typographie \u2192 Daten gut Lesbar</li> <li>Emotionale Wahrnehmung</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/Medienpsychologie/","title":"Wahrnehmung","text":"<ul> <li>Informationen werden dort gesucht, wo sie vermutet werden<ul> <li>Basierend auf Erfahrungen, Konventionen</li> </ul> </li> <li>Designkonventionen befolgen</li> <li>Chunking: Informationen werden in H\u00e4ppchen aufgenommen<ul> <li>Max. 5-7 Objekte k\u00f6nnen simultan erfasst werden</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Grundlagen%20der%20Mediengestaltung/Medienpsychologie/#reiz-reaktions-muster","title":"Reiz-Reaktions-Muster","text":"<ul> <li>Reziprozit\u00e4t: Prinzip der Gegenseitigkeit \u2192 Geschenk vor Forderung<ul> <li>Beispiel: Gratis Demo-Version anbieten</li> </ul> </li> <li>Verbindlichkeit &amp; Konsistenz: Konsistente Entscheidungen in Folge</li> <li>Soziale Bew\u00e4hrtheit: Verhalten orientiert sich an sozialer Umgebung<ul> <li>Beispiel: Feedback, Bewertungen, \u2026</li> </ul> </li> <li>Fachliche Authorit\u00e4t zeigen<ul> <li>Beispiel: Fachvortr\u00e4ge, Publikationen, \u2026</li> </ul> </li> <li>Sympathisch wirken \u2192 Vertrauen<ul> <li>Beispiel: Authentische Fotos</li> </ul> </li> <li>Verknappung: Zeitliche / Materielle Grenze setzen<ul> <li>Beispiel: \u201cNur noch 4 auf lager\u201d, \u201cNur noch heute verf\u00fcgbar\u201d, \u2026</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Phasen%20der%20Webseiten-Erstellung/1.%20Vorbereitung/","title":"Analyse","text":"<ul> <li>Ggf. Briefing durch Auftraggeber</li> <li>Anforderungen definieren: Ziele, Zielgruppen, Personas, Funktionen, Wirkung, \u2026</li> <li>Rahmenbedingungen abstecken: Setting, Zeitrahmen, Budget, \u2026</li> <li>Wettbewerb vergleichen: Abgrenzung, Hervorhebung, \u2026</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Phasen%20der%20Webseiten-Erstellung/1.%20Vorbereitung/#grobentwurf","title":"Grobentwurf","text":"<ul> <li>Navigationsstruktur \u00fcberlegen</li> <li>Anforderungen an Design, Content, Technik festlegen</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Phasen%20der%20Webseiten-Erstellung/1.%20Vorbereitung/#ziele-erkennen-diskutieren","title":"Ziele erkennen &amp; diskutieren","text":"<ul> <li>Stichwortartige Beschreibung</li> <li>Ziele mit SMART-Methode setzen<ul> <li>Spezifisch: Ist das Ziel konkret formuliert? Ist es zu breit / zu vage?</li> <li>Messbar: Kann die Zielerreichung gemessen werden? Ist ein Fortschritt erkennbar?</li> <li>Attraktiv: Warum genau dieses Ziel? Ist das Ziel weder zu einfach noch zu schwierig?</li> <li>Realistisch: Ist das Ziel erreichbar? Zeit / Budget?</li> <li>Terminiert: Ist ein Zeitraum festgelegt? Ist ein Ende definiert?</li> </ul> </li> <li>Beispiel<ul> <li>Schlecht: Wir (Malermeister M\u00fcller) m\u00f6chten eine neue Webseite.</li> <li>Besser: In den n\u00e4chsten 2 Monaten soll eine neue Webseite erstellt werden, auf der Leistungen und Firmengeschichte dargestellt werden. Die Umsetzung soll durch Web-Agentur XY mittels WordPress erfolgen (Budget: 1000 Euro). Die monatlichen Ausgaben sollen 15 Euro nicht \u00fcbersteigen. Die Leistungen sollen gezielt Kunden aus der Region ansprechen. Wir m\u00f6chten 10 Neukunden pro Monat generieren. Die Kontaktaufnahme soll via Formular und Telefon erfolgen.</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Phasen%20der%20Webseiten-Erstellung/1.%20Vorbereitung/#zielgruppen","title":"Zielgruppen","text":"<ul> <li>Abstrakte Definition der Nutzer</li> <li>Beispiel: Shop<ul> <li>Zielk\u00e4ufer</li> <li>Bummler / St\u00f6berer</li> <li>Schn\u00e4ppchenj\u00e4ger</li> <li>Markenfetischist</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Phasen%20der%20Webseiten-Erstellung/1.%20Vorbereitung/#personas","title":"Personas","text":"<ul> <li>Dienen der Konkretisierung</li> <li>Einzelne Nutzer greifbar machen</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Phasen%20der%20Webseiten-Erstellung/1.%20Vorbereitung/#wettbewerbsanalyse","title":"Wettbewerbsanalyse","text":"<ul> <li>Konkurrenzanalyse zur Inspiration, Abgrenzung, Hervorhebung</li> <li>Schwachpunkte der Konkurrenz erkennen + diese selbst verbessern</li> <li>Auch vergleichbare Webseiten ohne direkten Wettbewerb analysieren</li> </ul> <p>N\u00e4chster Schritt: 2. Konzeption</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Phasen%20der%20Webseiten-Erstellung/2.%20Konzeption/","title":"Technik","text":"<ul> <li>Definition der verwendeten Umgebung<ul> <li>CMS, Plugins</li> <li>Frontend Frameworks</li> <li>Backend Frameworks</li> </ul> </li> <li>Definition der gew\u00fcnschten Features<ul> <li>Interaktion: Kontaktformular, Shop, Forum, Newsletter, Kundenbereich, \u2026</li> <li>Information: Downloads, Bildergalerie, Suche, Produkt-Konfigurator, Newsbereich, \u2026</li> <li>Skalierbarkeit: Responsiveness, Barrierefreiheit, Mehrsprachigkeit, \u2026</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Phasen%20der%20Webseiten-Erstellung/2.%20Konzeption/#content","title":"Content","text":"<ul> <li>Inhaltsarten: Texte, Bilder, Videos, interaktive Elemente, \u2026</li> <li>Organisation: Aufteilung auf mehrere Seiten, Strukturierung innerhalb einer Seite</li> <li>Erstellung einer vorl\u00e4ufigen Sitemap (Haupt- und Unterpunkte)</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Phasen%20der%20Webseiten-Erstellung/2.%20Konzeption/#design","title":"Design","text":"<ul> <li>Wireframes: Anordnung durch Layout &amp; Raster</li> <li>Moodboard: Beschreibung der Wirkung</li> <li>Styletile / -guide: Festlegen von stilistischen Regeln</li> <li>Mockup / Clickdummy: Entwurf eines ersten Designs</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Phasen%20der%20Webseiten-Erstellung/2.%20Konzeption/#gestaltungsprozess","title":"Gestaltungsprozess","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Phasen%20der%20Webseiten-Erstellung/2.%20Konzeption/#skizzen","title":"Skizzen","text":"<ul> <li>Einfache, grobe Zeichnung</li> <li>Gut: Geringer Aufwand, g\u00fcnstig, schnell</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Phasen%20der%20Webseiten-Erstellung/2.%20Konzeption/#moodboard","title":"Moodboard","text":"<ul> <li>Stimmung, optische Eindr\u00fccke</li> <li>Farbpaletten, Grafiken, Typographie</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Phasen%20der%20Webseiten-Erstellung/2.%20Konzeption/#wireframes","title":"Wireframes","text":"<ul> <li>Struktur &amp; Anordnung von Elementen</li> <li>Keine Farben, Bilder, Typographie</li> <li>Fehler k\u00f6nnen fr\u00fch erkannt werden</li> <li>Schneller umsetzbar als echte Designs</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Phasen%20der%20Webseiten-Erstellung/2.%20Konzeption/#styletile","title":"Styletile","text":"<ul> <li>Moodboard konkretisieren</li> <li>Visuelle Sprache kl\u00e4ren, ohne detailliertes UI-Design</li> <li>Farbpalette und Typografie definieren</li> <li>Styleguide erstellen mit allen Designelementen</li> <li>Richtlinie f\u00fcr Marketing und Produktentwicklung</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Phasen%20der%20Webseiten-Erstellung/2.%20Konzeption/#mock-ups","title":"Mock-Ups","text":"<ul> <li>Erweiterung von Wireframes mit Styleguide-Informationen</li> <li>Wireframes inklusive Design</li> <li>Detailliertere Darstellung, die das sp\u00e4tere Design genau wiedergibt</li> <li>Vorgehensweise: Zuweisung des im Styletile definierten Designs und Einbindung spezifischer Bilder</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Phasen%20der%20Webseiten-Erstellung/2.%20Konzeption/#prototyp","title":"Prototyp","text":"<ul> <li>Simulation der Website vor finanzieller Umsetzung</li> <li>2 Schwerpunkte: UI &amp; UX</li> <li>Unterschiedliche Qualit\u00e4tsstufen<ul> <li>Papier: Grob, g\u00fcnstig, ausgeschnittene Elemente</li> <li>Low Fidelity: Simpel, dynamische Wireframes, kein Inhalt</li> <li>High Fidelity: Kaum unterscheidbar vom finalen Produkt</li> </ul> </li> <li>Unterschiedliche Umsetzungsm\u00f6glichkeiten<ul> <li>Design-lastiger Schwerpunkt (Adobe XD, Figma, Sketch)</li> <li>Umsetzung mit Layout-Tools (Invision, Marvel)</li> <li>Umsetzung mit finalen Technologien (HTML / CSS / JS)</li> </ul> </li> </ul> <p>N\u00e4chster Schritt: 3. Realisierung</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Phasen%20der%20Webseiten-Erstellung/3.%20Realisierung/","title":"Implementierung","text":"<ul> <li>Frontend</li> <li>Backend</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Phasen%20der%20Webseiten-Erstellung/3.%20Realisierung/#testing","title":"Testing","text":"<ul> <li>Manuelle Tests (QA, auch Usability-Tests)</li> <li>Automatisiertes Testing (Unit-Tests, Integration-Tests, UI-Tests, End-to-End-Tests)</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Mediengestaltung/Phasen%20der%20Webseiten-Erstellung/3.%20Realisierung/#re-launch","title":"(Re-)Launch","text":"<ul> <li>Ver\u00f6ffentlichen der Webseite (Webspace, Webserver, \u2026)</li> <li>Idealerweise Wartung und Aktualisierung via Admin-Bereich</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Rechtliche%20Aspekte/DSGVO/","title":"Legal","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Rechtliche%20Aspekte/DSGVO/#definition","title":"Definition","text":"<p>[!info] Personenbezogene Daten Als personenbezogene Daten bezeichnet man alle Informationen, die sich auf echte, lebende Personen beziehen.</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Rechtliche%20Aspekte/DSGVO/#eu-dsgvo","title":"EU DSGVO","text":"<ul> <li>Datenschutz-Grundverordnung</li> <li>Ziele:<ul> <li>Schutz von Personen bei der Verarbeitung personenbezogener Daten</li> <li>Gew\u00e4hrleistung des freien Verkehrs solcher Daten</li> </ul> </li> <li>Datenschutzrechtliche Grunds\u00e4tze<ul> <li>Rechtm\u00e4\u00dfigkeit, Fairness und Transparenz der Verarbeitung</li> <li>Zweckbindung</li> <li>Datenminimierung (Datensparsamkeit)</li> <li>Richtigkeit der Daten</li> <li>Speicherbegrenzung (Recht auf Vergessenwerden)</li> <li>Integrit\u00e4t und Vertraulichkeit der Datenverarbeitung (Datensicherheit)</li> <li>Rechenschaftspflicht</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Rechtliche%20Aspekte/DSGVO/#dsgvo-konformitat","title":"DSGVO-Konformit\u00e4t","text":"<ul> <li>Benutzer \u00fcber Erfassung &amp; Verarbeitung personenbezogener Daten informieren (alle Bereiche)</li> <li>Datenschutzma\u00dfnahmen je nach Webseite unterschiedlich</li> <li>M\u00f6gliche Ma\u00dfnahmen:<ul> <li>Individuelle Datenschutzerkl\u00e4rung zur ausf\u00fchrlichen Information des Nutzers</li> <li>Hinweis auf Cookie-Einsatz (Cookie-Layer)</li> <li>Newsletter mit Opt-In</li> <li>Verfahrensverzeichnis</li> </ul> </li> <li>Evtl. Unterst\u00fctzung von Datenschutzexperten</li> </ul> <p>[!warning] Vorsicht bei Einbindung von Services aus USA USA ist ein unsicheres drittland. Opt-In-Layer zwingend!</p>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Rechtliche%20Aspekte/DSGVO/#google-analytics","title":"Google Analytics","text":"<ul> <li>Umfassende Analyse mit Unmengen an Daten (u.a. vollst\u00e4ndiger IP-Adressen)</li> <li>Speicherung + \u00dcbermittlung in die USA</li> <li>Google-eigene Datenschutzbestimmungen unzureichend</li> <li>Einbindung von Google Analytics nur mit Einwilligung zul\u00e4ssig</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Rechtliche%20Aspekte/DSGVO/#matomo","title":"Matomo","text":"<ul> <li>Open Source Alternative zu Google Analytics</li> <li>Datenschutzkonformer Einsatz<ul> <li>Anonymisierung der IP-Adresse</li> <li>Belehrung \u00fcber die Widerspruchsm\u00f6glichkeit</li> <li>L\u00f6schung von Altdaten</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Rechtliche%20Aspekte/Impressumspflicht/","title":"Legal","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Rechtliche%20Aspekte/Impressumspflicht/#pflichten-fur-betreiber","title":"Pflichten f\u00fcr Betreiber","text":"<ul> <li>Nach Telemediengesetz gilt:<ul> <li>Gewerbliche Webpr\u00e4senz</li> <li>Gesch\u00e4ftsm\u00e4\u00dfige Online-Dienste</li> <li>Journalistisch-redaktionell gestaltete Angebote</li> </ul> </li> <li>Ausnahmen:<ul> <li>Rein private Seiten (die pers\u00f6nlichen &amp; famili\u00e4ren Zwecken dienen)</li> <li>Werbebanner &amp; Affiliate-Links</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Rechtliche%20Aspekte/Impressumspflicht/#impressum","title":"Impressum","text":""},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Rechtliche%20Aspekte/Impressumspflicht/#definition","title":"Definition","text":"<ul> <li>Enth\u00e4lt ladungsf\u00e4hige Anschrift des Seitenbetreibers<ul> <li>Vorname, Name, Anschrift</li> <li>Email, Telefon, Fax</li> </ul> </li> <li>Weitere Pflichtangaben f\u00fcr Unternehmen:<ul> <li>Rechtsform (GmbH, GbR...), Vertreter des Unternehmens, Registereintrag, USt-ID</li> </ul> </li> <li>Muss leicht erkennbar &amp; erreichbar sein<ul> <li>z.B. in der Navbar / im Footer</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Rechtliche%20Aspekte/Impressumspflicht/#haftung","title":"Haftung","text":"<ul> <li>Seitenbetreiber ist verantwortlich f\u00fcr Inhalte der eigenen Seiten<ul> <li>Haftung f\u00fcr eigene Inhalte uneingeschr\u00e4nkt!</li> <li>Fremdinhalte (Foren, Blog-Kommentare) beaufsichtigen</li> </ul> </li> <li>Externe Links sorgf\u00e4ltig ausw\u00e4hlen und pr\u00fcfen<ul> <li>Rechtswidriger Inhalte sofort entfernen</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Rechtliche%20Aspekte/Urheberrecht/","title":"Legal #Definition","text":"<ul> <li>Sch\u00fctzt Werke aus Literatur, Wissenschaft, Kunst</li> <li>Im Internet: Fotos, Videos, Musik, ...</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Rechtliche%20Aspekte/Urheberrecht/#rechte-fur-den-urheber","title":"Rechte f\u00fcr den Urheber","text":"<ul> <li>Verletzung eines dieser Rechte entspricht Versto\u00df gegen das Urheberrecht:<ul> <li>Urheberpers\u00f6nlichkeitsrecht: Schutz vor Entstellung</li> <li>Verwertungs- &amp; Nutzungsrecht: Definiert wie Werk (von anderen) genutzt werden darf</li> <li>Vervielf\u00e4ltigungsrecht: Recht der Entscheidung, ob und wer Werk kopiert</li> <li>Recht auf \u00f6ffentliche Zug\u00e4nglichmachung: Definiert Art der Weitergabe + \u00dcbertragung</li> </ul> </li> <li>Oft rechtliche Grauzonen</li> <li>\"Recht am eigenen Bild\" beachten</li> </ul>"},{"location":"DHBW%20Heidenheim/2023%20WiSe/Web%20Engineering/Rechtliche%20Aspekte/Urheberrecht/#namens-und-markenrechte-bei-domains","title":"Namens- und Markenrechte bei Domains","text":"<ul> <li>Bei der Domainauswahl zu beachten</li> <li>Meist unproblematisch:<ul> <li>Eigener Vor- / Nachname</li> <li>Name des eigenen Unternehmens / Vereins / Organisation</li> <li>Allgemein beschreibende Begriffe</li> <li>Frei erfundene Fantasienamen (Pr\u00fcfung: Markenrecht!)</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/Mathematik/","title":"Mathematik","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/Mathematik/#allgemeine-informationen","title":"Allgemeine Informationen","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/Mathematik/#klausur-themen","title":"Klausur Themen","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/Mathematik/#reihen","title":"Reihen:","text":"<p>Quontienen und Wurzelkriterium Keine Grenzwerte, wenn dann bei Geometirsche Reihe Anwendung und Kenntnis von Geometrischer Reihen \u2192 1 Aufgabe</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/Mathematik/#folge","title":"Folge","text":"<p>Beschr\u00e4nktheit und Monotonie von Folgen Untersuchen</p> <p>\u00dcbungsaufgabe 5.4 \u00dcbungsaufgabe 5.3</p> <p>Epsilon und N0 kommt nicht dran</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/Mathematik/#termine","title":"Termine","text":"<p>26.08.2024 \u2192 Klausur</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/Untitled/","title":"Untitled","text":"\\[\\begin{tabular}{|c|c|c|} \\hline Funktion $f(x)$ &amp; Stammfunktion $F(x)$ &amp; Bemerkung \\\\ \\hline $x^q$ &amp; $\\frac{x^{q+1}}{q+1}$ &amp; $q \\in \\mathbb{R}, q \\neq -1, x &gt; 0$ \\\\ \\hline $\\frac{1}{x}$ &amp; $\\ln|x|$ &amp; $x \\in \\mathbb{R}, x \\neq 0$ \\\\ \\hline $\\sin(x)$ &amp; $-\\cos(x)$ &amp; $x \\in \\mathbb{R}$ \\\\ \\hline $\\cos(x)$ &amp; $\\sin(x)$ &amp; $x \\in \\mathbb{R}$ \\\\ \\hline $e^x$ &amp; $e^x$ &amp; $x \\in \\mathbb{R}$ \\\\ \\hline $a^x$ &amp; $\\frac{a^x}{\\ln(a)}$ &amp; $a &gt; 0, a \\neq 1$ \\\\ \\hline \\end{tabular} \\]"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.2%20Funktionen/5.2.2%20Verkettungen%2C%20Umkehrbarkeit%20und%20Monotonie/","title":"5.2.2 Verkettungen, Umkehrbarkeit und Monotonie","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.2%20Funktionen/5.2.2%20Verkettungen%2C%20Umkehrbarkeit%20und%20Monotonie/#preiskalkulation-durch-funktionenverkettung","title":"Preiskalkulation durch Funktionenverkettung","text":"<p>[!info] Dieser Abschnitt erl\u00e4utert, wie man durch Funktionenverkettung den Preis eines Produkts neu kalkuliert.  </p> <p>Nehmen wir an, Sie sind Inhaber einer Firma und m\u00f6chten den Preis Ihres stark nachgefragten Produkts neu kalkulieren. Ihr Ziel ist es, ordentlich zu verdienen. Der neue Preis soll folgenderma\u00dfen berechnet werden: Der alte Preis wird zun\u00e4chst um 10 Euro erh\u00f6ht und anschlie\u00dfend quadriert.</p> <p>Funktionsdefinitionen: 1. \\(g(x) = x + 10\\) - Erh\u00f6hung des alten Preises um 10 Euro. 2. \\(f(y) = y^2\\) - Quadrierung des erh\u00f6hten Preises.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.2%20Funktionen/5.2.2%20Verkettungen%2C%20Umkehrbarkeit%20und%20Monotonie/#beispielrechnung","title":"Beispielrechnung","text":"<ul> <li>F\u00fcr einen alten Preis \\(x = 10\\):</li> <li>\\(g(10) = 20\\)</li> <li>\\(f(20) = 400\\)</li> </ul> <p>Ein Produkt, das vorher 10 Euro kostete, kostet nun 400 Euro. Dies l\u00e4sst sich f\u00fcr jeden Preis \\(x\\) berechnen. Beispielsweise:</p> <ul> <li>F\u00fcr \\(x = 2\\):</li> <li>\\(g(2) = 12\\)</li> <li>\\(f(12) = 144\\)</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.2%20Funktionen/5.2.2%20Verkettungen%2C%20Umkehrbarkeit%20und%20Monotonie/#funktionenverkettung","title":"Funktionenverkettung","text":"<p>Es f\u00e4llt auf, dass man die Zwischenrechnung von \\(g(x)\\) \u00fcberspringen kann, indem man \\(g(x)\\) direkt in \\(f\\) einsetzt. Diese Verkettung nennt man mathematisch Komposition von Funktionen. </p> <ul> <li>Neue Funktion: \\(h(x) = f(g(x)) = (x + 10)^2\\)</li> </ul> <p>Nun l\u00e4sst sich die neue Funktion einfacher anwenden:</p> <ul> <li>\\(h(10) = 400\\)</li> <li>\\(h(2) = 144\\)</li> </ul> <p>Dies funktioniert f\u00fcr alle Funktionen, wenn die Bildmenge von \\(g\\) im Definitionsbereich von \\(f\\) liegt.</p> <p>[!info] Definition 5.12 Seien \\(f : F \\to W\\) und \\(g : D \\to E\\) zwei Funktionen. Wenn der Definitionsbereich \\(F\\) von \\(f\\) eine Teilmenge der Bildmenge \\(g(D)\\) von \\(g\\) ist, dann ist die Funktion \\(f \\circ g : D \\to W\\), definiert durch \\((f \\circ g)(x) = f(g(x))\\) f\u00fcr alle \\(x \\in D\\), die Verkettung von \\(f\\) und \\(g\\).</p> <p>[!warning] Die Reihenfolge ist entscheidend: Zuerst wird \\(g\\) und danach \\(f\\) angewendet.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.2%20Funktionen/5.2.2%20Verkettungen%2C%20Umkehrbarkeit%20und%20Monotonie/#beispiele","title":"Beispiele","text":"<p>[!example]- Beispiel 5.10 a) - Definition der Funktionen:   - \\(g : \\mathbb{R} \\to \\mathbb{R}, g(x) = (x + 9)^2\\)   - \\(f : \\mathbb{R}^+ \\to \\mathbb{R}, f(y) = \\sqrt{y} - 8\\) - Verkettung:   - \\((f \\circ g)(x) = f((x + 9)^2) = \\sqrt{(x + 9)^2} - 8 = x + 9 - 8 = x + 1\\)   - Ergebnis: \\((f \\circ g)(x) = x + 1\\) - Die Verkettung erh\u00f6ht \\(x\\) einfach um 1.</p> <p>[!example]- Beispiel 5.10 b) - Definition der Funktionen:   - \\(g : (-1, \\infty) \\to \\mathbb{R}, g(x) = \\sqrt{\\frac{2}{x + 1}}\\)   - \\(f : \\mathbb{R} \\setminus \\{0\\} \\to \\mathbb{R}, f(y) = \\frac{1}{y^2}\\) - Verkettung:   - \\((f \\circ g)(x) = f(\\sqrt{\\frac{2}{x + 1}}) = \\frac{1}{(\\sqrt{\\frac{2}{x + 1}})^2} = \\frac{1}{\\frac{2}{x + 1}} = \\frac{x + 1}{2}\\)   - Ergebnis: \\((f \\circ g)(x) = \\frac{x + 1}{2}\\)</p> <p>[!example]- \u00dcbungsaufgabe 5.12</p> <p>Gegeben sind die Funktionen: $$ f(x) = x^4 + x^2 - 2 $$ $$ g(x) = \\sqrt{x + 1} $$</p> <p>Wir wollen \\(f(g(x))\\) berechnen. Dazu setzen wir \\(g(x)\\) in \\(f\\) ein: $$ f(g(x)) = f(\\sqrt{x+1}) $$</p> <p>Setzen wir \\(\\sqrt{x+1}\\) in \\(f(x)\\) ein: $$ f(\\sqrt{x+1}) = (\\sqrt{x+1})^4 + (\\sqrt{x+7})^2 - 2 $$</p> <p>Berechnen wir die einzelnen Teile:</p> <ol> <li> <p>Berechnung von \\((\\sqrt{x+1})^4\\): $$ (\\sqrt{x+1})^4 = ((\\sqrt{x+1})<sup>2)</sup>2 = (x+1)^2 $$</p> </li> <li> <p>Berechnung von \\((\\sqrt{x+1})^2\\): $$ (\\sqrt{x+1})^2 = x + 1 $$</p> </li> </ol> <p>Setzen wir dies in die Funktion ein: $$ f(\\sqrt{x+1}) = (x+1)^2 + (x + 1) - 2 $$</p> <p>Berechnen wir \\((x+1)^2\\): $$ (x+1)^2 = x^2 + 2x + 1 $$</p> <p>Setzen wir dies in die Gleichung ein: $$ f(\\sqrt{x+1}) = x^2 + 2x + 1 + x + 1 - 2 $$</p> <p>Fassen wir zusammen: $$ x^2 + 2x + 1 + x + 1 - 2 = x^2 + 3x  $$</p> <p>Daher ergibt sich: $$ f(g(x)) = x^2 + 3x $$</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.2%20Funktionen/5.2.2.2%20Umkehrfunktionen/","title":"5.2.2.2 Umkehrfunktionen","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.2%20Funktionen/5.2.2.2%20Umkehrfunktionen/#funktionen","title":"Funktionen","text":"<p>Sei \\(I\\) ein Intervall und \\(f : I \\to W\\) eine reelle Funktion. Der Bildbereich von \\(f\\) wird mit \\(f(I)\\) bezeichnet. Die Funktion \\(f\\) ist genau dann auf \\(f(I)\\) umkehrbar, wenn sie auf \\(I\\) streng monoton ist. In diesem Fall hat die Umkehrfunktion \\(f^{-1}\\) dieselben Monotonieeigenschaften wie \\(f\\):</p> <ul> <li>Ist \\(f\\) streng monoton steigend, dann ist auch \\(f^{-1}\\) streng monoton steigend.</li> <li>Ist \\(f\\) streng monoton fallend, dann ist auch \\(f^{-1}\\) streng monoton fallend.</li> </ul> <p>[!example]- \u00dcbungsaufgabe 5.15 Pr\u00fcfen Sie, ob die folgenden Funktionen umkehrbar sind, und geben Sie gegebenenfalls die Umkehrfunktion an:</p> <p>a) \\(f : \\mathbb{R} \\to \\mathbb{R}\\), \\(f(x) = x^4 + 1\\) - Monotonie: Die Funktion \\(f(x) = x^4 + 1\\) ist nicht streng monoton auf \\(\\mathbb{R}\\). Die Ableitung \\(f'(x) = 4x^3\\) ist nicht immer positiv oder negativ, da \\(x^3\\) f\u00fcr negative Werte von \\(x\\) negativ und f\u00fcr positive Werte positiv ist. Daher ist die Funktion nicht injektiv und somit nicht umkehrbar.</p> <p>b) \\(g : \\mathbb{R} \\to \\mathbb{R}\\), \\(g(x) = x^3\\) - Monotonie: Die Funktion \\(g(x) = x^3\\) ist streng monoton steigend auf \\(\\mathbb{R}\\), da die Ableitung \\(g'(x) = 3x^2\\) immer positiv ist (au\u00dfer bei \\(x = 0\\)). Daher ist die Funktion injektiv und somit umkehrbar.</p> <p>Umkehrfunktion: Die Umkehrfunktion von \\(g(x) = x^3\\) ist \\(g^\\frac{-1}{3}\\)</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.2%20Funktionen/5.2.3%20Stetigkeit/","title":"5.2.3 Stetigkeit","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.2%20Funktionen/5.2.3%20Stetigkeit/#definition-516","title":"Definition 5.16","text":"<p>[!info]  Es sei \\(f:D \\to W\\) eine reelle Funktion und \\(x\\) ein Element oder ein Randpunkt von \\(D\\). Gibt es dann eine Zahl \\(y\\), so dass f\u00fcr jede Folge \\(\\{x_n\\}\\), die ganz in \\(D\\) liegt und gegen \\(x\\) konvergiert, der Grenzwert</p> \\[ \\lim_{n \\to \\infty} f(x_n) \\] <p>existiert und gleich \\(y\\) ist, so bezeichnet man \\(y\\) als den Grenzwert der Funktion \\(f\\) an der Stelle \\(x\\). In diesem Fall schreibt man meist kurz:</p> \\[ \\lim_{x \\to x} f(x) = y \\]"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.2%20Funktionen/5.2.3%20Stetigkeit/#beispiel-515","title":"Beispiel 5.15","text":"<p>[!example]- Beispiel 5.15a Betrachten wir die Funktion \\(f_1:\\mathbb{R} \\to \\mathbb{R}\\) definiert durch:</p> \\[ f_1(x) = 2x - 3 \\] <p>Wir m\u00f6chten den Grenzwert der Funktion \\(f_1\\) an einem beliebigen Punkt \\(x\\) finden. Das bedeutet, wir m\u00fcssen zeigen, dass der Grenzwert der Funktion \\(f_1\\) \u00fcbereinstimmt mit dem Funktionswert, wenn \\(x_n\\) gegen \\(x\\) konvergiert.</p> <p>F\u00fcr jede Folge \\(\\{x_n\\}\\), die gegen \\(x\\) konvergiert, gilt:</p> \\[ \\lim_{n \\to \\infty} x_n = x \\] <p>Dann konvergiert auch die Folge \\(\\{f_1(x_n)\\}\\) gegen \\(f_1(x)\\). Das hei\u00dft:</p> \\[ \\lim_{n \\to \\infty} f_1(x_n) = \\lim_{n \\to \\infty} (2x_n - 3) = 2x - 3 \\] <p>Da \\(f_1(x) = 2x - 3\\) f\u00fcr alle \\(x\\) definiert ist und die Grenzwertberechnung zeigt, dass \\(\\lim_{x_n \\to x} f_1(x_n) = f_1(x)\\), existiert der Grenzwert und ist gleich \\(2x - 3\\). Das zeigt, dass die Funktion \\(f_1\\) an jedem Punkt \\(x\\) stetig ist.</p> <p>[!example]- Beispiel 5.15b Betrachten wir nun die Funktion \\(f_2:\\mathbb{R} \\to \\mathbb{R}\\), definiert durch:</p> \\[ f_2(x) = \\begin{cases}  0 &amp; \\text{f\u00fcr } x &lt; 0 \\\\ 1 &amp; \\text{f\u00fcr } x \\geq 0  \\end{cases} \\] <p>Wir untersuchen die Stetigkeit von \\(f_2\\) an der Stelle \\(x = 0\\). Daf\u00fcr m\u00fcssen wir die links- und rechtsseitigen Grenzwerte der Funktion bei \\(x = 0\\) berechnen und \u00fcberpr\u00fcfen, ob sie gleich sind und dem Funktionswert \\(f_2(0)\\) entsprechen.</p> <ul> <li>Linksseitiger Grenzwert:   F\u00fcr \\(x &lt; 0\\) gilt \\(f_2(x) = 0\\). Also:</li> </ul> <p>$$   \\lim_{x \\to 0^-} f_2(x) = \\lim_{x \\to 0^-} 0 = 0   $$</p> <ul> <li>Rechtsseitiger Grenzwert:   F\u00fcr \\(x \\geq 0\\) gilt \\(f_2(x) = 1\\). Also:</li> </ul> <p>$$   \\lim_{x \\to 0^+} f_2(x) = \\lim_{x \\to 0^+} 1 = 1   $$</p> <p>Da die links- und rechtsseitigen Grenzwerte an der Stelle \\(x = 0\\) unterschiedlich sind (\\(0 \\neq 1\\)), existiert der Grenzwert der Funktion \\(f_2\\) an dieser Stelle nicht. Folglich ist \\(f_2\\) an \\(x = 0\\) nicht stetig.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.2%20Funktionen/5.2.3%20Stetigkeit/#definition-517","title":"Definition 5.17","text":"<p>Es sei \\(f:D \\to W\\) eine reelle Funktion und \\(x\\) ein Element oder ein Randpunkt von \\(D\\).</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.2%20Funktionen/5.2.3%20Stetigkeit/#a-linksseitiger-grenzwert","title":"a) Linksseitiger Grenzwert","text":"<p>[!info] Definition 5.17a Gibt es eine Zahl \\(y_l\\), so dass f\u00fcr jede Folge \\(\\{x_n\\}\\), die ganz in \\(D\\) liegt und gegen \\(x\\) konvergiert und f\u00fcr die gilt \\(x_n &lt; x\\) f\u00fcr alle \\(n\\), der Grenzwert</p> \\[ \\lim_{n \\to \\infty} f(x_n) \\] <p>existiert und gleich \\(y_l\\) ist, so bezeichnet man \\(y_l\\) als den linksseitigen Grenzwert der Funktion \\(f\\) an der Stelle \\(x\\). In diesem Fall schreibt man kurz:</p> \\[ \\lim_{x \\to x^-} f(x) = y_l \\]"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.2%20Funktionen/5.2.3%20Stetigkeit/#b-rechtsseitiger-grenzwert","title":"b) Rechtsseitiger Grenzwert","text":"<p>[!info] Definition 5.17b Gibt es eine Zahl \\(y_r\\), so dass f\u00fcr jede Folge \\(\\{x_n\\}\\), die ganz in \\(D\\) liegt und gegen \\(x\\) konvergiert und f\u00fcr die gilt \\(x_n &gt; x\\) f\u00fcr alle \\(n\\), der Grenzwert</p> \\[ \\lim_{n \\to \\infty} f(x_n) \\] <p>existiert und gleich \\(y_r\\) ist, so bezeichnet man \\(y_r\\) als den rechtsseitigen Grenzwert der Funktion \\(f\\) an der Stelle \\(x\\). In diesem Fall schreibt man kurz:</p> \\[ \\lim_{x \\to x^+} f(x) = y_r \\]"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.2%20Funktionen/5.2.3%20Stetigkeit/#definition-518","title":"Definition 5.18","text":"<p>[!info] Es sei \\(f:D \\to W\\) eine Funktion und \\(x\\) ein Punkt aus dem Innern von \\(D\\). Den Funktionswert von \\(f\\) an der Stelle \\(x\\) bezeichne ich mit \\(y\\), also \\(f(x) = y\\). Die Funktion \\(f\\) hei\u00dft stetig in \\(x\\), wenn sowohl der linksseitige als auch der rechtsseitige Grenzwert von \\(f\\) an der Stelle \\(x\\) existieren und beide gleich \\(y\\) sind. Als Merkregel kann man das so formulieren:</p> \\[ \\text{Linksseitiger Grenzwert} = \\text{Rechtsseitiger Grenzwert} = \\text{Funktionswert} \\] <p>Ist \\(f\\) in jedem Punkt eines Teilbereichs \\(T\\) von \\(D\\) stetig, so sagt man, \\(f\\) sei stetig auf \\(T\\).</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.2%20Funktionen/5.2.3%20Stetigkeit/#satz-59","title":"Satz 5.9","text":"<p>[!info] Eine Funktion besitzt genau dann den Grenzwert \\(y\\) an der Stelle \\(x\\), wenn der linksseitige Grenzwert \\(y_l\\) und der rechtsseitige Grenzwert \\(y_r\\) an dieser Stelle existieren und beide gleich sind. In diesem Fall gilt:</p> \\[ y_l = y_r = y \\]"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.2%20Funktionen/5.2.3%20Stetigkeit/#satz-510","title":"Satz 5.10","text":"<p>[!info] Es seien \\(f\\) und \\(g\\) auf einem gemeinsamen Definitionsbereich \\(D\\) definierte Funktionen und \\(x\\) ein Punkt in \\(D\\), in dem beide Funktionen stetig sind. Dann sind auch die Funktionen \\((f + g)\\), \\((f - g)\\) und \\((f \\cdot g)\\) in \\(x\\) stetig. Ist \\(g(x) \\neq 0\\), so ist ebenfalls die Funktion \\(\\left(\\frac{f}{g}\\right)\\) in \\(x\\) stetig.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.2%20Funktionen/5.2.3%20Stetigkeit/#satz-511","title":"Satz 5.11","text":"<p>[!info] Satz 5.11 Es seien \\(f:F \\to W\\) und \\(g:D \\to E\\) zwei Funktionen mit der Eigenschaft, dass der Definitionsbereich \\(F\\) von \\(f\\) die Bildmenge \\(g(D)\\) von \\(g\\) enth\u00e4lt. Ist dann \\(g\\) in einem Punkt \\(x \\in D\\) stetig und \\(f\\) im Punkt \\(g(x) \\in g(D)\\) stetig, so ist auch die verkettete Funktion \\((f \\circ g)\\) im Punkt \\(x\\) stetig.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.2%20Funktionen/5.2.3%20Stetigkeit/#beispiel-518","title":"Beispiel 5.18","text":"<p>[!example]- Beispiel 5.18 Nehmen Sie an, Sie m\u00fcssten die Stetigkeit der Funktion</p> \\[ h: \\mathbb{R} \\to \\mathbb{R}, \\quad h(x) = \\frac{2 + (x^2 + 3)^9}{x^2 + 2} \\] <p>in einem beliebigen Punkt \\(x \\in \\mathbb{R}\\) zeigen. Wenn Sie das mithilfe der Definition, also der Berechnung der beiden einseitigen Grenzwerte und des Funktionswertes tun m\u00fcssten, h\u00e4tten Sie viel Arbeit. Da Sie nun aber die S\u00e4tze 5.10 und 5.11 kennen, k\u00f6nnen Sie mit einer wesentlich einfacheren Methode die Stetigkeit nachweisen. Die Funktion \\(h\\) ist n\u00e4mlich die Verkettung von zwei Funktionen, die beide auf \\(\\mathbb{R}\\) definiert und stetig sind:</p> \\[ f(x) = \\frac{2 + (x^2 + 3)^9}{x^2 + 2} \\text{ und } g(x) = \\frac{2 + (x^2 + 3)^9}{x^2 + 2} \\] <p>Da \\(f\\) und \\(g\\) beide stetig sind, ist die Verkettung \\(h = f \\circ g\\) ebenfalls stetig.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.2%20Funktionen/5.2.3%20Stetigkeit/#ubungen-516","title":"\u00dcbungen 5.16","text":"<p>[!example]- Aufgabe A F\u00fcr welche Werte des reellen Parameters \\(a\\) ist die Funktion</p> \\[ f_1(x) = \\begin{cases}  \\frac{x^2 + 3x + 10}{x^2 - 3x + 2} &amp; \\text{falls } x &lt; 2 \\\\ a^2 - 2 &amp; \\text{falls } x = 2 \\\\ 2x + 3 &amp; \\text{falls } x &gt; 2  \\end{cases} \\] <p>im Punkt \\(x = 2\\) stetig?</p> <p>L\u00f6sung: \\(2*2+3 =7\\) \\(a^{2}-2=7\\) =&gt; \\(a = +-3\\)</p> <p>[!example]- Aufgabe B</p> <p>Pr\u00fcfen Sie, ob die Funktion</p> \\[ f_2(x) = \\begin{cases}  \\frac{2x^2 + 2x - 4}{x^3 - x^2} &amp; \\text{falls } x &lt; 1 \\\\ {x^2 + 5} &amp; \\text{falls } x \\geq 1  \\end{cases} \\] <p>an der Stelle \\(x = 1\\) stetig ist.</p> <p>L\u00f6sung: \u00dcberpr\u00fcfung der Stetigkeit der Funktion  \\(f_2(x)\\) an \\(x = 1\\)</p> <p>Um zu \u00fcberpr\u00fcfen, ob die Funktion \\(f_2(x)\\) an der Stelle \\(x = 1\\)  stetig ist, m\u00fcssen wir die folgenden drei Bedingungen \u00fcberpr\u00fcfen:</p> <ol> <li>Der Funktionswert \\(f_2(1)\\) ist definiert.</li> <li>Der Grenzwert \\(\\lim_{x \\to 1} f_2(x)\\) existiert.</li> <li>Der Grenzwert \\(\\lim_{x \\to 1} f_2(x)\\) ist gleich dem Funktionswert \\(f_2(1)\\).</li> </ol> <p>Die Funktion \\(f_2(x)\\) ist gegeben durch:</p> \\[ f_2(x) = \\begin{cases}  \\frac{2x^2 + 2x - 4}{x^3 - x^2} &amp; \\text{falls } x &lt; 1 \\\\ x^2 + 5 &amp; \\text{falls } x \\geq 1  \\end{cases} \\]"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.2%20Funktionen/5.2.3%20Stetigkeit/#1-funktionswert-an-x-1","title":"1. Funktionswert an \\(x = 1\\):","text":"<p>F\u00fcr \\(x \\geq 1\\) ist die Funktion: $$ f_2(x) = x^2 + 5 $$ Daher ist der Funktionswert an \\(x = 1\\): $$ f_2(1) = 1^2 + 5 = 6 $$</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.2%20Funktionen/5.2.3%20Stetigkeit/#2-grenzwert-von-f_2x-fur-x-to-1-von-links-und-rechts","title":"2. Grenzwert von \\(f_2(x)\\) f\u00fcr \\(x \\to 1\\) von links und rechts:","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.2%20Funktionen/5.2.3%20Stetigkeit/#grenzwert-von-links-x-to-1-","title":"Grenzwert von links (\\(x \\to 1^-\\)):","text":"<p>F\u00fcr \\(x &lt; 1\\) ist die Funktion: $$ f_2(x) = \\frac{2x^2 + 2x - 4}{x^3 - x^2} $$</p> <p>Wir vereinfachen den Bruch: $$ \\frac{2x^2 + 2x - 4}{x^3 - x^2} = \\frac{2(x^2 + x - 2)}{x^2(x - 1)} $$ $$ x^2 + x - 2 = (x + 2)(x - 1) $$ $$ \\frac{2(x + 2)(x - 1)}{x^2(x - 1)} = \\frac{2(x + 2)}{x^2} $$</p> <p>Der Grenzwert f\u00fcr \\(x \\to 1^-\\) ist: $$ \\lim_{x \\to 1^-} \\frac{2(x + 2)}{x^2} = \\frac{2(1 + 2)}{1^2} = \\frac{6}{1} = 6 $$</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.2%20Funktionen/5.2.3%20Stetigkeit/#grenzwert-von-rechts-x-to-1","title":"Grenzwert von rechts (\\(x \\to 1^+\\)):","text":"<p>F\u00fcr \\(x \\geq 1\\) ist die Funktion: $$ f_2(x) = x^2 + 5 $$</p> <p>Der Grenzwert f\u00fcr \\(x \\to 1^+\\) ist: $$ \\lim_{x \\to 1^+} (x^2 + 5) = 1^2 + 5 = 6 $$</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.2%20Funktionen/5.2.3%20Stetigkeit/#3-vergleich-von-grenzwert-und-funktionswert","title":"3. Vergleich von Grenzwert und Funktionswert:","text":"<p>Der Grenzwert von \\(f_2(x)\\) f\u00fcr \\(x \\to 1\\) existiert und ist gleich 6, sowohl von links als auch von rechts. Au\u00dferdem ist der Funktionswert an \\(x = 1\\) ebenfalls 6.</p> <p>Da alle drei Bedingungen erf\u00fcllt sind, ist die Funktion \\(f_2(x)\\) an der Stelle \\(x = 1\\) stetig.</p> <p>[!example]- Aufgabe C</p> <p>F\u00fcr welche Werte des reellen Parameters \\(a\\) ist die Funktion</p> \\[ f_3(x) = \\begin{cases}  \\frac{(1-x)(x^2-9)}{6(x-3)} &amp; \\text{falls } x &lt; 3 \\\\ 2-a^2 &amp; \\text{falls } x = 3 \\\\ a^4 + 9 - x^3 &amp; \\text{falls } x &gt; 3  \\end{cases} \\] <p>im Punkt \\(x = 3\\) stetig?</p> <p>L\u00f6sung:</p> <p>Um die Stetigkeit der Funktion \\(f_3(x)\\) im Punkt \\(x = 3\\) zu \u00fcberpr\u00fcfen, m\u00fcssen wir sicherstellen, dass der Grenzwert der Funktion \\(f_3(x)\\), wenn \\(x\\) gegen 3 strebt, dem Funktionswert \\(f_3(3)\\) entspricht.</p> <ol> <li>Grenzwert f\u00fcr \\(x \\to 3^-\\):</li> </ol> <p>F\u00fcr \\(x &lt; 3\\) ist die Funktion:</p> \\[ f_3(x) = \\frac{(1-x)(x^2-9)}{6(x-3)} \\] <p>Wir vereinfachen den Ausdruck:</p> \\[ x^2 - 9 = (x-3)(x+3) \\] <p>Also:</p> \\[ (1-x)(x^2 - 9) = (1-x)(x-3)(x+3) \\] <p>Das f\u00fchrt zu:</p> \\[ f_3(x) = \\frac{(1-x)(x-3)(x+3)}{6(x-3)} \\] <p>K\u00fcrzen wir \\(x-3\\) im Z\u00e4hler und Nenner:</p> \\[ f_3(x) = \\frac{(1-x)(x+3)}{6} \\] <p>Setzen wir \\(x = 3\\) ein, um den Grenzwert zu finden:</p> \\[ \\lim_{x \\to 3^-} f_3(x) = \\frac{(1-3)(3+3)}{6} = \\frac{(-2)(6)}{6} = -2 \\] <ol> <li>Grenzwert f\u00fcr \\(x \\to 3^+\\):</li> </ol> <p>F\u00fcr \\(x &gt; 3\\) ist die Funktion:</p> \\[ f_3(x) = a^4 + 9 - x^3 \\] <p>Setzen wir \\(x = 3\\) ein:</p> \\[ \\lim_{x \\to 3^+} f_3(x) = a^4 + 9 - 3^3 = a^4 + 9 - 27 = a^4 - 18 \\] <ol> <li>Stetigkeit im Punkt \\(x = 3\\):</li> </ol> <p>Damit \\(f_3(x)\\) im Punkt \\(x = 3\\) stetig ist, m\u00fcssen die folgenden Bedingungen erf\u00fcllt sein:</p> <ul> <li>Der Grenzwert von \\(f_3(x)\\) f\u00fcr \\(x \\to 3^-\\) muss dem Funktionswert \\(f_3(3)\\) entsprechen.</li> <li>Der Grenzwert von \\(f_3(x)\\) f\u00fcr \\(x \\to 3^+\\) muss dem Funktionswert \\(f_3(3)\\) entsprechen.</li> </ul> <p>Das bedeutet:</p> \\[ \\lim_{x \\to 3^-} f_3(x) = f_3(3) = \\lim_{x \\to 3^+} f_3(x) \\] <p>Setzen wir die bekannten Grenzwerte und den Funktionswert \\(f_3(3) = 2 - a^2\\) gleich:</p> \\[ -2 = 2 - a^2 \\] \\[ a^2 = 4 \\] \\[ a = \\pm 2 \\]"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.3%20Wichtige%20Funktionenklassen/5.3.1%20%20Potenz-%20und%20Wurzelfunktionen/","title":"5.3.1  Potenz  und Wurzelfunktionen","text":"<p>[!definition]  Satz 5.14</p> <p>F\u00fcr beliebiges \\(n \\in \\mathbb{N}_0\\) gelten folgende Aussagen:</p> <p>a) Ist \\(n\\) gerade, so ist \\(p_n\\) eine gerade Funktion.</p> <p>b) Ist \\(n\\) ungerade, so ist \\(p_n\\) eine ungerade Funktion.</p> <p>c) Ist $ n $ ungerade, so ist die Funktion $p_ $ auf ganz \\(\\mathbb{R}\\) umkehrbar.</p> <p>d) Ist \\(n\\) gerade, so ist \\(p_n\\) umkehrbar, wenn man den Definitionsbereich auf \\(\\mathbb{R}^+\\) einschr\u00e4nkt.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.3%20Wichtige%20Funktionenklassen/5.3.1%20%20Potenz-%20und%20Wurzelfunktionen/#ubungsaufgabe-517","title":"\u00dcbungsaufgabe 5.17","text":"<p>[!example]- A F\u00fcr welche \\(x \\in \\mathbb{R}\\) haben alle Potenzfunktionen \\(p_n(x)\\) denselben Funktionswert?</p> <p>L\u00f6sung: Alle Potenzfunktionen \\(p_n(x) = x^n\\) haben denselben Funktionswert f\u00fcr \\(x = 0\\). Das liegt daran, dass \\(0^n = 0\\) f\u00fcr alle\\(n \\in \\mathbb{N}_0\\). </p> <p>[!example]- B F\u00fcr welche \\(x \\in \\mathbb{R}\\) haben alle Potenzfunktionen \\(p_n(x)\\) mit ungeradem \\(n\\) denselben Funktionswert?</p> <p>L\u00f6sung: F\u00fcr alle \\(x \\in \\mathbb{R}\\) haben alle Potenzfunktionen \\(p_n(x) = x^n\\) mit ungeradem \\(n\\) denselben Funktionswert, wenn \\(x = 0\\). Bei \\(x \\neq 0\\) variieren die Funktionswerte je nach dem Vorzeichen von \\(x\\), weil ungerade Potenzen das Vorzeichen von \\(x\\) beibehalten. Das bedeutet, dass der Funktionswert bei \\(x = 0\\) f\u00fcr alle ungeraden \\(n\\) immer 0 ist.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.3%20Wichtige%20Funktionenklassen/5.3.1%20%20Potenz-%20und%20Wurzelfunktionen/#definition-520","title":"Definition 5.20","text":"<p>[!definition] Die Umkehrfunktion der n-ten Potenzfunktion ist die Funktion</p> <p>\\(w_n(x) = x^{\\frac{1}{n}}\\)</p> <p>Man nennt sie n-te Wurzelfunktion und schreibt sie auch in der Form</p> <p>\\(\\sqrt[n]{x} = x^{\\frac{1}{n}}\\)</p> <p>Den Term unter der Wurzel nennt man auch Radikand.</p> <p>F\u00fcr den Definitionsbereich \\(D\\) der n-ten Wurzelfunktion gilt:</p> \\[ D =  \\begin{cases}  \\mathbb{R}, &amp; \\text{falls } n \\text{ ungerade ist}, \\\\ \\mathbb{R}^+, &amp; \\text{falls } n \\text{ gerade ist}. \\end{cases}  \\] <p>Im Falle \\(n = 2\\) schreibt man meist einfach nur \\(w_2(x) = \\sqrt{x}\\) und sagt Wurzel oder Quadratwurzel.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.3%20Wichtige%20Funktionenklassen/5.3.2%20%20Polynome%20und%20rationale%20Funktionen/","title":"Definition 5.21","text":"<p>[!definition] Definition 5.21</p> <p>Es sei \\(n \\in \\mathbb{N}_0\\) und es seien \\(a_0 , a_1 , \\ldots , a_n\\) reelle Zahlen. Eine Funktion \\(p(x)\\), die sich in der Form</p> \\[ p : \\mathbb{R} \\to \\mathbb{R}, \\quad p(x) = a_n x^n + a_{n-1} x^{n-1} + \\cdots + a_1 x + a_0 \\quad \\text{(5.24)} \\] <p>darstellen l\u00e4sst, nennt man ein Polynom vom Grad (h\u00f6chstens) \\(n\\).</p> <p>Die Zahlen \\(a_0 , a_1, \\ldots , a_n\\) hei\u00dfen die Koeffizienten des Polynoms, den Koeffizienten \\(a_n\\) nennt man den Leitkoeffizienten des Polynoms. Die Menge aller Polynome vom Grad \\(n\\) bezeichnet man mit \\(\\Pi_n\\).</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.3%20Wichtige%20Funktionenklassen/5.3.2%20%20Polynome%20und%20rationale%20Funktionen/#beispiel-520","title":"Beispiel 5.20","text":"<p>[!example]- Beispiel 5.20</p> <p>a) Die Funktion \\(p_1 (x) = x^4 + 4x - 1\\) ist ein Polynom vom Grad 4, der Leitkoeffizient ist 1.</p> <p>b) Auch die Funktion \\(p_2 (x) = (2x + 2)^3 - (2x + 1)^2\\) ist ein Polynom, genauer gesagt eines vom Grad 3, denn wenn man die beiden potenzierten Terme ausmultipliziert und nach \\(x\\)-Potenzen sortiert, hat \\(p_2\\) genau die in Definition 5.21 geforderte Form. Der Leitkoeffizient ist \u00fcbrigens 8 (warum?).</p> <p>c) Die Funktion \\(p_3 (x) = x + x^{-1}\\) ist kein Polynom, denn bei einem Polynom m\u00fcssen alle Potenzen von \\(x\\) nat\u00fcrliche Zahlen oder 0 sein, und das ist bei \\(-1\\) eben nicht der Fall.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.3%20Wichtige%20Funktionenklassen/5.3.2%20%20Polynome%20und%20rationale%20Funktionen/#satz-515","title":"Satz 5.15","text":"<p>[!theorem] Satz 5.15</p> <p>F\u00fcr jede Zahl \\(n \\in \\mathbb{N}_0\\) gilt: Ein Polynom vom Grad \\(n\\), das nicht konstant gleich 0 ist, hat h\u00f6chstens \\(n\\) Nullstellen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.3%20Wichtige%20Funktionenklassen/5.3.2%20%20Polynome%20und%20rationale%20Funktionen/#satz-516","title":"Satz 5.16","text":"<p>[!theorem] Satz 5.16</p> <p>Das Polynom</p> \\[ p(x) = a_n x^n + a_{n-1} x^{n-1} + \\cdots + a_1 x + a_0 \\] <p>sei vom genauen Grad \\(n\\) und habe die reellen Nullstellen \\(x_1, \\ldots, x_k\\), die nicht notwendigerweise verschieden sein m\u00fcssen. Dann existiert eine eindeutig bestimmte Darstellung dieses Polynoms der Form</p> \\[ p(x) = a_n (x - x_1) \\cdots (x - x_k)(x^2 + b_1 x + c_1) \\cdots (x^2 + b_m x + c_m). \\] <p>Hierbei ist \\(k + 2m = n\\). Tritt in der Zerlegung gar kein linearer Faktor auf, ist \\(k = 0\\) zu setzen, entsprechend ist \\(m = 0\\), falls kein quadratischer Faktor auftritt.</p> <p>[!note]- Bemerkung</p> <p>Man kann die Aussage dieses Satzes auch in Worte fassen und dadurch vielleicht leichter verst\u00e4ndlich machen: Zun\u00e4chst kann man bei einem Polynom f\u00fcr jede reelle Nullstelle \\(x_j\\) einen Faktor der Form \\((x - x_j)\\) abspalten. Hat das Polynom weniger als \\(n\\) reelle Nullstellen, ist also \\(k &lt; n\\), so kann man den Rest noch in quadratische Faktoren der im Satz angegebenen Form zerlegen, die ihrerseits nicht weiter zerlegbar sind. Und wenn Sie es ganz genau wissen wollen (was ich gut finden w\u00fcrde): In diesen quadratischen Faktoren sind die komplexen Nullstellen des Polynoms versteckt, das hei\u00dft, jeder quadratische Faktor hat zwei komplexe (nicht reelle) Nullstellen, die nat\u00fcrlich auch Nullstellen des Polynoms \\(p(x)\\) sind.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.3%20Wichtige%20Funktionenklassen/5.3.2%20%20Polynome%20und%20rationale%20Funktionen/#definition-523","title":"Definition 5.23","text":"<p>[!definition] Definition 5.23</p> <p>Es seien \\(p(x)\\) und \\(q(x)\\) zwei Polynome und \\(D\\) eine Teilmenge der reellen Zahlen, die keine Nullstelle von \\(q\\) enth\u00e4lt. Eine Funktion der Form</p> \\[ r : D \\to \\mathbb{R}, \\quad r(x) = \\frac{p(x)}{q(x)} \\] <p>nennt man eine rationale Funktion.</p> <p>Eine Zahl \\(x_P\\), die eine Nullstelle des Nenners, aber nicht des Z\u00e4hlers ist, nennt man Polstelle der rationalen Funktion. Polstellen geh\u00f6ren also nicht zum Definitionsbereich \\(D\\).</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.3%20Wichtige%20Funktionenklassen/5.3.2%20%20Polynome%20und%20rationale%20Funktionen/#beispiel-522","title":"Beispiel 5.22","text":"<p>[!example]- Beispiel 5.22</p> <p>Die einfachste rationale Funktion ist vermutlich die Hyperbel, die definiert ist durch</p> \\[ h : \\mathbb{R} \\setminus \\{0\\} \\to \\mathbb{R}, \\quad h(x) = \\frac{1}{x}. \\] <p>Die Hyperbel hat ihre einzige Polstelle in \\(x_P = 0\\). </p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.3%20Wichtige%20Funktionenklassen/5.3.2%20%20Polynome%20und%20rationale%20Funktionen/#satz-517","title":"Satz 5.17","text":"<p>[!theorem] Satz 5.17</p> <p>Polynome und rationale Funktionen sind auf ihrem gesamten Definitionsbereich stetig.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.3%20Wichtige%20Funktionenklassen/5.3.3%20%20Trigonometrische%20Funktionen/","title":"Satz 5.18","text":"<p>[!theorem] Satz 5.18</p> <p>Die Funktionen Sinus und Cosinus haben folgende Eigenschaften:</p> <p>a) Es gilt \\(\\sin(x + 2\\pi) = \\sin(x)\\) und \\(\\cos(x + 2\\pi) = \\cos(x)\\) f\u00fcr alle \\(x \\in \\mathbb{R}\\).</p> <p>b) Sinus ist eine ungerade Funktion, das hei\u00dft, es ist \\(\\sin(-x) = -\\sin(x)\\) f\u00fcr alle \\(x \\in \\mathbb{R}\\).</p> <p>c) Cosinus ist eine gerade Funktion, das hei\u00dft, es ist \\(\\cos(-x) = \\cos(x)\\) f\u00fcr alle \\(x \\in \\mathbb{R}\\).</p> <p>d) \\(\\sin(x + \\frac{\\pi}{2}) = \\cos(x)\\) f\u00fcr alle \\(x \\in \\mathbb{R}\\).</p> <p>e) \\(\\sin(x + \\pi) = -\\sin(x)\\) f\u00fcr alle \\(x \\in \\mathbb{R}\\).</p> <p>f) Es gilt \\(\\sin^2(x) + \\cos^2(x) = 1\\) f\u00fcr alle \\(x \\in \\mathbb{R}\\).</p> <p>g) Die Nullstellen des Sinus sind genau die ganzzahligen Vielfachen von \\(\\pi\\), also die Zahlen der Form \\(n \\cdot \\pi\\) mit \\(n \\in \\mathbb{Z}\\).</p> <p>h) Die Nullstellen des Cosinus sind genau die Zahlen der Form \\(n \\cdot \\pi + \\frac{\\pi}{2}\\) mit \\(n \\in \\mathbb{Z}\\).</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.3%20Wichtige%20Funktionenklassen/5.3.3%20%20Trigonometrische%20Funktionen/#satz-519","title":"Satz 5.19","text":"<p>[!theorem] Satz 5.19</p> <p>Es seien \\(x\\) und \\(y\\) beliebige reelle Zahlen. Dann gelten die folgenden Additionstheoreme:</p> \\[ \\sin(x + y) = \\sin(x) \\cos(y) + \\cos(x) \\sin(y) \\] \\[ \\cos(x + y) = \\cos(x) \\cos(y) - \\sin(x) \\sin(y) \\]"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.3%20Wichtige%20Funktionenklassen/5.3.3%20%20Trigonometrische%20Funktionen/#satz-520","title":"Satz 5.20","text":"<p>[!theorem] Satz 5.20</p> <p>Die Funktionen \\(\\sin(x)\\) und \\(\\cos(x)\\) sind auf ganz \\(\\mathbb{R}\\) stetig, die Funktion \\(\\tan(x)\\) auf ihrem gesamten Definitionsbereich</p> \\[ D = \\mathbb{R} \\setminus \\{n \\cdot \\pi + \\frac{\\pi}{2} \\mid n \\in \\mathbb{Z}\\}. \\]"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.3%20Wichtige%20Funktionenklassen/5.3.4%20%20Exponential-%20und%20Logarithmusfunktionen/","title":"Definition 5.27","text":"<p>[!definition] Definition 5.27</p> <p>Es sei \\(a\\) eine positive reelle Zahl. Die Funktion</p> \\[ \\exp_a : \\mathbb{R} \\to \\mathbb{R}, \\quad \\exp_a (x) = a^x \\] <p>hei\u00dft allgemeine Exponentialfunktion oder Exponentialfunktion zur Basis \\(a\\).</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.3%20Wichtige%20Funktionenklassen/5.3.4%20%20Exponential-%20und%20Logarithmusfunktionen/#satz-521","title":"Satz 5.21","text":"<p>[!theorem] Satz 5.21</p> <p>Die Funktion \\(\\exp_a (x) = a^x\\) ist auf ganz \\(\\mathbb{R}\\) streng monoton wachsend, falls \\(a &gt; 1\\), und auf ganz \\(\\mathbb{R}\\) streng monoton fallend, falls \\(a &lt; 1\\) ist. In jedem Fall sind die Funktionswerte stets positive Zahlen, das hei\u00dft, die Bildmenge der Exponentialfunktion ist die Menge \\((0, \\infty)\\).</p> <p></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.3%20Wichtige%20Funktionenklassen/5.3.4%20%20Exponential-%20und%20Logarithmusfunktionen/#satz-522","title":"Satz 5.22","text":"<p>[!theorem] Satz 5.22</p> <p>F\u00fcr alle reellen Zahlen \\(x\\) und \\(y\\) und f\u00fcr jede positive Basis \\(a\\) gelten folgende Rechenregeln:</p> <p>1) \\(\\exp_a (x + y) = \\exp_a(x) \\cdot \\exp_a (y)\\),</p> <p>2) \\(\\exp_a (\u2212x) = \\exp_{1/a} (x)\\).</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.3%20Wichtige%20Funktionenklassen/5.3.4%20%20Exponential-%20und%20Logarithmusfunktionen/#definition-528","title":"Definition 5.28","text":"<p>[!definition] Definition 5.28</p> <p>Die eulersche Zahl \\(e\\) ist definiert als</p> \\[ e = \\lim_{n \\to \\infty} \\left(1 + \\frac{1}{n}\\right)^n. \\] <p>Ihre Dezimaldarstellung lautet</p> \\[ e = 2{,}718\\,281\\,828\\,459\\,045\\,\\ldots, \\] <p>wobei die Folge dieser Nachkommazahlen niemals abbricht, da \\(e\\) keine rationale Zahl ist.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.3%20Wichtige%20Funktionenklassen/5.3.4%20%20Exponential-%20und%20Logarithmusfunktionen/#definition-530","title":"Definition 5.30","text":"<p>[!definition] Definition 5.30</p> <p>Es seien \\(a\\) und \\(x\\) positive reelle Zahlen und \\(a \\neq 1\\). Diejenige reelle Zahl \\(y\\), die die Gleichung</p> \\[ a^y = x \\] <p>l\u00f6st, nennt man Logarithmus oder auch Logarithmusfunktion von \\(x\\) zur Basis \\(a\\) und bezeichnet sie mit \\(\\log_a (x)\\).</p> <p>Den Logarithmus zur Basis \\(e\\) nennt man nat\u00fcrlichen Logarithmus und bezeichnet ihn mit \\(\\ln(x)\\), es ist also</p> \\[ \\ln(x) = \\log_e (x). \\]"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.3%20Wichtige%20Funktionenklassen/5.3.4%20%20Exponential-%20und%20Logarithmusfunktionen/#satz-523","title":"Satz 5.23","text":"<p>[!theorem] Satz 5.23</p> <p>Der Definitionsbereich der Logarithmusfunktion \\(\\log_a(x)\\) ist die Menge \\(\\mathbb{R}^+\\). Die Funktion \\(\\log_a (x)\\) ist auf ganz \\(\\mathbb{R}^+\\) streng monoton steigend, falls \\(a &gt; 1\\), und auf ganz \\(\\mathbb{R}^+\\) streng monoton fallend, falls \\(a &lt; 1\\) ist.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/5%20Folgen%20und%20Funktionen/5.3%20Wichtige%20Funktionenklassen/5.3.4%20%20Exponential-%20und%20Logarithmusfunktionen/#satz-524","title":"Satz 5.24","text":"<p>[!theorem] Satz 5.24</p> <p>F\u00fcr alle reellen Zahlen \\(x\\), \\(y\\) und \\(p\\) und f\u00fcr jede positive Basis \\(a\\) gelten folgende Rechenregeln:</p> <p>1) \\(\\log_a (x \\cdot y)\\)</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/6%20Differenzierbarkeit/6.1%20Differenzierbarkeit/","title":"6.1 Differenzierbarkeit","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/6%20Differenzierbarkeit/6.1%20Differenzierbarkeit/#differenzierbarkeit","title":"Differenzierbarkeit","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/6%20Differenzierbarkeit/6.1%20Differenzierbarkeit/#grundidee-der-ableitung-nach-leibniz","title":"Grundidee der Ableitung nach Leibniz","text":"<p>Um die Steigung einer Funktion an einer Stelle \\(a\\) zu berechnen, betrachtet man zwei Punkte \\(x\\) und \\(a\\) mit den zugeh\u00f6rigen Funktionswerten \\(f(x)\\) und \\(f(a)\\). Die Gerade durch die Punkte \\((x, f(x))\\) und \\((a, f(a))\\) ist die Sekante. Die Steigung der Sekante ist:</p> <p>$$ \\frac{f(x) - f(a)}{x - a} $$</p> <p></p> <p>Indem man \\(x\\) gegen \\(a\\) gehen l\u00e4sst, wird die Sekante zur Tangente, und deren Steigung ist die gesuchte Steigung der Funktion an der Stelle \\(a\\). Dies f\u00fchrt zur Definition der Ableitung.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/6%20Differenzierbarkeit/6.1%20Differenzierbarkeit/#definition-der-ableitung","title":"Definition der Ableitung","text":"<p>Eine Funktion \\(f\\) ist an der Stelle \\(a\\) differenzierbar, wenn der Grenzwert</p> <p>$$ \\lim_{x \\to a} \\frac{f(x) - f(a)}{x - a} $$</p> <p>existiert. Dieser Grenzwert ist die Ableitung von \\(f\\) an der Stelle \\(a\\), bezeichnet als \\(f'(a)\\).</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/6%20Differenzierbarkeit/6.1%20Differenzierbarkeit/#bemerkung","title":"Bemerkung","text":"<p>Der Grenzwert wird auch als Differenzialquotient bezeichnet:</p> <p>$$ \\frac{df}{dx}(a) $$</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/6%20Differenzierbarkeit/6.1%20Differenzierbarkeit/#beispiele","title":"Beispiele","text":"<ol> <li>Lineare Funktion \\(f(x) = 3x\\):  $$ f'(a) = \\lim_{x \\to a} \\frac{3x - 3a}{x - a} = \\lim_{x \\to a} 3 = 3 $$</li> </ol> <p>Die Steigung der Funktion ist \u00fcberall 3.</p> <ol> <li>Konstante Funktion \\(f(x) = c\\):  $$ f'(a) = \\lim_{x \\to a} \\frac{c - c}{x - a} = 0 $$</li> </ol> <p>Eine konstante Funktion hat \u00fcberall die Steigung 0.</p> <ol> <li>Quadratische Funktion \\(f(x) = x^2\\):  $$     f'(a) = \\lim_{x \\to a} \\frac{x^2 - a^2}{x - a} = \\lim_{x \\to a} \\frac{(x - a)(x + a)}{x - a} = \\lim_{x \\to a} (x + a) = 2a    $$</li> </ol> <p>Die Ableitung der Normalparabel \\(f(x) = x^2\\) ist \\(f'(x) = 2x\\).</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/6%20Differenzierbarkeit/6.1.3%20%20Nicht%20differenzierbare%20Funktionen/","title":"6.1.3  Nicht differenzierbare Funktionen","text":"<p>Ist eine Funktion f an einer Stelle a nicht stetig, so ist sie dort auch nicht differenzierbar.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/6%20Differenzierbarkeit/6.1.3%20%20Nicht%20differenzierbare%20Funktionen/#aufgabe-und-losungen","title":"Aufgabe und L\u00f6sungen","text":"<p>[!example]- A $$  f(x) = \\begin{cases}  2x^2 &amp; \\text{falls } x &lt; 0, \\  x^2 &amp; \\text{falls } x \\ge 0  \\end{cases} $$</p> <p>Der linksseitige Grenzwert des Differenzialquotienten ist: $$  \\lim_{x \\to 0, x &lt; 0} \\frac{2x^2 - 0}{x - 0} = \\lim_{x \\to 0, x &lt; 0} 2x = 0  $$</p> <p>Der rechtsseitige Grenzwert des Differenzialquotienten ist: $$  \\lim_{x \\to 0, x &gt; 0} \\frac{x^2 - 0}{x - 0} = \\lim_{x \\to 0, x &gt; 0} x = 0  $$</p> <p>Die Funktion ist differenzierbar, und es ist \\( f(0) = 0 \\).</p> <p>[!example]- B $$  g(x) = \\begin{cases}  x \\sin(x) + 1 &amp; \\text{falls } x &lt; 0, \\  x^2 + 1 &amp; \\text{falls } x \\ge 0  \\end{cases} $$</p> <p>Der linksseitige Grenzwert des Differenzialquotienten ist: $$  \\lim_{x \\to 0, x &lt; 0} \\frac{x \\sin(x) + 1 - 1}{x - 0} = \\lim_{x \\to 0, x &lt; 0} \\sin(x) = 0  $$</p> <p>Der rechtsseitige Grenzwert des Differenzialquotienten ist: $$  \\lim_{x \\to 0, x &gt; 0} \\frac{x^2 + 1 - 1}{x - 0} = \\lim_{x \\to 0, x &gt; 0} x = 0  $$</p> <p>Die Funktion ist differenzierbar, und es ist \\( g(0) = 0 \\).</p> <p>[!example]- C</p> \\[  h(x) = \\begin{cases}  x^2 - 1 &amp; \\text{falls } x &lt; 0, \\\\  (x - 1)^2 &amp; \\text{falls } x \\ge 0  \\end{cases} \\] <p>Die Funktion ist an der Stelle \\( a = 0 \\) nicht stetig und somit nach Satz 6.5 dort auch nicht differenzierbar.</p> <p>[!example]- D $$  b(x) = |x| $$</p> <p>Der linksseitige Grenzwert des Differenzialquotienten ist: $$  \\lim_{x \\to 0, x &lt; 0} \\frac{|x| - 0}{x - 0} = \\lim_{x \\to 0, x &lt; 0} \\frac{-x - 0}{x - 0} = -1  $$</p> <p>Der rechtsseitige Grenzwert des Differenzialquotienten ist: $$  \\lim_{x \\to 0, x &gt; 0} \\frac{|x| - 0}{x - 0} = \\lim_{x \\to 0, x &gt; 0} \\frac{x - 0}{x - 0} = +1  $$</p> <p>Die Funktion ist somit an der Stelle \\( x = 0 \\) nicht differenzierbar.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/6%20Differenzierbarkeit/6.1.4%20Tangente/","title":"6.1.4 Tangente","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/6%20Differenzierbarkeit/6.1.4%20Tangente/#definition","title":"Definition","text":"<p>Die Tangente einer Funktion <code>f</code> an der Stelle <code>a</code> ist die Gerade, die den Funktionsgraphen in diesem Punkt ber\u00fchrt.</p> <p>[!info] Satz 6.6 Die Tangente <code>t(x)</code> an die Funktion <code>f(x)</code> in der Stelle <code>a</code> hat folgende Darstellung: \\(t(x) = f'(a) \u00b7 x + (f(a) - f'(a) \u00b7 a)\\)</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/6%20Differenzierbarkeit/6.1.4%20Tangente/#beispiele","title":"Beispiele","text":"<ul> <li>Die Tangente an die Funktion \\(f(x) = x^3\\)  in der Stelle <code>a = 2</code> ist:    \\(t(x) = 12x + (8 \u2212 24) = 12x \u2212 16\\)</li> <li>Die Tangente an die Funktion <code>f(x) = 3x</code> in der Stelle <code>a = 7</code> ist identisch mit der Funktion selbst.   \\(t(x) = 3x + (21 \u2212 3 \u00b7 7) = 3x.\\)</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/6%20Differenzierbarkeit/6.1.4%20Tangente/#ubungsaufgaben","title":"\u00dcbungsaufgaben","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/6%20Differenzierbarkeit/6.1.4%20Tangente/#ubungsaufgabe-63","title":"\u00dcbungsaufgabe 6.3","text":"<p>Bestimmen Sie die Tangente an die Funktion <code>f(x) = sin(x)</code> in der Stelle <code>a = 0</code>. \\(t(x) = 1 \u00b7 x + (0 \u2212 1 \u00b7 0) = x.\\)</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/6%20Differenzierbarkeit/6.1.4%20Tangente/#ubungsaufgabe-64","title":"\u00dcbungsaufgabe 6.4","text":"<p>Gegeben sei die Funktion <code>f(x) = $x^2$</code>.  - a) Bestimmen Sie ihre Tangente an der Stelle <code>a = 1</code>.        \\(t(x) = 2x + (1 \u2212 2 \u00b7 1) = 2x \u2212 1\\) - b) Zeigen Sie, dass diese Tangente und die Funktion keinen weiteren Schnittpunkt haben.     =&gt; Mitternachtsformel ergibt zwei mal -1 =&gt; nur ein Schnittpunkt</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/6%20Differenzierbarkeit/6.2%20Ableitungsregeln/","title":"6.2 Ableitungsregeln","text":"<p>Die Ableitung einer Funktion ist linear. Das bedeutet:</p> <ul> <li>Die Ableitung eines konstanten Vielfachen einer Funktion ist das konstante Vielfache der Ableitung der Funktion:   $$ (c \\cdot f(x))' = c \\cdot f'(x) $$</li> <li>Die Ableitung der Summe von Funktionen ist die Summe der Ableitungen der Funktionen:   $$ (f(x) + g(x))' = f'(x) + g'(x) $$</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/6%20Differenzierbarkeit/6.2%20Ableitungsregeln/#beispiele","title":"Beispiele","text":"<ul> <li>F\u00fcr die Funktion \\(h(x) = 5x^2\\) ist die Ableitung:   $$ h'(x) = 10x $$</li> <li>F\u00fcr die Funktion \\(h(x) = \\sin x + e^x\\) ist die Ableitung:   $$ h'(x) = \\cos x + e^x $$</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/6%20Differenzierbarkeit/6.2%20Ableitungsregeln/#ableitung-von-polynomen","title":"Ableitung von Polynomen","text":"<p>Die Ableitung eines Polynoms der Form \\(p(x) = a_n x^n + \\ldots + a_1 x + a_0\\) ist:</p> \\[ p'(x) = n a_n x^{n-1} + (n-1)a_{n-1}x^{n-2} + \\ldots + 2a_2 x + a_1 \\]"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/6%20Differenzierbarkeit/6.2%20Ableitungsregeln/#beispiel","title":"Beispiel","text":"<p>F\u00fcr das Polynom \\(p(x) = 3x^3 + 2x^2 + x + 5\\) ist die Ableitung:</p> \\[ p'(x) = 9x^2 + 4x + 1 \\]"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/6%20Differenzierbarkeit/6.2%20Ableitungsregeln/#satz-68-produktregel","title":"Satz 6.8 (Produktregel)","text":"<p>Seien \\(f(x)\\) und \\(g(x)\\) Funktionen, die auf einer Menge \\(M\\) differenzierbar sind. Dann ist auch das Produkt \\(f(x) \\cdot g(x)\\) auf \\(M\\) differenzierbar und es gilt:</p> \\[ (f \\cdot g)'(x) = f(x) \\cdot g'(x) + f'(x) \\cdot g(x) \\]"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/6%20Differenzierbarkeit/6.2%20Ableitungsregeln/#beispiel_1","title":"Beispiel","text":"<p>F\u00fcr die Funktionen \\(f(x) = x^2\\) und \\(g(x) = \\sin(x)\\) ist das Produkt \\(h(x) = f(x) \\cdot g(x) = x^2 \\sin(x)\\). Die Ableitung ist:</p> \\[ h'(x) = x^2 \\cos(x) + 2x \\sin(x) \\] <p>Seien \\(f(x)\\) und \\(g(x)\\) Funktionen, die auf einer Menge \\(M\\) differenzierbar sind, und sei \\(\\tilde{M} = M \\setminus \\{x \\in M \\; | \\; g(x) = 0\\}\\), also die Menge \\(M\\) ohne die Nullstellen von \\(g\\). Dann ist der Quotient \\(\\left( \\frac{f}{g} \\right)(x)\\) auf \\(\\tilde{M}\\) differenzierbar und es gilt:</p> \\[ \\left( \\frac{f}{g} \\right)'(x) = \\frac{g(x) \\cdot f'(x) - f(x) \\cdot g'(x)}{(g(x))^2} \\]"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/6%20Differenzierbarkeit/6.2%20Ableitungsregeln/#beispiel_2","title":"Beispiel","text":"<p>F\u00fcr die Funktionen \\(f(x) = x^2\\) und \\(g(x) = x\\) ist der Quotient \\(h(x) = \\frac{x^2}{x} = x\\). Die Ableitung ist:</p> \\[ h'(x) = \\frac{x \\cdot 2x - x^2 \\cdot 1}{x^2} = \\frac{2x^2 - x^2}{x^2} = 1 \\] <p>Seien \\(f\\) und \\(g\\) differenzierbare Funktionen. Die Funktion \\(h\\) sei als Verkettung dieser beiden Funktionen definiert, also \\(h(x) = (f \\circ g)(x) = f(g(x))\\). Dann ist auch \\(h\\) differenzierbar und es gilt:</p> \\[ h'(x) = f'(g(x)) \\cdot g'(x) \\]"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/6%20Differenzierbarkeit/6.2%20Ableitungsregeln/#beispiel_3","title":"Beispiel","text":"<p>F\u00fcr die Funktionen \\(f(x) = e^x\\) und \\(g(x) = x^2\\) ist die Verkettung \\(h(x) = f(g(x)) = e^{x^2}\\). Die Ableitung ist:</p> \\[ h'(x) = e^{x^2} \\cdot 2x \\]"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/6%20Differenzierbarkeit/6.2%20Ableitungsregeln/#satz-611-ableitung-der-umkehrfunktion","title":"Satz 6.11 (Ableitung der Umkehrfunktion)","text":"<p>Sei \\(f\\) eine Funktion, die auf einem Intervall \\(I\\) differenzierbar ist und f\u00fcr die \\(f'(x) &gt; 0\\) oder \\(f'(x) &lt; 0\\) f\u00fcr alle \\(x \\in I\\) gilt. Dann ist auch die Umkehrfunktion \\(f^{-1}\\) auf \\(f(I)\\) differenzierbar. Ist \\(a\\) ein beliebiger Punkt aus \\(I\\) und \\(f(a) = b\\), so gilt:</p> \\[ (f^{-1})'(b) = \\frac{1}{f'(a)} \\]"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/6%20Differenzierbarkeit/6.2%20Ableitungsregeln/#beispiel_4","title":"Beispiel","text":"<p>Sei \\(f(x) = e^x\\) auf dem Intervall \\(\\mathbb{R}\\). Dann ist die Umkehrfunktion \\(f^{-1}(x) = \\ln(x)\\). Die Ableitung der Umkehrfunktion an der Stelle \\(b = e^a\\) ist:</p> \\[ (f^{-1})'(b) = \\frac{1}{e^a} = e^{-a} \\] <p>Die nat\u00fcrliche Logarithmusfunktion \\(\\ln(x)\\) ist f\u00fcr alle \\(x &gt; 0\\) differenzierbar und es gilt:</p> \\[ \\ln'(x) = \\frac{1}{x} \\]"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/6%20Differenzierbarkeit/6.2%20Ableitungsregeln/#funktion-fx-und-ableitung-fx","title":"Funktion \\(f(x)\\) und Ableitung \\(f'(x)\\)","text":"Funktion \\(f(x)\\) Ableitung \\(f'(x)\\) Bemerkung \\(x^q\\) \\(qx^{q-1}\\) \\(q \\in \\mathbb{R}\\), \\(D\\) abh\u00e4ngig von \\(q\\) \\(\\sin(x)\\) \\(\\cos(x)\\) \\(\\cos(x)\\) \\(-\\sin(x)\\) \\(\\tan(x)\\) \\(\\frac{1}{\\cos^2(x)}\\) \\(\\arcsin(x)\\) \\(\\frac{1}{\\sqrt{1 - x^2}}\\) \\(-1 &lt; x &lt; 1\\) \\(\\arccos(x)\\) \\(-\\frac{1}{\\sqrt{1 - x^2}}\\) \\(-1 &lt; x &lt; 1\\) \\(\\arctan(x)\\) \\(\\frac{1}{1 + x^2}\\) \\(e^x\\) \\(e^x\\) \\(a^x\\) \\(\\ln(a) \\cdot a^x\\) \\(a &gt; 0\\) \\(\\ln(x)\\) \\(\\frac{1}{x}\\) \\(x &gt; 0\\) \\(\\log_a(x)\\) \\(\\frac{1}{\\ln(a) \\cdot x}\\) \\(a &gt; 0, a \\neq 1, x &gt; 0\\)"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/6%20Differenzierbarkeit/6.3%20Anwendungen%20der%20Differenzialrechnung/","title":"6.3 Anwendungen der Differenzialrechnung","text":"<p>Satz 6.14 (Mittelwertsatz der Differenzialrechnung) Es seien a und b reelle Zahlen mit a &lt; b. Die Funktion f sei auf dem Intervall [a, b] definiert und im Innern des Intervalls \u00fcberall differenzierbar. Dann gibt es eine Stelle \u03be \u2208 (a, b), so dass gilt: f (b) \u2212 f (a) b \u2212 a = f \u2032(\u03be).</p> <p>Die Funktion f sei auf dem offenen Intervall I definiert und auf ganz I differenzierbar. Dann gilt: a) Ist f \u2032(x) \u2265 0 f\u00fcr alle x \u2208 I, so ist f auf I monoton steigend. b) Ist f \u2032(x) &gt; 0 f\u00fcr alle x \u2208 I, so ist f auf I streng monoton steigend. c) Ist f \u2032(x) \u2264 0 f\u00fcr alle x \u2208 I, so ist f auf I monoton fallend. d) Ist f \u2032(x) &lt; 0 f\u00fcr alle x \u2208 I, so ist f auf I streng monoton fallend.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/6%20Differenzierbarkeit/6.3.2%20Extremstellen%20und%20Extremwerte/","title":"6.3.2 Extremstellen und Extremwerte","text":"<p>Es sei f eine reelle Funktion und a ein Punkt aus dem Definitionsbereich D von f . a) Gilt f (x) \u2264 f (a) f\u00fcr alle x \u2208 D in der N\u00e4he von a, so nennt man a eine lokale Maximalstelle oder \u2013 etwas nachl\u00e4ssig, aber verbreitet \u2013 eine Maximalstelle von f . Den Funktionswert f (a) bezeichnet man als lokales Maximum von f .276 6 Differenzialrechnung b) Gilt f (x) \u2265 f (a) f\u00fcr alle x \u2208 D in der N\u00e4he von a, so nennt man a eine lokale Minimalstelle oder eine Minimalstelle von f . Den Funktionswert f (a) bezeichnet man als lokales Minimum von f . c) Gilt f (x) \u2264 f (a) f\u00fcr alle x \u2208 D, so nennt man a globale Maximalstelle und f (a) entsprechend ein globales Maximum, gilt f (x) \u2265 f (a) f\u00fcr alle x \u2208 D, so nennt man a globale Minimalstelle und f (a) entsprechend ein globales Minimum. d) Als Extremum bezeichnet man ein Maximum oder Minimum, als Extremalstelle oder auch Extremstelle eine Maximaloder Minimalstelle.</p> <p>Die Funktion f (x) sei auf einer Menge D \u2282 R definiert und im Inneren von D differenzierbar. Ist ein Punkt a aus dem Inneren von D eine lokale Extremstelle von f , so gilt f \u2032(a) = 0.</p> <p>a) Die Funktion f (x) sei auf der Menge D differenzierbar. Ist die Ableitungsfunktion f \u2032(x) ihrerseits differenzierbar, so nennt man ihre Ableitung (f \u2032)\u2032(x) die zweite Ableitung von f , bezeichnet mit f \u2032\u2032(x). Es ist also f \u2032\u2032(x) = (f \u2032)\u2032(x).280 6 Differenzialrechnung b) So fortfahrend bezeichnet man im Falle der Existenz die Ableitung von f \u2032\u2032(x) als dritte Ableitung von f , also f \u2032\u2032\u2032(x) = (f \u2032\u2032)\u2032(x), die Ableitung von f \u2032\u2032\u2032(x) als vierte Ableitung von f usw. Um nicht irgendwann 27 Striche an die Funktion machen zu m\u00fcssen, hat sich folgende Konvention eingeb\u00fcrgert: Ab der vierten Ableitung bezeichnet man die Ordnung der Ableitung nicht mehr mit Strichen, sondern schreibt diese Ordnung in Klammern als Exponenten; es ist also beispielsweise f (5)(x) die f\u00fcnfte Ableitung von f und allgemein f (n)(x) die n-te Ableitung f\u00fcr n \u2208 N. c) Existiert f\u00fcr ein n \u2208 N die n-te Ableitung f (n)(x) und ist als Funktion von x stetig, so sagt man, f sei n-mal stetig differenzierbar</p> <p>Die Funktion f sei auf einer offenen Menge D zweimal stetig differenzierbar. Weiterhin sei a \u2208 D eine Nullstelle von f \u2032(x), also f \u2032(a) = 0. Dann gilt: a) Ist f \u2032\u2032(a) &gt; 0, so hat f in a ein lokales Minimum.6.3 Anwendungen der Differenzialrechnung 281 b) Ist f \u2032\u2032(a) &lt; 0, so hat f in a ein lokales Maximum.</p> <p>Bestimmung der Extremstellen einer differenzierbaren Funktion Es sollen die Extremstellen einer auf einer reellen Menge D definierten Funktion bestimmt werden. Hierf\u00fcr geht man wie folgt vor: Man bestimmt die Nullstellen von f \u2032(x). Ist a eine solche Nullstelle von f \u2032, so berechnet man f \u2032\u2032(a). Ist f \u2032\u2032(a) &gt; 0, so ist a eine lokale Minimalstelle, ist f \u2032\u2032(a) &lt; 0, so ist a eine lokale Maximalstelle. Ist f \u2032\u2032(a) = 0, so berechnet man f \u2032\u2032\u2032(a), f (4)(a), ..., so lange, bis das erste Mal ein Wert ungleich 0 auftritt, und wendet Satz 6.19 an. Hat die Menge D Randpunkte, so muss man diese separat untersuchen. Hierzu berechnet man die Funktionswerte der Randpunkte und vergleicht sie mit den lokalen Extremwerten.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/6%20Differenzierbarkeit/L%E2%80%99hopitalsche%20Regel/","title":"L\u2019hopitalsche Regel","text":"<p>Gegeben sei eine Menge D und ein Punkt a \u2208 D. Die Funktion f(x) sei auf D  {a} definiert als f(x) = g(x) / h(x). Die Funktionen g(x) und h(x) seien in der Umgebung des Punktes a differenzierbar.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/6%20Differenzierbarkeit/L%E2%80%99hopitalsche%20Regel/#teil-a","title":"Teil a","text":"<p>Es gelte lim(x \u2192 a) g(x) = lim(x \u2192 a) h(x) = 0. Existiert dann der Ausdruck lim(x \u2192 a) [g'(x) / h'(x)], so gilt:</p> \\[lim(x \u2192 a) [g(x) / h(x)] = lim(x \u2192 a) [g'(x) / h'(x)]\\]"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Mathematik/6%20Differenzierbarkeit/L%E2%80%99hopitalsche%20Regel/#teil-b","title":"Teil b","text":"<p>Es gelte lim(x \u2192 a) g(x) = lim(x \u2192 a) h(x) = \u00b1\u221e. Existiert dann der Ausdruck lim(x \u2192 a) [g'(x) / h'(x)], so gilt: \\(\\(lim(x \u2192 a) [g(x) / h(x)] = lim(x \u2192 a) [g'(x) / h'(x)]\\)\\)</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Bluetooth%20Sicherheit/","title":"Bluetooth Sicherheit","text":"<p>Bluetooth-Technologie bietet verschiedene Sicherheitsmechanismen, die in drei Sicherheitsmodi (Security Modes) unterteilt sind. Diese Modi definieren, wie und wann Sicherheitsma\u00dfnahmen angewendet werden, um die Integrit\u00e4t, Vertraulichkeit und Authentizit\u00e4t der Bluetooth-Verbindungen zu gew\u00e4hrleisten. Hier sind die drei Sicherheitsmodi im Detail:</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Bluetooth%20Sicherheit/#sicherheitsmodus-1-nicht-sicher-non-secure-mode","title":"Sicherheitsmodus 1: Nicht sicher (Non-secure Mode)","text":"<ul> <li>Beschreibung: In diesem Modus gibt es keine Sicherheitsma\u00dfnahmen.</li> <li>Verwendung: Wird haupts\u00e4chlich in Anwendungen verwendet, bei denen Sicherheit keine Rolle spielt.</li> <li>Merkmale:<ul> <li>Keine Authentifizierung der Ger\u00e4te.</li> <li>Keine Verschl\u00fcsselung der Daten\u00fcbertragung.</li> </ul> </li> <li>Risiken: Daten sind anf\u00e4llig f\u00fcr Abh\u00f6ren und Manipulationen durch unbefugte Ger\u00e4te.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Bluetooth%20Sicherheit/#sicherheitsmodus-2-service-level-security-dienstebene-sicherheit","title":"Sicherheitsmodus 2: Service Level Security (Dienstebene-Sicherheit)","text":"<ul> <li>Beschreibung: Sicherheitsma\u00dfnahmen werden auf Dienstebene angewendet, nachdem die Verbindung hergestellt wurde.</li> <li>Verwendung: Erm\u00f6glicht flexiblere Sicherheitskonfigurationen basierend auf den Anforderungen der spezifischen Dienste.</li> <li>Merkmale:<ul> <li>Authentifizierung und Verschl\u00fcsselung k\u00f6nnen pro Dienst konfiguriert werden.</li> <li>Sicherheitsanforderungen werden definiert, nachdem eine logische Verbindung hergestellt wurde, aber bevor Daten ausgetauscht werden.</li> </ul> </li> <li>Vorteile:<ul> <li>Granulare Kontrolle \u00fcber die Sicherheitseinstellungen f\u00fcr verschiedene Dienste.</li> <li>Flexibilit\u00e4t bei der Anwendung unterschiedlicher Sicherheitsma\u00dfnahmen f\u00fcr unterschiedliche Anwendungen.</li> </ul> </li> <li>Risiken: Initiale Verbindungsherstellung erfolgt ohne Sicherheitsma\u00dfnahmen, was kurzzeitig anf\u00e4llig sein kann.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Bluetooth%20Sicherheit/#sicherheitsmodus-3-link-level-security-verbindungsebene-sicherheit","title":"Sicherheitsmodus 3: Link Level Security (Verbindungsebene-Sicherheit)","text":"<ul> <li>Beschreibung: Sicherheitsma\u00dfnahmen werden direkt auf der Verbindungsebene angewendet, bevor die Verbindung vollst\u00e4ndig hergestellt wird.</li> <li>Verwendung: H\u00f6chste Sicherheit, da Authentifizierung und Verschl\u00fcsselung obligatorisch sind, bevor irgendeine Kommunikation stattfindet.</li> <li>Merkmale:<ul> <li>Authentifizierung und Verschl\u00fcsselung sind erforderlich, bevor eine Verbindung zugelassen wird.</li> <li>Beide Ger\u00e4te m\u00fcssen sich gegenseitig authentifizieren, bevor sie Daten austauschen k\u00f6nnen.</li> </ul> </li> <li>Vorteile:<ul> <li>H\u00f6chstes Ma\u00df an Sicherheit, da keine ungesicherte Verbindung m\u00f6glich ist.</li> <li>Geeignet f\u00fcr Anwendungen mit hohen Sicherheitsanforderungen.</li> </ul> </li> <li>Nachteile: Kann weniger flexibel und etwas komplexer in der Handhabung sein, da alle Verbindungen abgesichert werden m\u00fcssen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Entwicklungskriterien%20Netzwerkarchitektur/","title":"\ud83c\udf10 Entwicklungskriterien Netzarchitektur","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Entwicklungskriterien%20Netzwerkarchitektur/#bereich","title":"Bereich","text":"<p>So allgemein wie m\u00f6glich vs. Anwendungsspezifisch:  Eine Netzarchitektur kann entweder so gestaltet werden, dass sie f\u00fcr eine breite Palette von Anwendungen geeignet ist (allgemein), oder sie kann speziell f\u00fcr eine bestimmte Anwendung optimiert sein (anwendungsspezifisch). Eine allgemeine Architektur bietet Flexibilit\u00e4t und vielseitige Einsatzm\u00f6glichkeiten, w\u00e4hrend eine anwendungsspezifische Architektur bessere Leistung und Effizienz f\u00fcr die jeweilige Anwendung bieten kann.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Entwicklungskriterien%20Netzwerkarchitektur/#skalierbarkeit","title":"\ud83d\udcc8 Skalierbarkeit","text":"<p>Kein Unterschied zwischen klein oder gro\u00df \u21d2 eventuell Nachteile:  Eine skalierbare Netzarchitektur kann effektiv mit einer wachsenden Anzahl von Benutzern oder Daten umgehen, ohne an Leistung einzub\u00fc\u00dfen. Wenn eine Architektur jedoch nicht richtig skaliert wird, k\u00f6nnte sie sowohl in kleinen als auch in gro\u00dfen Netzwerken ineffizient sein und Nachteile wie erh\u00f6hte Latenz oder Ressourcenverschwendung mit sich bringen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Entwicklungskriterien%20Netzwerkarchitektur/#robustheit","title":"\ud83d\udee1\ufe0f Robustheit","text":"<p>Ausf\u00e4lle tolerieren, unvollst\u00e4ndige oder fehlerhafte \u00dcbertragung erkennen:  Eine robuste Netzarchitektur muss in der Lage sein, Ausf\u00e4lle zu verkraften und trotzdem funktionsf\u00e4hig zu bleiben. Sie sollte auch unvollst\u00e4ndige oder fehlerhafte Daten\u00fcbertragungen erkennen und entsprechend handeln, um Datenverlust oder -korruption zu vermeiden. Mechanismen wie Redundanz, Fehlererkennung und -korrektur sind hierf\u00fcr entscheidend.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Entwicklungskriterien%20Netzwerkarchitektur/#selbstkonfigurierbarkeit","title":"\ud83d\udd27 Selbstkonfigurierbarkeit","text":"<p>Eigenst\u00e4ndig, von selbst funktionieren:  Selbstkonfigurierbare Netzwerke k\u00f6nnen sich automatisch an ver\u00e4nderte Bedingungen anpassen, ohne manuelle Eingriffe. Dies umfasst die automatische Konfiguration von Netzwerkger\u00e4ten, das Anpassen an neue Topologien und das selbstst\u00e4ndige L\u00f6sen von Problemen, was die Verwaltung erheblich erleichtert.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Entwicklungskriterien%20Netzwerkarchitektur/#fahigkeit-zur-feinabstimmung","title":"\u2699\ufe0f F\u00e4higkeit zur Feinabstimmung","text":"<p>Konfigurierbare Parameter:  Eine Netzarchitektur mit der F\u00e4higkeit zur Feinabstimmung erlaubt es Administratoren, verschiedene Parameter anzupassen, um die Leistung zu optimieren. Dies kann Netzwerkprotokolle, Bandbreitenzuweisungen, Sicherheitsrichtlinien und andere Einstellungen umfassen, um den spezifischen Anforderungen des Netzwerks gerecht zu werden.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Entwicklungskriterien%20Netzwerkarchitektur/#determinismus","title":"\ud83c\udfaf Determinismus","text":"<p>Identische Bedingungen f\u00fchren zu identischen Ergebnissen:  Deterministische Netzwerke verhalten sich unter gleichen Bedingungen immer gleich, was Vorhersagbarkeit und Zuverl\u00e4ssigkeit in der Netzwerkleistung bedeutet. Dies ist besonders wichtig f\u00fcr Anwendungen, die konsistente Latenzzeiten und Daten\u00fcbertragungsraten erfordern, wie Echtzeitanwendungen und industrielle Steuerungssysteme.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Entwicklungskriterien%20Netzwerkarchitektur/#migration","title":"\ud83d\udd04 Migration","text":"<p>Netzwerkentw\u00fcrfe k\u00f6nnen z.B. nicht mehr zweckm\u00e4\u00dfig sein \u21d2 St\u00fcck f\u00fcr St\u00fcck Migration:  Im Laufe der Zeit k\u00f6nnen bestehende Netzarchitekturen veraltet oder ungeeignet f\u00fcr aktuelle Anforderungen werden. Die Migration umfasst den schrittweisen \u00dcbergang von der alten zu einer neuen Netzarchitektur, um Ausfallzeiten zu minimieren und eine kontinuierliche Verf\u00fcgbarkeit der Dienste zu gew\u00e4hrleisten. Dies kann durch parallele Inbetriebnahme, Umschalten und schrittweise Upgrades erfolgen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Manchester%20Code/","title":"Manchester Code","text":"<p>Der Manchester-Code ist eine spezielle Art der Leitungscodierung, die in der digitalen Kommunikation verwendet wird. Er kombiniert das Taktsignal mit den Daten, sodass beide in einem einzigen Signal integriert sind. Dies erm\u00f6glicht eine zuverl\u00e4ssigere Daten\u00fcbertragung, insbesondere \u00fcber lange Distanzen oder in Umgebungen mit hohem Rauschen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Manchester%20Code/#prinzip-des-manchester-codes","title":"Prinzip des Manchester-Codes","text":"<p>Beim Manchester-Code wird jedes Bit durch eine bestimmte \u00dcbergangssequenz dargestellt, die innerhalb eines einzigen Taktzyklus erfolgt. Es gibt zwei g\u00e4ngige Varianten des Manchester-Codes: den G.E. Thomas Manchester-Code und den IEEE 802.3 Manchester-Code. Hier konzentrieren wir uns auf den IEEE 802.3 Manchester-Code, der in Ethernet-Netzwerken verwendet wird.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Manchester%20Code/#darstellung-von-bits","title":"Darstellung von Bits","text":"<ul> <li>Bit 0: Ein \u00dcbergang von High (1) nach Low (0) in der Mitte des Taktzyklus.</li> <li>Bit 1: Ein \u00dcbergang von Low (0) nach High (1) in der Mitte des Taktzyklus.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Manchester%20Code/#vorteile-des-manchester-codes","title":"Vorteile des Manchester-Codes","text":"<ol> <li>Taktsynchronisation: Da jeder Bitwert durch einen \u00dcbergang dargestellt wird, kann der Empf\u00e4nger den Takt einfach aus den \u00dcberg\u00e4ngen des Signals rekonstruieren.</li> <li>Fehlersicherheit: Die st\u00e4ndige Signal\u00e4nderung hilft, die Wahrscheinlichkeit von Fehlern durch Signalverzerrungen oder Rauschen zu verringern.</li> <li>Keine Gleichstromkomponente: Der st\u00e4ndige Wechsel des Signals bedeutet, dass keine Gleichstromkomponente vorhanden ist, was die \u00dcbertragung \u00fcber Transformatoren und lange Kabel erleichtert.</li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Manchester%20Code/#beispiel","title":"Beispiel","text":"<p>Um den Manchester-Code besser zu verstehen, betrachten wir ein einfaches Beispiel. Angenommen, wir wollen die Bin\u00e4rfolge <code>1010</code> codieren.</p> <ol> <li>Bit 1: \u00dcbergang von Low (0) nach High (1) in der Mitte des Taktzyklus.</li> <li>Bit 0: \u00dcbergang von High (1) nach Low (0) in der Mitte des Taktzyklus.</li> <li>Bit 1: \u00dcbergang von Low (0) nach High (1) in der Mitte des Taktzyklus.</li> <li>Bit 0: \u00dcbergang von High (1) nach Low (0) in der Mitte des Taktzyklus.</li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Manchester%20Code/#signalverlauf","title":"Signalverlauf","text":"<p>Hier ist eine detaillierte Darstellung des Signalverlaufs:</p> <ul> <li>F\u00fcr Bit 1: Das Signal beginnt mit einem Low-Zustand und wechselt in der Mitte des Taktzyklus in den High-Zustand.</li> <li>F\u00fcr Bit 0: Das Signal beginnt mit einem High-Zustand und wechselt in der Mitte des Taktzyklus in den Low-Zustand.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Netzwerktechnik/","title":"Netzwerktechnik","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Netzwerktechnik/#allgemeine-informationen","title":"Allgemeine Informationen","text":"<p>Gute Seite zum Nachlesen: https://www.elektronik-kompendium.de/</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Netzwerktechnik/#klausur-themen","title":"Klausur Themen","text":"<ul> <li>60 Minuten</li> <li>Wir haben genug Zeit zum denken</li> <li> <ol> <li>Klausur schwieriger inhaltlich</li> </ol> </li> <li>Praktische \u00dcbung nochmal nachdenken</li> <li>Es werden keine Normen abgefragt, sondern was sie macht bzw wie sie funktioniert</li> <li></li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Netzwerktechnik/#termine","title":"Termine","text":"<p>15.08.2024 \u2192 Klausur</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Schleifen%20in%20Netzwerktopologien/","title":"Schleifen in Netzwerktopologien","text":"<p>In Netzwerktopologien bezieht sich der Begriff \"Schleifen\" auf die m\u00f6glichen Probleme, die auftreten k\u00f6nnen, wenn es mehrere Wege zwischen den Knoten eines Netzwerks gibt. Diese Schleifen k\u00f6nnen zu verschiedenen Herausforderungen f\u00fchren, je nach Art der Netzwerktopologie und der Routing-Algorithmen, die verwendet werden. Hier sind einige wichtige Punkte zur Erkl\u00e4rung von Schleifen in Netzwerktopologien:</p> <ol> <li> <p>Definition von Schleifen: Eine Schleife tritt auf, wenn es mehrere m\u00f6gliche Pfade zwischen zwei oder mehr Knoten in einem Netzwerk gibt, die zu einem Routing-Problem f\u00fchren k\u00f6nnen. Wenn ein Paket z. B. auf einem Pfad zum Ziel gesendet wird, aber aufgrund von Schleifen oder falschen Routing-Informationen nicht korrekt ankommt, spricht man von einem Routing-Schleifen.</p> </li> <li> <p>Ursachen von Schleifen:</p> <ul> <li>Fehlerhafte Konfiguration: Wenn die Routing-Tabellen nicht korrekt aktualisiert oder konfiguriert werden, k\u00f6nnen Schleifen entstehen.</li> <li>Konvergenzprobleme: In dynamischen Routing-Protokollen kann es vorkommen, dass Netzwerkknoten unterschiedliche Informationen \u00fcber die Netzwerktopologie haben, was zu inkonsistenten Routing-Entscheidungen und m\u00f6glichen Schleifen f\u00fchrt.</li> <li>Redundante Pfade: Netzwerktopologien, die redundant gestaltet sind, k\u00f6nnen mehrere Wege zwischen Quelle und Ziel bieten, was die Gefahr von Schleifen erh\u00f6ht, wenn nicht richtig verwaltet.</li> <li> <p>Auswirkungen von Schleifen:</p> </li> <li> <p>Paketverlust: Pakete k\u00f6nnten zirkulieren oder gar verloren gehen, wenn Schleifen nicht korrekt behandelt werden.</p> </li> <li>Verz\u00f6gerungen: Schleifen k\u00f6nnen zu l\u00e4ngeren Laufzeiten f\u00fchren, da Pakete unn\u00f6tigerweise durch das Netzwerk geroutet werden.</li> <li>Netzwerkausf\u00e4lle: In extremen F\u00e4llen k\u00f6nnten Schleifen dazu f\u00fchren, dass das Netzwerk instabil wird oder gar zusammenbricht, wenn sie nicht schnell behoben werden.</li> <li> <p>Vermeidung von Schleifen:</p> </li> <li> <p>Routing-Algorithmen: Verwendet werden Algorithmen wie das Spanning Tree Protocol (STP) in Ethernet-basierten Netzwerken oder Routing-Protokolle wie OSPF und EIGRP, die Schleifen durch spezifische Mechanismen wie TTL (Time-to-Live) oder Routing-Metriken vermeiden k\u00f6nnen.</p> </li> <li>Schleifenfreie Netzwerktopologien: Topologien wie der Baum (Tree) oder bestimmte Mesh-Konfigurationen sind von Natur aus schleifenfrei und minimieren das Risiko von Routing-Schleifen.</li> </ul> </li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Synchron%20und%20Asynchron%20auf%20Bit%20Ebene/","title":"Synchron und Asynchron auf Bit Ebene","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Synchron%20und%20Asynchron%20auf%20Bit%20Ebene/#synchrone-kommunikation","title":"Synchrone Kommunikation","text":"<p>Bei der synchronen Kommunikation werden Datenbits zusammen mit einem Taktsignal \u00fcbertragen. Das bedeutet, dass sowohl der Sender als auch der Empf\u00e4nger durch ein gemeinsames Taktsignal synchronisiert sind. Dieses Taktsignal sorgt daf\u00fcr, dass beide Parteien zur gleichen Zeit \"wissen\", wann ein neues Bit \u00fcbertragen wird. Hier sind die Hauptmerkmale der synchronen Kommunikation:</p> <ol> <li>Taktsignal: Ein separates Taktsignal wird verwendet, um die Synchronisierung zwischen Sender und Empf\u00e4nger sicherzustellen. Dies kann ein separates Signal sein oder in das Datenstrom eingebettet werden.</li> <li>Kontinuierliche \u00dcbertragung: Daten k\u00f6nnen kontinuierlich und ohne Pausen zwischen den Bits \u00fcbertragen werden.</li> <li>Effizienz: Da das Taktsignal eine genaue Synchronisierung erm\u00f6glicht, kann die Daten\u00fcbertragung effizient und schnell sein.</li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Synchron%20und%20Asynchron%20auf%20Bit%20Ebene/#beispiel-spi-serial-peripheral-interface","title":"Beispiel: SPI (Serial Peripheral Interface)","text":"<p>SPI ist ein Beispiel f\u00fcr ein synchrones Kommunikationsprotokoll. Hierbei werden Daten \u00fcber separate Datenleitungen (MOSI und MISO) und eine Taktsignalleitung (SCLK) \u00fcbertragen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Synchron%20und%20Asynchron%20auf%20Bit%20Ebene/#asynchrone-kommunikation","title":"Asynchrone Kommunikation","text":"<p>Bei der asynchronen Kommunikation gibt es kein gemeinsames Taktsignal zwischen dem Sender und dem Empf\u00e4nger. Stattdessen werden Start- und Stoppbits verwendet, um den Beginn und das Ende eines Datenwortes zu markieren. Hier sind die Hauptmerkmale der asynchronen Kommunikation:</p> <ol> <li>Start- und Stoppbits: Jedes Datenwort beginnt mit einem Startbit und endet mit einem Stoppbit. Dies erm\u00f6glicht es dem Empf\u00e4nger, den Anfang und das Ende jedes Datenwortes zu erkennen.</li> <li>Fehlende kontinuierliche Synchronisierung: Da es kein gemeinsames Taktsignal gibt, sind die Daten nicht kontinuierlich synchronisiert. Der Empf\u00e4nger muss das Timing der Bits selbstst\u00e4ndig erkennen.</li> <li>Flexibilit\u00e4t: Asynchrone Kommunikation ist flexibler, da sie keine exakte Synchronisierung zwischen Sender und Empf\u00e4nger erfordert. Dies kann jedoch zu einer geringeren Effizienz f\u00fchren.</li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Synchron%20und%20Asynchron%20auf%20Bit%20Ebene/#beispiel-uart-universal-asynchronous-receivertransmitter","title":"Beispiel: UART (Universal Asynchronous Receiver/Transmitter)","text":"<p>UART ist ein Beispiel f\u00fcr ein asynchrones Kommunikationsprotokoll. Hierbei wird jedes Datenbyte mit einem Startbit, dem eigentlichen Datenbits und einem Stoppbit \u00fcbertragen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Synchron%20und%20Asynchron%20auf%20Bit%20Ebene/#vergleich","title":"Vergleich","text":"Merkmal Synchrone Kommunikation Asynchrone Kommunikation Taktsignal Ja Nein Start- und Stoppbits Nein Ja Daten\u00fcbertragungsrate H\u00f6her Niedriger Komplexit\u00e4t der Implementierung H\u00f6her (wegen Taktsignal) Niedriger Kontinuierliche \u00dcbertragung Ja Nein Beispielprotokolle SPI, I2C UART, RS-232"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Die%20Casts/Anycast/","title":"Anycast","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Die%20Casts/Anycast/#merkmale-von-anycast","title":"\ud83d\udccc Merkmale von Anycast","text":"<ol> <li>Punkt-zu-Punkt-zu-Multipunkt-Kommunikation: <ul> <li>Anycast ist eine Technik, bei der dieselbe IP-Adresse an mehrere Standorte vergeben wird, und die Anfragen an den n\u00e4chstgelegenen oder besten verf\u00fcgbaren Server gerichtet werden.</li> </ul> </li> <li>Identische Adressierung: <ul> <li>Alle Server in einem Anycast-Netzwerk verwenden dieselbe IP-Adresse. Wenn ein Client eine Anfrage an diese IP-Adresse sendet, wird sie an den n\u00e4chstgelegenen Server weitergeleitet.</li> </ul> </li> <li>Optimierung: <ul> <li>Anycast wird verwendet, um die Netzwerkleistung zu verbessern, indem die Latenz reduziert wird und der Traffic auf mehrere Standorte verteilt wird.</li> </ul> </li> <li>Typischer Einsatzbereich: <ul> <li>Anycast wird h\u00e4ufig f\u00fcr DNS-Server, Content Delivery Networks (CDNs) und andere Dienste verwendet, bei denen die geografische N\u00e4he oder die Netzwerkperformance wichtig ist.</li> </ul> </li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Die%20Casts/Anycast/#funktionsweise-von-anycast","title":"\u2699\ufe0f Funktionsweise von Anycast","text":"<ol> <li>IP-Adresse: <ul> <li>Alle Server in einem Anycast-Netzwerk verwenden die gleiche IP-Adresse, die jedoch in verschiedenen Netzwerkstandorten verf\u00fcgbar ist.</li> </ul> </li> <li>Routing: <ul> <li>Das Routing-Protokoll im Netzwerk sorgt daf\u00fcr, dass Anfragen an die n\u00e4chstgelegene Anycast-Adresse zum entsprechenden Server weitergeleitet werden.</li> </ul> </li> <li>Client-Anfragen: <ul> <li>Wenn ein Client eine Anfrage an die Anycast-Adresse sendet, wird sie automatisch an den Server geleitet, der geografisch am n\u00e4chsten oder \u00fcber das beste Routing erreichbar ist.</li> </ul> </li> <li>Skalierung: <ul> <li>Anycast erm\u00f6glicht eine einfache Skalierung und Lastverteilung, da zus\u00e4tzliche Server mit derselben IP-Adresse in unterschiedlichen Standorten bereitgestellt werden k\u00f6nnen.</li> </ul> </li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Die%20Casts/Anycast/#beispiele-fur-anycast","title":"\ud83d\udccb Beispiele f\u00fcr Anycast","text":"<ul> <li>DNS (Domain Name System): <ul> <li>Viele gro\u00dfe DNS-Anbieter verwenden Anycast, um ihre DNS-Server weltweit zu verteilen. Anfragen an die DNS-IP-Adresse werden automatisch an den n\u00e4chstgelegenen Server weitergeleitet.</li> </ul> </li> <li>Content Delivery Networks (CDNs): <ul> <li>CDNs verwenden Anycast, um Inhalte (wie Webseiten und Videos) \u00fcber Server auf der ganzen Welt zu verteilen, um die Ladezeiten f\u00fcr Benutzer zu optimieren.</li> </ul> </li> <li>DDoS-Schutz: <ul> <li>Anycast wird auch verwendet, um Distributed Denial of Service (DDoS) Angriffe abzuwehren, indem der Traffic auf verschiedene Standorte verteilt wird und so die Kapazit\u00e4t der Infrastruktur erh\u00f6ht wird.</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Die%20Casts/Broadcast/","title":"Broadcast","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Die%20Casts/Broadcast/#merkmale-von-broadcast","title":"\ud83d\udccc Merkmale von Broadcast","text":"<ol> <li>Punkt-zu-Mehrpunkt-Kommunikation: <ul> <li>Beim Broadcast wird eine Nachricht von einem einzigen Sender an alle Empf\u00e4nger innerhalb eines bestimmten Netzwerkbereichs gesendet.</li> </ul> </li> <li>Keine Zielgerichtete Adressierung: <ul> <li>Broadcast-Nachrichten werden an eine spezielle Broadcast-Adresse gesendet, die alle Ger\u00e4te im Netzwerk erreicht, anstatt an eine spezifische IP-Adresse.</li> </ul> </li> <li>Weitreichende Verbreitung: <ul> <li>Alle Ger\u00e4te im selben Netzwerksegment (Subnetz) empfangen die Broadcast-Nachricht, unabh\u00e4ngig davon, ob sie die Nachricht angefordert haben oder nicht.</li> </ul> </li> <li>Netzwerkbelastung: <ul> <li>Broadcast kann das Netzwerk stark belasten, insbesondere bei gro\u00dfen Netzwerken, da alle Ger\u00e4te die gesendeten Nachrichten verarbeiten m\u00fcssen.</li> </ul> </li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Die%20Casts/Broadcast/#funktionsweise-von-broadcast","title":"\u2699\ufe0f Funktionsweise von Broadcast","text":"<ol> <li>Broadcast-Adresse: <ul> <li>Eine spezielle Adresse, die verwendet wird, um Nachrichten an alle Ger\u00e4te im Netzwerk zu senden. Zum Beispiel ist die IPv4-Broadcast-Adresse f\u00fcr ein Subnetz h\u00e4ufig die letzte Adresse im Adressbereich, wie 192.168.1.255 f\u00fcr das Subnetz 192.168.1.0/24.</li> </ul> </li> <li>Verbindungserstellung: <ul> <li>Im Gegensatz zu Unicast wird beim Broadcast keine direkte Verbindung zu einzelnen Empf\u00e4ngern hergestellt. Die Nachricht wird einfach an die Broadcast-Adresse gesendet.</li> </ul> </li> <li>Daten\u00fcbertragung: <ul> <li>Die Nachricht wird von allen Ger\u00e4ten im Netzwerksegment empfangen und verarbeitet. Jedes Ger\u00e4t entscheidet dann, ob die Nachricht f\u00fcr es relevant ist.</li> </ul> </li> <li>Keine Best\u00e4tigung: <ul> <li>Im Allgemeinen gibt es keine R\u00fcckmeldung oder Best\u00e4tigung vom Empf\u00e4nger, dass die Broadcast-Nachricht empfangen wurde.</li> </ul> </li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Die%20Casts/Broadcast/#beispiele-fur-broadcast","title":"\ud83d\udccb Beispiele f\u00fcr Broadcast","text":"<ul> <li>ARP (Address Resolution Protocol): <ul> <li>ARP-Anfragen verwenden Broadcast, um die MAC-Adresse eines Ger\u00e4ts zu ermitteln, dessen IP-Adresse bekannt ist. Die Anfrage wird an alle Ger\u00e4te im Netzwerk gesendet, und das Ger\u00e4t mit der passenden IP-Adresse antwortet.</li> </ul> </li> <li>DHCP (Dynamic Host Configuration Protocol): <ul> <li>Wenn ein Ger\u00e4t eine IP-Adresse von einem DHCP-Server anfordert, sendet es eine Broadcast-Anfrage, um den DHCP-Server im Netzwerk zu erreichen.</li> </ul> </li> <li>NetBIOS: <ul> <li>NetBIOS-Name-Registrierung und -Aufl\u00f6sung verwenden Broadcast, um NetBIOS-Namen in IP-Adressen umzuwandeln.</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Die%20Casts/Multicast/","title":"Multicast","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Die%20Casts/Multicast/#merkmale-von-multicast","title":"\ud83d\udccc Merkmale von Multicast","text":"<ol> <li>Punkt-zu-Mehrpunkt-Kommunikation: <ul> <li>Beim Multicast wird eine Nachricht von einem einzigen Sender an eine bestimmte Gruppe von Empf\u00e4ngern gesendet, die sich f\u00fcr die Multicast-Gruppe registriert haben.</li> </ul> </li> <li>Gruppenbasierte Adressierung: <ul> <li>Multicast verwendet spezielle IP-Adressen, die eine Gruppe von Empf\u00e4ngern repr\u00e4sentieren. Ger\u00e4te, die diese Nachrichten empfangen m\u00f6chten, treten der entsprechenden Multicast-Gruppe bei.</li> </ul> </li> <li>Effizienz: <ul> <li>Multicast ist effizienter als Broadcast, da die Nachrichten nur an die Ger\u00e4te gesendet werden, die Interesse daran haben, anstatt an alle Ger\u00e4te im Netzwerk.</li> </ul> </li> <li>Skalierbarkeit: <ul> <li>Multicast ist skalierbar, da die Netzwerkbelastung geringer ist als bei Broadcast, besonders wenn viele Empf\u00e4nger dieselben Daten ben\u00f6tigen.</li> </ul> </li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Die%20Casts/Multicast/#funktionsweise-von-multicast","title":"\u2699\ufe0f Funktionsweise von Multicast","text":"<ol> <li>Multicast-Adresse: <ul> <li>Multicast verwendet spezielle IP-Adressen aus dem Bereich 224.0.0.0 bis 239.255.255.255 (IPv4) und FF00::/8 (IPv6). Diese Adressen repr\u00e4sentieren Gruppen von Empf\u00e4ngern.</li> </ul> </li> <li>Beitritt zur Gruppe: <ul> <li>Ger\u00e4te, die Multicast-Nachrichten empfangen m\u00f6chten, melden sich bei einer bestimmten Multicast-Gruppe an, indem sie die IGMP (Internet Group Management Protocol) oder MLD (Multicast Listener Discovery) verwenden.</li> </ul> </li> <li>Daten\u00fcbertragung: <ul> <li>Der Sender schickt die Daten an die Multicast-Adresse. Die Netzwerk-Router leiten die Nachrichten nur an die Netzwerke weiter, die Mitglieder der Multicast-Gruppe enthalten.</li> </ul> </li> <li>Optimierung: <ul> <li>Router optimieren den Datenfluss, indem sie die Nachrichten nur einmal \u00fcber jeden Link senden, der f\u00fcr mehrere Empf\u00e4nger in der Multicast-Gruppe verwendet wird.</li> </ul> </li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Die%20Casts/Multicast/#beispiele-fur-multicast","title":"\ud83d\udccb Beispiele f\u00fcr Multicast","text":"<ul> <li>IPTV (Internet Protocol Television): <ul> <li>Fernsehsender verwenden Multicast, um TV-Signale an viele Abonnenten gleichzeitig zu senden, ohne die gleichen Daten an jeden einzelnen Empf\u00e4nger separat zu \u00fcbertragen.</li> </ul> </li> <li>Online-Spiele: <ul> <li>Multicast wird verwendet, um Spielstatus-Updates und andere Informationen gleichzeitig an mehrere Spieler zu senden.</li> </ul> </li> <li>Videokonferenzen: <ul> <li>Multicast erm\u00f6glicht es, Videostreams an alle Teilnehmer einer Konferenz zu senden, ohne f\u00fcr jeden eine separate Verbindung aufzubauen.</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Die%20Casts/Unicast/","title":"Unicast","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Die%20Casts/Unicast/#merkmale-von-unicast","title":"\ud83d\udccc Merkmale von Unicast","text":"<ol> <li>Punkt-zu-Punkt-Kommunikation: <ul> <li>Bei Unicast wird eine direkte Verbindung zwischen zwei Netzwerkger\u00e4ten hergestellt \u2013 dem Sender und dem Empf\u00e4nger.</li> </ul> </li> <li>Eindeutige Adressierung: <ul> <li>Jedes Ger\u00e4t im Netzwerk hat eine eindeutige IP-Adresse, und die Daten werden an diese spezifische Adresse gesendet.</li> </ul> </li> <li>Effizienz: <ul> <li>F\u00fcr Anwendungen, bei denen Daten nur an einen bestimmten Empf\u00e4nger gesendet werden m\u00fcssen, ist Unicast sehr effizient.</li> </ul> </li> <li>Skalierbarkeit: <ul> <li>Unicast ist skalierbar, da jede neue Verbindung unabh\u00e4ngig von anderen besteht. Dies bedeutet jedoch auch, dass bei einer gro\u00dfen Anzahl von Empf\u00e4ngern die Netzwerkbelastung steigen kann, da f\u00fcr jeden Empf\u00e4nger eine separate Kopie der Daten gesendet wird.</li> </ul> </li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Die%20Casts/Unicast/#funktionsweise-von-unicast","title":"\u2699\ufe0f Funktionsweise von Unicast","text":"<ol> <li>Adressierung: <ul> <li>Der Sender erh\u00e4lt die IP-Adresse des Empf\u00e4ngers. Diese IP-Adresse ist eindeutig und identifiziert das Zielger\u00e4t im Netzwerk.</li> </ul> </li> <li>Verbindungserstellung: <ul> <li>Eine Verbindung wird zwischen dem Sender und dem Empf\u00e4nger hergestellt. Dies kann \u00fcber verschiedene Transportprotokolle wie TCP (Transmission Control Protocol) oder UDP (User Datagram Protocol) geschehen.</li> </ul> </li> <li>Daten\u00fcbertragung: <ul> <li>Die Daten werden vom Sender zum Empf\u00e4nger \u00fcber das Netzwerk \u00fcbertragen. Bei TCP wird die Integrit\u00e4t und Reihenfolge der Daten garantiert, w\u00e4hrend bei UDP die \u00dcbertragung schneller, aber weniger zuverl\u00e4ssig ist.</li> </ul> </li> <li>Best\u00e4tigung: <ul> <li>Bei TCP-basierter Kommunikation best\u00e4tigt der Empf\u00e4nger den Erhalt der Datenpakete. Wenn der Sender keine Best\u00e4tigung erh\u00e4lt, k\u00f6nnen die Pakete erneut gesendet werden.</li> </ul> </li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Die%20Casts/Unicast/#beispiele-fur-unicast","title":"\ud83d\udccb Beispiele f\u00fcr Unicast","text":"<ul> <li>Web-Browsing: <ul> <li>Wenn du eine Webseite besuchst, sendet dein Computer eine Anfrage an den Webserver, und der Server sendet die Webseite nur an deinen Computer zur\u00fcck.</li> </ul> </li> <li>E-Mail: <ul> <li>Wenn du eine E-Mail sendest, wird sie von deinem E-Mail-Server direkt an den E-Mail-Server des Empf\u00e4ngers gesendet.</li> </ul> </li> <li>FTP (File Transfer Protocol): <ul> <li>Beim Herunterladen einer Datei von einem FTP-Server werden die Daten direkt von diesem Server an deinen Computer \u00fcbertragen.</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Dark%20Fiber/","title":"Dark Fiber","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Dark%20Fiber/#definition-von-dark-fiber","title":"\ud83d\udccc Definition von Dark Fiber","text":"<p>Dark Fiber (auf Deutsch \"dunkle Faser\") bezeichnet Glasfaserkabel, die bereits verlegt, aber derzeit nicht aktiv genutzt werden. Diese ungenutzten Glasfasern sind physisch vorhanden, aber es flie\u00dfen keine Daten durch sie. Sie werden als \"dunkel\" bezeichnet, weil sie im Gegensatz zu aktiven Glasfaserkabeln, durch die Lichtsignale (Daten) gesendet werden, nicht beleuchtet sind.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Dark%20Fiber/#merkmale-von-dark-fiber","title":"\ud83c\udf10 Merkmale von Dark Fiber","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Dark%20Fiber/#infrastruktur","title":"Infrastruktur","text":"<p>Dark Fiber ist Teil der Glasfaserinfrastruktur, die f\u00fcr die Daten\u00fcbertragung \u00fcber gro\u00dfe Entfernungen mit hoher Geschwindigkeit und Bandbreite verwendet wird. Sie sind oft in Ballungsgebieten und entlang von Kommunikationswegen verlegt.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Dark%20Fiber/#keine-elektronik","title":"Keine Elektronik","text":"<p>Im Gegensatz zu aktiven Glasfaserkabeln, die mit elektronischen Ger\u00e4ten wie Transceivern und Repeatern verbunden sind, hat Dark Fiber keine angeschlossenen aktiven Komponenten und ist daher inaktiv.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Dark%20Fiber/#hohe-kapazitat","title":"Hohe Kapazit\u00e4t","text":"<p>Da Glasfaserverbindungen gro\u00dfe Datenmengen mit Lichtgeschwindigkeit \u00fcbertragen k\u00f6nnen, bieten Dark Fiber-Leitungen, sobald sie aktiviert sind, eine extrem hohe Bandbreite und \u00dcbertragungsgeschwindigkeit.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Dark%20Fiber/#leasing-und-nutzung","title":"Leasing und Nutzung","text":"<p>Unternehmen und Organisationen k\u00f6nnen Dark Fiber-Leitungen von Telekommunikationsunternehmen oder Infrastrukturanbietern mieten oder kaufen, um ihre eigenen Netzwerke aufzubauen und zu betreiben.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Dark%20Fiber/#funktionsweise-von-dark-fiber","title":"\ud83d\udce1 Funktionsweise von Dark Fiber","text":"<ol> <li>Verlegung:</li> <li> <p>Glasfaserkabel werden in unterirdischen Kabelkan\u00e4len, entlang von Verkehrswegen oder in bestehenden Versorgungsleitungen verlegt.</p> </li> <li> <p>Aktivierung:</p> </li> <li> <p>Um Dark Fiber zu aktivieren, m\u00fcssen Endpunkte mit Glasfasertransceivern ausgestattet werden, die Lichtsignale durch die Faser senden und empfangen.</p> </li> <li> <p>Beleuchtung:</p> </li> <li> <p>Wenn Daten durch das Glasfaserkabel gesendet werden, wird es \"beleuchtet\" und die Dark Fiber wird zu einer aktiven Glasfaserverbindung.</p> </li> <li> <p>Daten\u00fcbertragung:</p> </li> <li>Aktivierte Glasfaserkabel \u00fcbertragen Daten in Form von Lichtimpulsen, die von den Transceivern in elektrische Signale umgewandelt werden.</li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Dark%20Fiber/#anwendungen-von-dark-fiber","title":"\ud83d\ude80 Anwendungen von Dark Fiber","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Dark%20Fiber/#unternehmensnetzwerke","title":"Unternehmensnetzwerke","text":"<p>Unternehmen nutzen Dark Fiber, um ihre eigenen privaten Hochgeschwindigkeitsnetzwerke zu erstellen, die sie vollst\u00e4ndig kontrollieren und verwalten k\u00f6nnen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Dark%20Fiber/#rechenzentren","title":"Rechenzentren","text":"<p>Rechenzentren verwenden Dark Fiber, um gro\u00dfe Datenmengen zwischen verschiedenen Standorten oder zu Cloud-Diensten zu \u00fcbertragen, was hohe Geschwindigkeit und geringe Latenz gew\u00e4hrleistet.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Dark%20Fiber/#telekommunikationsanbieter","title":"Telekommunikationsanbieter","text":"<p>Telekommunikationsunternehmen mieten oder kaufen Dark Fiber, um ihre Netzwerkkapazit\u00e4t zu erweitern und neue Dienste anzubieten, ohne neue Glasfaserkabel verlegen zu m\u00fcssen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Dark%20Fiber/#bildungs-und-forschungseinrichtungen","title":"Bildungs- und Forschungseinrichtungen","text":"<p>Universit\u00e4ten und Forschungseinrichtungen nutzen Dark Fiber f\u00fcr den schnellen Austausch gro\u00dfer Datenmengen und f\u00fcr die Verbindung von Campusnetzwerken.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Dark%20Fiber/#vorteile-und-nachteile","title":"\u2696\ufe0f Vorteile und Nachteile","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Dark%20Fiber/#vorteile","title":"Vorteile","text":"<ul> <li>Hohe Bandbreite: Bietet die M\u00f6glichkeit, gro\u00dfe Datenmengen mit hoher Geschwindigkeit zu \u00fcbertragen.</li> <li>Kontrolle und Flexibilit\u00e4t: Unternehmen und Organisationen k\u00f6nnen ihre Netzwerke nach eigenen Bed\u00fcrfnissen gestalten und verwalten.</li> <li>Skalierbarkeit: Kapazit\u00e4t kann bei Bedarf einfach erh\u00f6ht werden, indem zus\u00e4tzliche Fasern aktiviert werden.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Dark%20Fiber/#nachteile","title":"Nachteile","text":"<ul> <li>Hohe Anfangskosten: Die Kosten f\u00fcr das Mieten oder Kaufen von Dark Fiber und die notwendige Ausr\u00fcstung k\u00f6nnen hoch sein.</li> <li>Wartung und Betrieb: Unternehmen m\u00fcssen die Wartung und den Betrieb der Infrastruktur selbst \u00fcbernehmen, was zus\u00e4tzliche Ressourcen erfordert.</li> <li>Verf\u00fcgbarkeit: Dark Fiber ist nicht \u00fcberall verf\u00fcgbar und kann in l\u00e4ndlichen oder weniger dicht besiedelten Gebieten schwer zu finden sein.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Richtungsstrecke/","title":"Richtungsstrecke","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Richtungsstrecke/#definition-und-merkmale","title":"\ud83d\udccc Definition und Merkmale","text":"<p>Eine Richtungsstrecke (auch als Richtfunkstrecke bezeichnet) ist eine Kommunikationsverbindung, die Mikrowellen oder andere Funkwellen nutzt, um Daten \u00fcber gro\u00dfe Entfernungen zu \u00fcbertragen. Diese Art der Kommunikation erfolgt zwischen zwei festen Punkten, oft \u00fcber speziell ausgerichtete Antennen, die eine direkte Sichtlinie zueinander haben m\u00fcssen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Richtungsstrecke/#merkmale-der-richtungsstrecke","title":"\ud83c\udf10 Merkmale der Richtungsstrecke","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Richtungsstrecke/#direkte-sichtlinie","title":"Direkte Sichtlinie","text":"<p>Richtungsstrecken ben\u00f6tigen eine direkte Sichtlinie zwischen den beiden Kommunikationspunkten. Dies bedeutet, dass keine Hindernisse wie Geb\u00e4ude, B\u00e4ume oder Berge die Sichtlinie blockieren d\u00fcrfen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Richtungsstrecke/#hohe-frequenzen","title":"Hohe Frequenzen","text":"<p>Richtungsstrecken nutzen in der Regel hochfrequente Funkwellen, typischerweise im Mikrowellenbereich (1 GHz bis 30 GHz). Diese Frequenzen erm\u00f6glichen die \u00dcbertragung gro\u00dfer Datenmengen \u00fcber weite Entfernungen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Richtungsstrecke/#hohe-bandbreite","title":"Hohe Bandbreite","text":"<p>Aufgrund der Nutzung hoher Frequenzen k\u00f6nnen Richtungsstrecken eine hohe Bandbreite bieten, was sie ideal f\u00fcr die \u00dcbertragung gro\u00dfer Datenmengen macht.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Richtungsstrecke/#punkt-zu-punkt-verbindung","title":"Punkt-zu-Punkt-Verbindung","text":"<p>Richtungsstrecken sind Punkt-zu-Punkt-Verbindungen, was bedeutet, dass die Kommunikation direkt zwischen zwei festen Punkten erfolgt, ohne dass dazwischenliegende Relaisstationen oder Knotenpunkte erforderlich sind.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Richtungsstrecke/#funktionsweise-der-richtungsstrecke","title":"\u2699\ufe0f Funktionsweise der Richtungsstrecke","text":"<ol> <li>Ausrichtung der Antennen: </li> <li> <p>Zwei Parabolantennen oder \u00e4hnliche gerichtete Antennen werden exakt aufeinander ausgerichtet, um eine optimale Signal\u00fcbertragung zu gew\u00e4hrleisten.</p> </li> <li> <p>Signal\u00fcbertragung: </p> </li> <li> <p>Ein Sender wandelt die zu \u00fcbertragenden Daten in hochfrequente Funkwellen um, die dann von der Sendeantenne ausgestrahlt werden.</p> </li> <li> <p>Empfang des Signals: </p> </li> <li> <p>Die Empfangsantenne f\u00e4ngt die Funkwellen auf und ein Empf\u00e4nger wandelt die Funkwellen wieder in nutzbare Daten um.</p> </li> <li> <p>Verst\u00e4rkung und Fehlerkorrektur: </p> </li> <li>Signale k\u00f6nnen unterwegs verst\u00e4rkt und Fehler, die w\u00e4hrend der \u00dcbertragung auftreten, korrigiert werden, um eine zuverl\u00e4ssige Daten\u00fcbertragung sicherzustellen.</li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Richtungsstrecke/#anwendungen-von-richtungsstrecken","title":"\ud83d\udccb Anwendungen von Richtungsstrecken","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Richtungsstrecke/#telekommunikation","title":"Telekommunikation","text":"<p>Richtungsstrecken werden h\u00e4ufig von Telekommunikationsunternehmen genutzt, um Sprach- und Datenverkehr \u00fcber weite Entfernungen zu \u00fcbertragen, insbesondere in l\u00e4ndlichen oder schwer zug\u00e4nglichen Gebieten.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Richtungsstrecke/#rundfunk","title":"Rundfunk","text":"<p>Rundfunkanstalten verwenden Richtungsstrecken, um Fernsehsignale von Studiostandorten zu Sendemasten oder Satellitenstationen zu \u00fcbertragen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Richtungsstrecke/#internet-backbone","title":"Internet-Backbone","text":"<p>Richtungsstrecken dienen als Verbindungen im Internet-Backbone, um Daten zwischen gro\u00dfen Rechenzentren oder Internet-Knotenpunkten zu \u00fcbertragen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Richtungsstrecke/#militar-und-sicherheitsdienste","title":"Milit\u00e4r und Sicherheitsdienste","text":"<p>Richtungsstrecken werden vom Milit\u00e4r und anderen Sicherheitsdiensten genutzt, um sichere Kommunikationsverbindungen in abgelegenen oder strategisch wichtigen Gebieten zu gew\u00e4hrleisten.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Richtungsstrecke/#vorteile-und-nachteile","title":"\u2696\ufe0f Vorteile und Nachteile","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Richtungsstrecke/#vorteile","title":"Vorteile","text":"<ul> <li>Hohe Bandbreite: Erm\u00f6glicht die \u00dcbertragung gro\u00dfer Datenmengen.</li> <li>Zuverl\u00e4ssigkeit: Stabile Verbindung bei direkter Sichtlinie.</li> <li>Schnelle Einrichtung: Schneller Aufbau im Vergleich zu physischen Kabelverbindungen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Richtungsstrecke/#nachteile","title":"Nachteile","text":"<ul> <li>Sichtlinie erforderlich: Hindernisse k\u00f6nnen die \u00dcbertragung st\u00f6ren.</li> <li>Wetterabh\u00e4ngigkeit: Schlechtes Wetter, wie starker Regen oder Schnee, kann die Signalqualit\u00e4t beeintr\u00e4chtigen.</li> <li>Kosten: Hohe Anschaffungskosten f\u00fcr die Ausr\u00fcstung und Installation.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Standleitung/","title":"Standleitung","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Standleitung/#merkmale-von-standleitungen","title":"Merkmale von Standleitungen","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Standleitung/#dedizierte-verbindung","title":"Dedizierte Verbindung","text":"<p>Eine Standleitung ist eine dedizierte Leitung, die ausschlie\u00dflich f\u00fcr den privaten Gebrauch einer Organisation oder eines Unternehmens reserviert ist. Sie wird nicht mit anderen Nutzern geteilt.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Standleitung/#konstante-bandbreite","title":"Konstante Bandbreite","text":"<p>Standleitungen bieten eine konstante Bandbreite, die oft garantiert ist. Im Gegensatz zu herk\u00f6mmlichen Internetverbindungen, bei denen die Bandbreite je nach Netzwerklast schwanken kann, bleibt die Bandbreite einer Standleitung stabil.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Standleitung/#hohe-zuverlassigkeit","title":"Hohe Zuverl\u00e4ssigkeit","text":"<p>Aufgrund der dedizierten Natur und der geringen Wahrscheinlichkeit von St\u00f6rungen bieten Standleitungen eine hohe Zuverl\u00e4ssigkeit und Verf\u00fcgbarkeit. Unternehmen, die auf eine unterbrechungsfreie Kommunikation angewiesen sind, nutzen h\u00e4ufig Standleitungen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Standleitung/#kosten","title":"Kosten","text":"<p>Standleitungen sind in der Regel teurer als regul\u00e4re Internetverbindungen, da sie exklusiv reserviert sind und spezielle Service Level Agreements (SLAs) bieten k\u00f6nnen, die garantierte Verf\u00fcgbarkeit und Support umfassen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Standleitung/#arten-von-standleitungen","title":"Arten von Standleitungen","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Standleitung/#punkt-zu-punkt","title":"Punkt-zu-Punkt","text":"<p>Eine Standleitung, die zwei Standorte miteinander verbindet. Es handelt sich um eine direkte Verbindung ohne Zwischenstationen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Standleitung/#punkt-zu-mehrpunkt","title":"Punkt-zu-Mehrpunkt","text":"<p>Eine Standleitung, die einen zentralen Standort mit mehreren anderen Standorten verbindet. Dies kann f\u00fcr die Verteilung von Daten oder Diensten an verschiedene Niederlassungen verwendet werden.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Standleitung/#internationale-standleitungen","title":"Internationale Standleitungen","text":"<p>Standleitungen, die L\u00e4nder oder Kontinente verbinden und oft von globalen Unternehmen verwendet werden, um eine stabile und schnelle Kommunikation zwischen ihren weltweiten Standorten zu gew\u00e4hrleisten.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Standleitung/#anwendungen-von-standleitungen","title":"Anwendungen von Standleitungen","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Standleitung/#unternehmensnetzwerke","title":"Unternehmensnetzwerke","text":"<p>Gro\u00dfe Unternehmen nutzen Standleitungen, um ihre Zentralen, Zweigstellen und Rechenzentren miteinander zu verbinden, um eine schnelle und sichere Kommunikation zu erm\u00f6glichen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Standleitung/#telekommunikation","title":"Telekommunikation","text":"<p>Telekommunikationsunternehmen verwenden Standleitungen, um Daten zwischen Netzwerkknoten und Hauptvermittlungsstellen zu \u00fcbertragen, um eine zuverl\u00e4ssige Telefon- und Internetdienste anzubieten.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Standleitung/#gesundheitswesen","title":"Gesundheitswesen","text":"<p>Krankenh\u00e4user und medizinische Einrichtungen nutzen Standleitungen f\u00fcr die \u00dcbertragung von medizinischen Daten wie Patientenakten und Bildern zwischen verschiedenen Standorten.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Mediennutzung/Standleitung/#bildungseinrichtungen","title":"Bildungseinrichtungen","text":"<p>Universit\u00e4ten und Schulen verwenden Standleitungen, um ihre verschiedenen Campus miteinander zu verbinden und den Austausch von Daten und Ressourcen zu erleichtern.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten/Verbindungslose%20Kommunikation/","title":"Verbindungslose Kommunikation","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten/Verbindungslose%20Kommunikation/#merkmale-der-verbindungslosen-kommunikation","title":"\ud83d\udccc Merkmale der verbindungslosen Kommunikation","text":"<ol> <li> <p>Kein Verbindungsaufbau: </p> <ul> <li>Bei der verbindungslosen Kommunikation werden Daten ohne vorherigen Aufbau einer Verbindung \u00fcbertragen. Es gibt keine initialen Handshake-Schritte wie bei der verbindungsorientierten Kommunikation.</li> </ul> </li> <li> <p>Unzuverl\u00e4ssig: </p> <ul> <li>Es gibt keine Garantie daf\u00fcr, dass die Daten in der richtigen Reihenfolge ankommen oder \u00fcberhaupt ankommen. Es erfolgt keine R\u00fcckmeldung oder Best\u00e4tigung (ACK) vom Empf\u00e4nger.</li> </ul> </li> <li> <p>Keine Flusskontrolle: </p> <ul> <li>Der Sender sendet Daten so schnell wie m\u00f6glich, ohne R\u00fccksicht auf die Verarbeitungsgeschwindigkeit des Empf\u00e4ngers. Dies kann zu \u00dcberlastungen oder Datenverlusten f\u00fchren.</li> </ul> </li> <li> <p>Effizienz: </p> <ul> <li>Verbindungslose Kommunikation ist effizienter in Bezug auf Netzwerkressourcen, da kein Aufwand f\u00fcr die Verbindungsherstellung und -aufrechterhaltung erforderlich ist.</li> </ul> </li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten/Verbindungslose%20Kommunikation/#funktionsweise-der-verbindungslosen-kommunikation","title":"\u2699\ufe0f Funktionsweise der verbindungslosen Kommunikation","text":"<ol> <li> <p>Direkter Datenaustausch: </p> <ul> <li>Der Sender sendet Datenpakete direkt an die Adresse des Empf\u00e4ngers, ohne vorherige Einrichtung einer Verbindung oder \u00dcberpr\u00fcfung der Erreichbarkeit.</li> </ul> </li> <li> <p>Keine Best\u00e4tigung: </p> <ul> <li>Es erfolgt keine Best\u00e4tigung, ob die Datenpakete erfolgreich angekommen sind. Der Sender sendet die Daten und geht davon aus, dass sie entweder ankommen oder verloren gehen k\u00f6nnen.</li> </ul> </li> <li> <p>Verwendete Protokolle: </p> <ul> <li>Ein Beispiel f\u00fcr ein verbindungsloses Protokoll ist UDP (User Datagram Protocol). UDP wird h\u00e4ufig f\u00fcr Anwendungen verwendet, bei denen eine schnelle \u00dcbertragung und geringe Latenz wichtiger sind als Zuverl\u00e4ssigkeit.</li> </ul> </li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten/Verbindungslose%20Kommunikation/#beispiele-fur-verbindungslose-kommunikation","title":"\ud83d\udccb Beispiele f\u00fcr verbindungslose Kommunikation","text":"<ul> <li> <p>Streaming: </p> <ul> <li>Beim Streaming von Audio oder Video \u00fcber das Internet werden Datenpakete verbindungslos \u00fcbertragen. Eine perfekte Wiedergabe ohne Unterbrechungen ist wichtiger als die garantierte Zustellung jedes Pakets.</li> </ul> </li> <li> <p>DNS (Domain Name System): </p> <ul> <li>DNS-Anfragen werden oft mit UDP gesendet, da eine schnelle Antwort wichtiger ist als die Gew\u00e4hrleistung, dass jede Anfrage erfolgreich beantwortet wird.</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten/Verbindungsorientierter%20Kommunikation/","title":"Verbindungsorientierter Kommunikation","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten/Verbindungsorientierter%20Kommunikation/#merkmale-der-verbindungsorientierten-kommunikation","title":"\ud83d\udccc Merkmale der verbindungsorientierten Kommunikation","text":"<ol> <li> <p>Aufbau einer Verbindung: </p> <ul> <li>Bevor Daten \u00fcbertragen werden k\u00f6nnen, wird eine explizite Verbindung zwischen Sender und Empf\u00e4nger etabliert. Dieser Aufbau beinhaltet in der Regel einen Austausch von Steuerinformationen, um die Kommunikationsparameter festzulegen.</li> </ul> </li> <li> <p>Zuverl\u00e4ssigkeit: </p> <ul> <li>Verbindungsorientierte Kommunikation garantiert, dass Daten in der richtigen Reihenfolge und ohne Verluste \u00fcbertragen werden. Dies wird durch Mechanismen wie Sequenznummern, Best\u00e4tigungen und erneute \u00dcbertragungen sichergestellt.</li> </ul> </li> <li> <p>Flusskontrolle: </p> <ul> <li>Mechanismen zur Flusskontrolle regulieren den Datenfluss, um \u00dcberlastungen des Empf\u00e4ngers zu vermeiden. Der Sender passt die \u00dcbertragungsgeschwindigkeit an die Verarbeitungsf\u00e4higkeit des Empf\u00e4ngers an.</li> </ul> </li> <li> <p>Verbindungsabbau: </p> <ul> <li>Nach der Daten\u00fcbertragung wird die Verbindung ordnungsgem\u00e4\u00df abgebaut. Dies erm\u00f6glicht eine Freigabe von Ressourcen und stellt sicher, dass beide Parteien wissen, dass die Kommunikation beendet ist.</li> </ul> </li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten/Verbindungsorientierter%20Kommunikation/#funktionsweise-der-verbindungsorientierten-kommunikation","title":"\u2699\ufe0f Funktionsweise der verbindungsorientierten Kommunikation","text":"<ol> <li> <p>Verbindungsaufbau: </p> <ul> <li>Der Prozess beginnt mit einer Anfrage (SYN) des Senders an den Empf\u00e4nger, gefolgt von einer Best\u00e4tigung (SYN-ACK) des Empf\u00e4ngers zur\u00fcck an den Sender und einer abschlie\u00dfenden Best\u00e4tigung (ACK) vom Sender an den Empf\u00e4nger.</li> </ul> </li> <li> <p>Daten\u00fcbertragung: </p> <ul> <li>Nach erfolgreicher Verbindungsaufbau sendet der Sender Datenpakete an den Empf\u00e4nger. Jedes Paket wird durchnummeriert, und der Empf\u00e4nger sendet R\u00fcckmeldungen (ACKs) zur\u00fcck, um den Erhalt zu best\u00e4tigen.</li> </ul> </li> <li> <p>Flusskontrolle und Fehlerbehandlung: </p> <ul> <li>Mechanismen wie Fenstersteuerung und erneute \u00dcbertragung von verlorenen oder besch\u00e4digten Paketen gew\u00e4hrleisten eine zuverl\u00e4ssige \u00dcbertragung.</li> </ul> </li> <li> <p>Verbindungsabbau: </p> <ul> <li>Nach Abschluss der Daten\u00fcbertragung wird die Verbindung durch einen Austausch von Abschlussnachrichten (FIN und ACK) beendet. Dieser Prozess stellt sicher, dass alle Daten vollst\u00e4ndig \u00fcbertragen wurden und die Ressourcen freigegeben werden k\u00f6nnen.</li> </ul> </li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten/Verbindungsorientierter%20Kommunikation/#beispiele-fur-verbindungsorientierte-kommunikation","title":"\ud83d\udccb Beispiele f\u00fcr verbindungsorientierte Kommunikation","text":"<ul> <li> <p>TCP (Transmission Control Protocol): </p> <ul> <li>TCP ist ein prominentes Beispiel f\u00fcr verbindungsorientierte Kommunikation. Es stellt sicher, dass Daten zwischen Anwendungen \u00fcber das Internet in der richtigen Reihenfolge und ohne Verluste \u00fcbertragen werden.</li> </ul> </li> <li> <p>Telefonie: </p> <ul> <li>Bei traditionellen Telefonanrufen wird eine Verbindung zwischen den Anrufern hergestellt, die w\u00e4hrend des Gespr\u00e4chs erhalten bleibt, bis sie von einer der Parteien beendet wird.</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten-Leitungen/Leitungsvermittlung/","title":"Leitungsvermittlung","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten-Leitungen/Leitungsvermittlung/#leitungsvermittlung","title":"\ud83d\udccc Leitungsvermittlung","text":"<p>Leitungsvermittlung ist eine Technik in der Telekommunikation und Netzwerktechnik, bei der ein dedizierter Kommunikationspfad zwischen zwei Endpunkten f\u00fcr die Dauer einer Sitzung eingerichtet und aufrechterhalten wird. Diese Technik stellt sicher, dass die gesamte \u00dcbertragungsstrecke f\u00fcr die Kommunikationspartner reserviert bleibt, bis die Verbindung beendet wird.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten-Leitungen/Leitungsvermittlung/#schaltung-eines-pfad-uber-mehrere-knoten-fur-die-datenubertragung","title":"Schaltung eines Pfad \u00fcber mehrere Knoten f\u00fcr die Daten\u00fcbertragung","text":"<p>Bei der Leitungsvermittlung wird ein kontinuierlicher Pfad von einem Startknoten zu einem Endknoten \u00fcber mehrere Zwischenknoten (Netzwerkger\u00e4te wie Router und Switches) geschaltet. Dieser Pfad wird f\u00fcr die gesamte Dauer der Kommunikation reserviert und exklusiv genutzt. Beispiele f\u00fcr Leitungsvermittlung sind herk\u00f6mmliche Telefonnetzwerke (PSTN), bei denen eine physische Verbindung zwischen den Teilnehmern f\u00fcr die Dauer des Anrufs besteht.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten-Leitungen/Leitungsvermittlung/#alle-teilstrecken-wiesen-identische-eigenschaften-wie-zb-gleiche-bandbreite-auf","title":"Alle Teilstrecken wiesen identische Eigenschaften wie z.B. gleiche Bandbreite auf","text":"<p>In einem leitungsvermittelten Netzwerk haben alle Teilstrecken des geschalteten Pfades identische Eigenschaften, wie z.B. die gleiche Bandbreite, Latenz und \u00dcbertragungsqualit\u00e4t. Dies gew\u00e4hrleistet eine konsistente und vorhersehbare \u00dcbertragungsqualit\u00e4t, da die gesamte Strecke f\u00fcr die Dauer der Verbindung exklusiv genutzt wird.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten-Leitungen/Leitungsvermittlung/#pfad-wahrend-der-ubertragung-unveranderlich","title":"Pfad w\u00e4hrend der \u00dcbertragung unver\u00e4nderlich","text":"<p>Einmal eingerichtet, bleibt der Pfad w\u00e4hrend der gesamten \u00dcbertragung unver\u00e4ndert. Das bedeutet, dass alle Datenpakete \u00fcber denselben Weg von der Quelle zum Ziel gesendet werden, ohne dass der Pfad dynamisch ge\u00e4ndert oder neu konfiguriert wird. Dies unterscheidet sich von paketvermittelten Netzwerken, bei denen Datenpakete unterschiedliche Wege nehmen k\u00f6nnen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten-Leitungen/Leitungsvermittlung/#eigenschaften-und-vorteile-der-leitungsvermittlung","title":"\ud83d\udee0\ufe0f Eigenschaften und Vorteile der Leitungsvermittlung","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten-Leitungen/Leitungsvermittlung/#konsistente-verbindungsqualitat","title":"Konsistente Verbindungsqualit\u00e4t","text":"<p>Da der Pfad w\u00e4hrend der \u00dcbertragung unver\u00e4ndert bleibt und identische Eigenschaften aufweist, ist die Qualit\u00e4t der Verbindung konsistent und vorhersehbar.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten-Leitungen/Leitungsvermittlung/#exklusive-nutzung-der-bandbreite","title":"Exklusive Nutzung der Bandbreite","text":"<p>Die gesamte Bandbreite des Pfades steht ausschlie\u00dflich den beiden Kommunikationspartnern zur Verf\u00fcgung, was zu minimalen Verz\u00f6gerungen und geringen Schwankungen f\u00fchrt.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten-Leitungen/Leitungsvermittlung/#geeignet-fur-echtzeitanwendungen","title":"Geeignet f\u00fcr Echtzeitanwendungen","text":"<p>Leitungsvermittlung ist besonders vorteilhaft f\u00fcr Echtzeitanwendungen wie Sprach- und Videoanrufe, bei denen eine stabile und konstante Verbindung entscheidend ist.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten-Leitungen/Leitungsvermittlung/#anwendungen-der-leitungsvermittlung","title":"\ud83d\ude80 Anwendungen der Leitungsvermittlung","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten-Leitungen/Leitungsvermittlung/#telefonnetzwerke-pstn","title":"Telefonnetzwerke (PSTN)","text":"<p>In herk\u00f6mmlichen Festnetztelefonen wird f\u00fcr jeden Anruf ein dedizierter Pfad durch das Netzwerk geschaltet, der f\u00fcr die Dauer des Anrufs reserviert bleibt.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten-Leitungen/Leitungsvermittlung/#isdn-integrated-services-digital-network","title":"ISDN (Integrated Services Digital Network)","text":"<p>ISDN verwendet Leitungsvermittlung f\u00fcr die \u00dcbertragung von Sprach- und Datenkommunikation, indem es dedizierte Leitungen f\u00fcr die Dauer der Verbindung schaltet.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten-Leitungen/Leitungsvermittlung/#dedizierte-verbindungen-in-firmennetzwerken","title":"Dedizierte Verbindungen in Firmennetzwerken","text":"<p>Unternehmen k\u00f6nnen leitungsvermittelte Verbindungen nutzen, um sichere und zuverl\u00e4ssige Kommunikationswege zwischen verschiedenen Standorten zu gew\u00e4hrleisten.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten-Leitungen/Leitungsvermittlung/#nachteile-der-leitungsvermittlung","title":"\u2696\ufe0f Nachteile der Leitungsvermittlung","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten-Leitungen/Leitungsvermittlung/#ineffiziente-nutzung-von-ressourcen","title":"Ineffiziente Nutzung von Ressourcen","text":"<p>Da der gesamte Pfad exklusiv f\u00fcr die Verbindung reserviert bleibt, auch wenn keine Daten \u00fcbertragen werden, kann dies zu einer ineffizienten Nutzung von Netzwerkressourcen f\u00fchren.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten-Leitungen/Leitungsvermittlung/#hohe-kosten","title":"Hohe Kosten","text":"<p>Das Aufrechterhalten und Betreiben von leitungsvermittelten Netzwerken kann teuer sein, insbesondere bei der Nutzung von Langstreckenverbindungen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten-Leitungen/Leitungsvermittlung/#begrenzte-flexibilitat","title":"Begrenzte Flexibilit\u00e4t","text":"<p>Die Notwendigkeit eines dedizierten Pfades macht leitungsvermittelte Netzwerke weniger flexibel und schwieriger anzupassen, wenn sich die Netzwerkanforderungen \u00e4ndern.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten-Leitungen/Pfadarten/","title":"Pfadarten","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten-Leitungen/Pfadarten/#pfadarten","title":"\ud83d\udccc Pfadarten","text":"<p>In der Netzwerktechnik gibt es verschiedene Arten von Pfaden, die f\u00fcr die Daten\u00fcbertragung zwischen Knoten verwendet werden. Diese Pfade k\u00f6nnen entweder permanent, dynamisch oder virtuell sein, abh\u00e4ngig von der Art und Weise, wie sie eingerichtet und verwaltet werden.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten-Leitungen/Pfadarten/#permanent-virtual-circuit-pvc","title":"Permanent Virtual Circuit (PVC)","text":"<p>Permanent Virtual Circuit (PVC) ist ein fester, vorab eingerichteter virtueller Pfad in einem Netzwerk, der dauerhaft verf\u00fcgbar ist. </p> <ul> <li>Fest eingerichteter Pfad:</li> <li>PVCs werden einmal konfiguriert und bleiben bestehen, bis sie manuell ge\u00e4ndert oder gel\u00f6scht werden.</li> <li>Sie bieten eine konstante und vorhersehbare Verbindung zwischen zwei Endpunkten.</li> <li>Anwendung: Weitverkehrsnetzwerke (WANs), wo konstante und stabile Verbindungen erforderlich sind, wie z.B. bei festen Verbindungen zwischen Unternehmensstandorten.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten-Leitungen/Pfadarten/#switched-virtual-circuit-svc","title":"Switched Virtual Circuit (SVC)","text":"<p>Switched Virtual Circuit (SVC) ist ein virtueller Pfad, der bei Bedarf dynamisch aufgebaut und nach Abschluss der Kommunikation wieder abgebaut wird.</p> <ul> <li>Dynamisch auf- und abgebauter Pfad:</li> <li>SVCs werden bei Bedarf eingerichtet und bestehen nur f\u00fcr die Dauer der Daten\u00fcbertragung.</li> <li>Sie bieten Flexibilit\u00e4t und Effizienz, da Ressourcen nur bei tats\u00e4chlicher Nutzung beansprucht werden.</li> <li>Anwendung: Paketvermittelte Netzwerke wie Frame Relay oder ATM, wo Verbindungen h\u00e4ufig nur f\u00fcr kurze Kommunikationssitzungen ben\u00f6tigt werden.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten-Leitungen/Pfadarten/#virtual-circuit","title":"Virtual Circuit","text":"<p>Virtual Circuit ist ein allgemeiner Begriff f\u00fcr eine virtuelle Verbindung in einem Netzwerk, die wie eine physische Verbindung wirkt, aber tats\u00e4chlich \u00fcber gemeinsam genutzte physische Infrastruktur realisiert wird.</p> <ul> <li>Virtueller Pfad:</li> <li>Virtuelle Schaltkreise k\u00f6nnen sowohl PVCs als auch SVCs umfassen.</li> <li>Sie nutzen logische Verbindungen innerhalb eines physischen Netzwerks, um Daten zwischen Endpunkten zu \u00fcbertragen.</li> <li>Virtuelle Schaltkreise gew\u00e4hrleisten eine geordnete und zuverl\u00e4ssige Daten\u00fcbertragung, indem sie sicherstellen, dass Datenpakete in der richtigen Reihenfolge und ohne Duplikate ankommen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten-Leitungen/Pfadarten/#anwendungen-von-virtual-circuits","title":"\ud83d\ude80 Anwendungen von Virtual Circuits","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten-Leitungen/Pfadarten/#frame-relay","title":"Frame Relay","text":"<p>Frame Relay ist ein WAN-Protokoll, das sowohl PVCs als auch SVCs unterst\u00fctzt und virtuelle Schaltkreise verwendet, um effiziente und flexible Datenverbindungen zu erm\u00f6glichen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten-Leitungen/Pfadarten/#asynchronous-transfer-mode-atm","title":"Asynchronous Transfer Mode (ATM)","text":"<p>ATM nutzt virtuelle Schaltkreise f\u00fcr die \u00dcbertragung von Daten in kleinen, festen Zellen. Es unterst\u00fctzt sowohl PVCs als auch SVCs und bietet hohe Geschwindigkeit und Effizienz.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten-Leitungen/Pfadarten/#multi-protocol-label-switching-mpls","title":"Multi-Protocol Label Switching (MPLS)","text":"<p>MPLS verwendet virtuelle Schaltkreise, um Datenpakete durch ein Netzwerk basierend auf Labels zu leiten. Es bietet flexible und skalierbare Netzwerkverbindungen, die sowohl PVC- als auch SVC-\u00e4hnliche Eigenschaften haben k\u00f6nnen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten-Leitungen/Pfadarten/#vorteile-und-nachteile-der-pfadarten","title":"\u2696\ufe0f Vorteile und Nachteile der Pfadarten","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten-Leitungen/Pfadarten/#permanent-virtual-circuit-pvc_1","title":"Permanent Virtual Circuit (PVC)","text":"<p>Vorteile: - Stabile und konstante Verbindung. - Vorhersehbare Leistung und Zuverl\u00e4ssigkeit.</p> <p>Nachteile: - Ineffiziente Nutzung von Ressourcen, da die Verbindung st\u00e4ndig aufrechterhalten wird. - Hohe Kosten f\u00fcr die Einrichtung und Wartung.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten-Leitungen/Pfadarten/#switched-virtual-circuit-svc_1","title":"Switched Virtual Circuit (SVC)","text":"<p>Vorteile: - Effiziente Ressourcennutzung, da Verbindungen nur bei Bedarf hergestellt werden. - Flexibilit\u00e4t und Anpassungsf\u00e4higkeit an wechselnde Netzwerkbed\u00fcrfnisse.</p> <p>Nachteile: - Potenzielle Verz\u00f6gerungen beim Verbindungsaufbau. - M\u00f6gliche Schwankungen in der Verbindungsqualit\u00e4t und -stabilit\u00e4t.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Verbindungsarten-Leitungen/Pfadarten/#virtual-circuit_1","title":"Virtual Circuit","text":"<p>Vorteile: - Geordnete und zuverl\u00e4ssige Daten\u00fcbertragung. - Flexibilit\u00e4t in der Nutzung physischer Netzwerkressourcen.</p> <p>Nachteile: - Komplexit\u00e4t bei der Verwaltung und Konfiguration. - Abh\u00e4ngigkeit von der zugrunde liegenden physischen Infrastruktur.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Jitter/","title":"Jitter","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Jitter/#was-ist-jitter","title":"\ud83d\udccc Was ist Jitter?","text":"<p>Jitter bezeichnet die Schwankungen in der Latenz von Datenpaketen, die durch ein Netzwerk \u00fcbertragen werden. In einem idealen Netzwerk w\u00fcrden Pakete in gleichm\u00e4\u00dfigen Abst\u00e4nden ankommen. Jitter tritt auf, wenn diese Intervalle variieren, was zu ungleichm\u00e4\u00dfigen \u00dcbertragungen f\u00fchrt.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Jitter/#ursachen-und-komponenten-von-jitter","title":"\ud83d\udcd0 Ursachen und Komponenten von Jitter","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Jitter/#netzwerkauslastung","title":"Netzwerkauslastung","text":"<ul> <li>Netzwerkauslastung: Bei hoher Auslastung eines Netzwerks m\u00fcssen Datenpakete m\u00f6glicherweise in Warteschlangen warten, bevor sie weitergeleitet werden k\u00f6nnen. Diese Warteschlangen f\u00fchren zu unterschiedlichen Wartezeiten und damit zu Jitter.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Jitter/#netzwerkgerate","title":"Netzwerkger\u00e4te","text":"<ul> <li>Netzwerkger\u00e4te: Router und Switches k\u00f6nnen Jitter verursachen, wenn sie unterschiedlich lange f\u00fcr die Verarbeitung und Weiterleitung von Paketen ben\u00f6tigen. Dies h\u00e4ngt oft von der aktuellen Last und den Priorisierungsmechanismen ab.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Jitter/#ubertragungsfehler","title":"\u00dcbertragungsfehler","text":"<ul> <li>\u00dcbertragungsfehler: Fehlerhafte Pakete m\u00fcssen erneut gesendet werden, was zu unregelm\u00e4\u00dfigen Ankunftszeiten der Pakete f\u00fchrt. Dies kann durch physikalische St\u00f6rungen im \u00dcbertragungsmedium verursacht werden.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Jitter/#paketpriorisierung","title":"Paketpriorisierung","text":"<ul> <li>Paketpriorisierung: Wenn bestimmte Pakete bevorzugt behandelt werden (z.B. bei QoS-Mechanismen), k\u00f6nnen andere Pakete l\u00e4ngere Verz\u00f6gerungen erfahren, was zu Jitter f\u00fchrt.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Jitter/#anwendungen-und-auswirkungen-von-jitter","title":"\ud83d\ude80 Anwendungen und Auswirkungen von Jitter","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Jitter/#online-gaming","title":"Online-Gaming","text":"<ul> <li>Online-Gaming: Jitter kann zu unvorhersehbaren Verz\u00f6gerungen f\u00fchren, die die Reaktionsf\u00e4higkeit und das Spielerlebnis beeintr\u00e4chtigen. Ein gleichm\u00e4\u00dfiger Datenfluss ist entscheidend f\u00fcr eine fl\u00fcssige Spielerfahrung.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Jitter/#voip-und-videoanrufe","title":"VoIP und Videoanrufe","text":"<ul> <li>VoIP und Videoanrufe: Jitter kann Sprach- und Videokommunikation stark beeintr\u00e4chtigen, indem es zu Echos, Verzerrungen und Aussetzern f\u00fchrt. Eine gleichm\u00e4\u00dfige \u00dcbertragung ist notwendig, um eine klare und verst\u00e4ndliche Kommunikation zu gew\u00e4hrleisten.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Jitter/#streaming","title":"Streaming","text":"<ul> <li>Streaming: Hoher Jitter kann Pufferprobleme und Unterbrechungen bei der Wiedergabe von Videos und Musik verursachen. Ein gleichm\u00e4\u00dfiger Datenstrom ist wichtig, um kontinuierliches Streaming zu erm\u00f6glichen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Jitter/#finanzhandel","title":"Finanzhandel","text":"<ul> <li>Finanzhandel: In hochfrequenten Handelssystemen kann Jitter zu unvorhersehbaren Verz\u00f6gerungen f\u00fchren, die die Geschwindigkeit und Zuverl\u00e4ssigkeit von Transaktionen beeintr\u00e4chtigen k\u00f6nnen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Jitter/#messen-und-reduzieren-von-jitter","title":"\u2696\ufe0f Messen und Reduzieren von Jitter","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Jitter/#messung-von-jitter","title":"Messung von Jitter","text":"<ul> <li>Ping: Ein einfaches Tool, das die Latenzzeit von mehreren aufeinanderfolgenden Pings misst und die Variation dieser Zeiten berechnet.</li> <li>Traceroute: Zeigt die Latenzzeit zu jedem Knoten auf dem Pfad zum Ziel an, was helfen kann, Jitterquellen zu identifizieren.</li> <li>Jitter-Analyse-Tools: Spezialisierte Software- und Hardware-Tools, die detaillierte Jitter-Analysen durchf\u00fchren und Echtzeitdaten bereitstellen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Jitter/#reduzierung-von-jitter","title":"Reduzierung von Jitter","text":"<ul> <li>Qualit\u00e4tssicherung (QoS): Implementierung von QoS-Mechanismen, um zeitkritische Datenpakete zu priorisieren und eine gleichm\u00e4\u00dfige \u00dcbertragung zu gew\u00e4hrleisten.</li> <li>Netzwerkoptimierung: Verwendung von Hochleistungsnetzwerkger\u00e4ten und Optimierung der Netzwerkarchitektur, um Engp\u00e4sse zu vermeiden.</li> <li>Pufferung: Einsatz von Jitter-Puffern in Endger\u00e4ten, um Schwankungen in der Paketankunftszeit auszugleichen und eine gleichm\u00e4\u00dfige Datenwiedergabe zu erm\u00f6glichen.</li> <li>Vermeidung von Netzwerkkonflikten: Sicherstellung, dass das Netzwerk nicht \u00fcberlastet wird, und Vermeidung von Netzwerkkonflikten, die Jitter verursachen k\u00f6nnen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Latenz/","title":"Latenz","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Latenz/#was-ist-latenz","title":"\ud83d\udccc Was ist Latenz?","text":"<p>Latenz ist die Verz\u00f6gerung, die bei der \u00dcbertragung von Daten von einem Punkt zu einem anderen in einem Netzwerk auftritt. Sie ist ein wichtiger Parameter, der die Leistung und Qualit\u00e4t von Netzwerken beeinflusst, insbesondere bei Echtzeitanwendungen wie Online-Spielen, Videoanrufen und anderen zeitkritischen Kommunikationsdiensten.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Latenz/#komponenten-der-latenz","title":"\ud83d\udcd0 Komponenten der Latenz","text":"<p>Die Gesamtlatenz in einem Netzwerk setzt sich aus mehreren Komponenten zusammen:</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Latenz/#verarbeitungslatenz","title":"Verarbeitungslatenz","text":"<ul> <li>Verarbeitungslatenz ist die Zeit, die Netzwerkger\u00e4te wie Router und Switches ben\u00f6tigen, um Datenpakete zu empfangen, zu analysieren und weiterzuleiten.</li> <li>Diese Latenz ist abh\u00e4ngig von der Geschwindigkeit und Effizienz der Ger\u00e4te und deren internen Verarbeitungskapazit\u00e4t.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Latenz/#wartelatenz","title":"Wartelatenz","text":"<ul> <li>Wartelatenz tritt auf, wenn Datenpakete in Warteschlangen innerhalb von Netzwerkger\u00e4ten oder auf \u00dcbertragungswegen warten m\u00fcssen, bevor sie weitergeleitet werden k\u00f6nnen.</li> <li>Diese Latenz ist stark abh\u00e4ngig von der Auslastung des Netzwerks und kann bei hoher Netzwerkauslastung erheblich ansteigen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Latenz/#ubertragungslatenz","title":"\u00dcbertragungslatenz","text":"<ul> <li>\u00dcbertragungslatenz ist die Zeit, die ein Datenpaket ben\u00f6tigt, um \u00fcber ein physisches Medium (z. B. Kupferkabel, Glasfaserkabel, Funkstrecken) von einem Knoten zum n\u00e4chsten zu gelangen.</li> <li>Sie wird durch die physikalischen Eigenschaften des \u00dcbertragungsmediums und die Entfernung zwischen den Knoten bestimmt.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Latenz/#propagationslatenz","title":"Propagationslatenz","text":"<ul> <li>Propagationslatenz ist die Zeit, die das Signal ben\u00f6tigt, um sich durch das \u00dcbertragungsmedium zu bewegen.</li> <li>Diese Latenz ist direkt proportional zur Entfernung zwischen den Knoten und zur Geschwindigkeit des Signals im Medium (z. B. Lichtgeschwindigkeit in Glasfasern).</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Latenz/#faktoren-die-die-latenz-beeinflussen","title":"\ud83c\udf10 Faktoren, die die Latenz beeinflussen","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Latenz/#entfernung","title":"Entfernung","text":"<ul> <li>Entfernung: Je weiter die Daten reisen m\u00fcssen, desto gr\u00f6\u00dfer ist die Latenz aufgrund der l\u00e4ngeren Propagationszeit.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Latenz/#netzwerkhardware","title":"Netzwerkhardware","text":"<ul> <li>Netzwerkhardware: Hochleistungsrouter und Switches mit schnellen Prozessoren und gro\u00dfen Puffern k\u00f6nnen die Verarbeitungslatenz und Wartelatenz reduzieren.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Latenz/#netzwerkauslastung","title":"Netzwerkauslastung","text":"<ul> <li>Netzwerkauslastung: Bei hoher Auslastung des Netzwerks steigen die Wartelatenzen aufgrund von \u00dcberlastung und Warteschlangenbildung.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Latenz/#art-des-ubertragungsmediums","title":"Art des \u00dcbertragungsmediums","text":"<ul> <li>Art des \u00dcbertragungsmediums: Glasfaserkabel haben geringere \u00dcbertragungslatenzen im Vergleich zu Kupferkabeln und Funkverbindungen, da Lichtsignale sich schneller ausbreiten als elektrische Signale und Funkwellen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Latenz/#anwendungen-und-auswirkungen-der-latenz","title":"\ud83d\ude80 Anwendungen und Auswirkungen der Latenz","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Latenz/#online-gaming","title":"Online-Gaming","text":"<ul> <li>Online-Gaming: Niedrige Latenz ist entscheidend f\u00fcr eine reaktionsschnelle und fl\u00fcssige Spielerfahrung. Hohe Latenzen f\u00fchren zu Verz\u00f6gerungen (Lags), die das Spielgef\u00fchl beeintr\u00e4chtigen k\u00f6nnen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Latenz/#voip-und-videoanrufe","title":"VoIP und Videoanrufe","text":"<ul> <li>VoIP und Videoanrufe: Echtzeitkommunikation erfordert geringe Latenzen, um Sprachverz\u00f6gerungen und Echoeffekte zu minimieren und eine klare, unterbrechungsfreie Konversation zu erm\u00f6glichen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Latenz/#streaming","title":"Streaming","text":"<ul> <li>Streaming: Video- und Audiostreaming-Dienste ben\u00f6tigen geringe Latenzen, um Pufferzeiten zu minimieren und eine nahtlose Wiedergabe zu gew\u00e4hrleisten.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Latenz/#finanzhandel","title":"Finanzhandel","text":"<ul> <li>Finanzhandel: In Hochfrequenzhandelssystemen ist eine niedrige Latenz entscheidend, da jede Millisekunde z\u00e4hlt und die Geschwindigkeit der Transaktionen einen erheblichen Einfluss auf den Erfolg haben kann.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Latenz/#messen-und-reduzieren-der-latenz","title":"\u2696\ufe0f Messen und Reduzieren der Latenz","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Latenz/#messung-der-latenz","title":"Messung der Latenz","text":"<ul> <li>Ping: Ein h\u00e4ufig verwendetes Tool, das ICMP-Echoanforderungen sendet und die Zeit misst, die f\u00fcr den Hin- und R\u00fcckweg ben\u00f6tigt wird.</li> <li>Traceroute: Ein Tool, das die Pfade und die Latenzzeiten zu jedem Knoten auf dem Weg zu einem Ziel aufzeichnet.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/Zeitbezogene%20Eigenschaften/Latenz/#reduzierung-der-latenz","title":"Reduzierung der Latenz","text":"<ul> <li>Optimierung der Netzwerkarchitektur: Verwendung von Hochleistungsger\u00e4ten und direkteren Verbindungen.</li> <li>Traffic-Management: Priorisierung zeitkritischer Datenstr\u00f6me und Lastverteilung.</li> <li>Reduzierung der Entfernung: Nutzung von Content Delivery Networks (CDNs), um Inhalte n\u00e4her an die Endnutzer zu bringen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Asynchrone%20%C3%9Cbertragung/","title":"Asynchrone \u00dcbertragung","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Asynchrone%20%C3%9Cbertragung/#was-ist-asynchrone-ubertragung","title":"\ud83d\udccc Was ist Asynchrone \u00dcbertragung?","text":"<p>Asynchrone \u00dcbertragung ist eine Methode der Daten\u00fcbertragung, bei der Datenpakete unabh\u00e4ngig voneinander gesendet werden, ohne dass ein synchronisierter Zeitplan zwischen Sender und Empf\u00e4nger erforderlich ist. Jede Einheit der Daten\u00fcbertragung wird separat mit Start- und Stoppbits versehen, um den Anfang und das Ende der \u00dcbertragung zu kennzeichnen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Asynchrone%20%C3%9Cbertragung/#merkmale-der-asynchronen-ubertragung","title":"\ud83d\udd70\ufe0f Merkmale der Asynchronen \u00dcbertragung","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Asynchrone%20%C3%9Cbertragung/#start-und-stoppbits","title":"Start- und Stoppbits","text":"<ul> <li>Startbit: Ein Bit, das den Beginn eines Datenpakets signalisiert.</li> <li>Stoppbit: Ein oder mehrere Bits, die das Ende eines Datenpakets markieren.</li> <li>Diese Bits erm\u00f6glichen es dem Empf\u00e4nger, die Ankunft und die Grenzen der Datenpakete zu erkennen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Asynchrone%20%C3%9Cbertragung/#kein-fester-zeitplan","title":"Kein fester Zeitplan","text":"<ul> <li>Kein fester Zeitplan: Daten werden gesendet, sobald sie verf\u00fcgbar sind, ohne dass der Sender und Empf\u00e4nger synchronisiert sein m\u00fcssen.</li> <li>Flexibilit\u00e4t: Asynchrone \u00dcbertragung ist flexibel und eignet sich gut f\u00fcr unregelm\u00e4\u00dfige und intermittierende Datenstr\u00f6me.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Asynchrone%20%C3%9Cbertragung/#charakterbasierte-ubertragung","title":"Charakterbasierte \u00dcbertragung","text":"<ul> <li>Charakterbasierte \u00dcbertragung: H\u00e4ufig wird jedes Datenpaket als Zeichen (z.B. ein Byte) \u00fcbertragen, das durch die Start- und Stoppbits eingerahmt wird.</li> <li>Einfachheit: Diese Methode ist einfach zu implementieren und weit verbreitet in der seriellen Kommunikation.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Asynchrone%20%C3%9Cbertragung/#anwendungen-der-asynchronen-ubertragung","title":"\ud83d\ude80 Anwendungen der Asynchronen \u00dcbertragung","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Asynchrone%20%C3%9Cbertragung/#serielle-kommunikation","title":"Serielle Kommunikation","text":"<ul> <li>Serielle Kommunikation: Verwendung in RS-232- und UART-Verbindungen, die h\u00e4ufig in Computern, Mikrocontrollern und anderen elektronischen Ger\u00e4ten zu finden sind.</li> <li>Beispiel: Daten\u00fcbertragung zwischen Computern und Peripherieger\u00e4ten wie Tastaturen und M\u00e4usen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Asynchrone%20%C3%9Cbertragung/#modems","title":"Modems","text":"<ul> <li>Modems: Asynchrone \u00dcbertragung wird in Modems verwendet, um Daten \u00fcber Telefonleitungen zu \u00fcbertragen.</li> <li>Beispiel: Einwahl-Internetverbindungen, bei denen Datenpakete \u00fcber analoge Telefonleitungen gesendet werden.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Asynchrone%20%C3%9Cbertragung/#asynchrone-kommunikationsprotokolle","title":"Asynchrone Kommunikationsprotokolle","text":"<ul> <li>Asynchrone Kommunikationsprotokolle: Protokolle wie XMODEM, YMODEM und ZMODEM nutzen asynchrone \u00dcbertragung f\u00fcr Datei\u00fcbertragungen \u00fcber serielle Verbindungen.</li> <li>Beispiel: Datei\u00fcbertragungen zwischen Computern \u00fcber serielle Schnittstellen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Asynchrone%20%C3%9Cbertragung/#vorteile-und-nachteile-der-asynchronen-ubertragung","title":"\u2696\ufe0f Vorteile und Nachteile der Asynchronen \u00dcbertragung","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Asynchrone%20%C3%9Cbertragung/#vorteile","title":"Vorteile","text":"<ul> <li>Einfache Implementierung: Asynchrone \u00dcbertragung erfordert keine komplexe Synchronisierung und ist daher einfach zu implementieren.</li> <li>Flexibilit\u00e4t: Geeignet f\u00fcr unregelm\u00e4\u00dfige und intermittierende Datenstr\u00f6me, da Daten gesendet werden, sobald sie verf\u00fcgbar sind.</li> <li>Geringe Kosten: Hardwareanforderungen sind minimal, was zu geringeren Kosten f\u00fchrt.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Asynchrone%20%C3%9Cbertragung/#nachteile","title":"Nachteile","text":"<ul> <li>Overhead durch Start- und Stoppbits: Jedes Datenpaket muss mit zus\u00e4tzlichen Bits versehen werden, was zu einem h\u00f6heren Overhead und einer geringeren Effizienz f\u00fchrt.</li> <li>Begrenzte \u00dcbertragungsgeschwindigkeit: Im Vergleich zu synchronen Methoden ist die \u00dcbertragungsgeschwindigkeit aufgrund des Overheads und der fehlenden Synchronisation niedriger.</li> <li>Empfindlichkeit gegen\u00fcber St\u00f6rungen: Da die Synchronisation zwischen Sender und Empf\u00e4nger fehlt, kann es bei \u00dcbertragungsst\u00f6rungen zu Datenfehlern kommen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Isochrone%20%C3%9Cbertragung/","title":"Isochrone \u00dcbertragung","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Isochrone%20%C3%9Cbertragung/#was-ist-isochrone-ubertragung","title":"\ud83d\udccc Was ist Isochrone \u00dcbertragung?","text":"<p>Isochrone \u00dcbertragung ist eine Methode der Daten\u00fcbertragung, bei der Daten mit konstanter Rate und in regelm\u00e4\u00dfigen Zeitintervallen gesendet werden. Im Gegensatz zur synchronen \u00dcbertragung, bei der ein gemeinsames Taktsignal zur Synchronisation verwendet wird, erfolgt die isochrone \u00dcbertragung ohne ein solches Signal. Diese Methode wird h\u00e4ufig verwendet, wenn kontinuierliche Datenstr\u00f6me mit minimalen Variationen in der Zeit\u00fcbertragung erforderlich sind, wie bei Audio- und Videostreaming-Anwendungen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Isochrone%20%C3%9Cbertragung/#merkmale-der-isochronen-ubertragung","title":"\ud83d\udd70\ufe0f Merkmale der Isochronen \u00dcbertragung","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Isochrone%20%C3%9Cbertragung/#konstante-rate","title":"Konstante Rate","text":"<ul> <li>Konstante Rate: Daten werden mit einer festen Rate und in gleichm\u00e4\u00dfigen Intervallen \u00fcbertragen.</li> <li>Vorhersehbarkeit: Dies gew\u00e4hrleistet eine konstante Datenrate und eine vorhersehbare Zeit\u00fcbertragung.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Isochrone%20%C3%9Cbertragung/#zeitliche-prazision","title":"Zeitliche Pr\u00e4zision","text":"<ul> <li>Zeitliche Pr\u00e4zision: Isochrone \u00dcbertragung zielt darauf ab, Schwankungen in der Zeit\u00fcbertragung zu minimieren, um eine gleichm\u00e4\u00dfige und kontinuierliche Daten\u00fcbertragung sicherzustellen.</li> <li>Anwendung: Dies ist besonders wichtig in Anwendungen, die Echtzeit-Datenverarbeitung erfordern, wie bei Audio- und Videostreaming.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Isochrone%20%C3%9Cbertragung/#anwendungen","title":"Anwendungen","text":"<ul> <li>Audio und Video Streaming: Isochrone \u00dcbertragung wird h\u00e4ufig bei der \u00dcbertragung von Audio- und Videodaten verwendet, um eine konsistente Wiedergabequalit\u00e4t ohne Unterbrechungen zu gew\u00e4hrleisten.</li> <li>Beispiel: Streaming-Dienste wie Netflix und Spotify verwenden isochrone \u00dcbertragung, um eine nahtlose Wiedergabe von Medieninhalten zu erm\u00f6glichen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Isochrone%20%C3%9Cbertragung/#vorteile-und-anwendungen-der-isochronen-ubertragung","title":"\u2696\ufe0f Vorteile und Anwendungen der Isochronen \u00dcbertragung","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Isochrone%20%C3%9Cbertragung/#vorteile","title":"Vorteile","text":"<ul> <li>Vorhersehbarkeit: Konstante Rate und Zeit\u00fcbertragung erm\u00f6glichen eine zuverl\u00e4ssige und vorhersehbare Daten\u00fcbertragung.</li> <li>Gleichm\u00e4\u00dfige Datenstr\u00f6me: Isochrone \u00dcbertragung minimiert Schwankungen und Jitter, was besonders wichtig f\u00fcr Anwendungen ist, die Echtzeitdatenverarbeitung erfordern.</li> <li>Qualit\u00e4tsverbesserung: Verbesserte Audio- und Videoqualit\u00e4t durch kontinuierliche und gleichm\u00e4\u00dfige Datenstr\u00f6me.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Isochrone%20%C3%9Cbertragung/#anwendungen_1","title":"Anwendungen","text":"<ul> <li>Medien\u00fcbertragung: Isochrone \u00dcbertragung findet Anwendung bei Audio- und Video-Streaming-Diensten, bei denen eine konsistente und unterbrechungsfreie Wiedergabequalit\u00e4t erforderlich ist.</li> <li>Echtzeit-Datenverarbeitung: In Anwendungen wie Live-Streaming, Telekonferenzen und industrieller Automatisierung, wo Echtzeitdatenverarbeitung kritisch ist.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Synchrone%20%C3%9Cbertragung/","title":"Synchrone \u00dcbertragung","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Synchrone%20%C3%9Cbertragung/#was-ist-synchrone-ubertragung","title":"\ud83d\udccc Was ist Synchrone \u00dcbertragung?","text":"<p>Synchrone \u00dcbertragung ist eine Methode der Daten\u00fcbertragung, bei der Daten kontinuierlich in festgelegten Zeitintervallen gesendet werden, wobei Sender und Empf\u00e4nger durch ein gemeinsames Taktsignal synchronisiert sind. Diese Methode erm\u00f6glicht eine effizientere und schnellere Daten\u00fcbertragung im Vergleich zur asynchronen \u00dcbertragung, da keine Start- und Stoppbits erforderlich sind.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Synchrone%20%C3%9Cbertragung/#merkmale-der-synchronen-ubertragung","title":"\ud83d\udd70\ufe0f Merkmale der Synchronen \u00dcbertragung","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Synchrone%20%C3%9Cbertragung/#gemeinsames-taktsignal","title":"Gemeinsames Taktsignal","text":"<ul> <li>Taktsignal: Ein gemeinsames Taktsignal wird verwendet, um die \u00dcbertragung zwischen Sender und Empf\u00e4nger zu synchronisieren.</li> <li>Synchronisation: Das Taktsignal sorgt daf\u00fcr, dass beide Seiten zur gleichen Zeit senden und empfangen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Synchrone%20%C3%9Cbertragung/#kontinuierlicher-datenstrom","title":"Kontinuierlicher Datenstrom","text":"<ul> <li>Kontinuierlicher Datenstrom: Daten werden in einem kontinuierlichen Fluss gesendet, ohne Unterbrechungen durch Start- und Stoppbits.</li> <li>Effizienz: Dies f\u00fchrt zu einer h\u00f6heren \u00dcbertragungseffizienz, da der Overhead reduziert wird.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Synchrone%20%C3%9Cbertragung/#datenrahmen","title":"Datenrahmen","text":"<ul> <li>Datenrahmen: Daten werden in Bl\u00f6cken oder Frames organisiert, die eine feste Gr\u00f6\u00dfe haben oder durch spezielle Rahmenbits gekennzeichnet sind.</li> <li>Struktur: Jeder Datenrahmen enth\u00e4lt neben den eigentlichen Daten auch Steuerinformationen wie Adressen und Fehlerkorrekturcodes.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Synchrone%20%C3%9Cbertragung/#anwendungen-der-synchronen-ubertragung","title":"\ud83d\ude80 Anwendungen der Synchronen \u00dcbertragung","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Synchrone%20%C3%9Cbertragung/#hochgeschwindigkeitsnetzwerke","title":"Hochgeschwindigkeitsnetzwerke","text":"<ul> <li>Hochgeschwindigkeitsnetzwerke: Synchrone \u00dcbertragung wird in Netzwerken verwendet, die hohe Geschwindigkeiten und geringe Latenzen erfordern.</li> <li>Beispiel: Ethernet und Glasfasernetzwerke, die eine schnelle und zuverl\u00e4ssige Daten\u00fcbertragung erm\u00f6glichen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Synchrone%20%C3%9Cbertragung/#datenubertragung-uber-groe-entfernungen","title":"Daten\u00fcbertragung \u00fcber gro\u00dfe Entfernungen","text":"<ul> <li>Daten\u00fcbertragung \u00fcber gro\u00dfe Entfernungen: Synchrone \u00dcbertragung wird in Weitverkehrsnetzen (WANs) eingesetzt, um Daten effizient \u00fcber gro\u00dfe Entfernungen zu \u00fcbertragen.</li> <li>Beispiel: Synchronous Optical Networking (SONET) und Synchronous Digital Hierarchy (SDH).</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Synchrone%20%C3%9Cbertragung/#kommunikationsprotokolle","title":"Kommunikationsprotokolle","text":"<ul> <li>Kommunikationsprotokolle: Protokolle wie HDLC (High-Level Data Link Control) und SDLC (Synchronous Data Link Control) verwenden synchrone \u00dcbertragung, um eine zuverl\u00e4ssige Daten\u00fcbertragung zu gew\u00e4hrleisten.</li> <li>Beispiel: Mainframe-zu-Mainframe-Kommunikation und industrielle Steuerungssysteme.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Synchrone%20%C3%9Cbertragung/#vorteile-und-nachteile-der-synchronen-ubertragung","title":"\u2696\ufe0f Vorteile und Nachteile der Synchronen \u00dcbertragung","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Synchrone%20%C3%9Cbertragung/#vorteile","title":"Vorteile","text":"<ul> <li>H\u00f6here Effizienz: Ohne die Notwendigkeit von Start- und Stoppbits wird der Overhead reduziert und die \u00dcbertragungsgeschwindigkeit erh\u00f6ht.</li> <li>Geringere Latenz: Durch die kontinuierliche Daten\u00fcbertragung und Synchronisation wird die Latenz minimiert.</li> <li>Bessere Fehlerkorrektur: Die Struktur von Datenrahmen erm\u00f6glicht eine effektivere Fehlererkennung und -korrektur.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbertragungsformen/Synchrone%20%C3%9Cbertragung/#nachteile","title":"Nachteile","text":"<ul> <li>Komplexit\u00e4t der Implementierung: Die Notwendigkeit eines gemeinsamen Taktsignals und die Synchronisation erh\u00f6hen die Komplexit\u00e4t der Implementierung.</li> <li>Kosten: Synchrone \u00dcbertragung erfordert aufwendigere Hardware und ist daher teurer.</li> <li>Starre Struktur: Die feste Rahmengr\u00f6\u00dfe und die kontinuierliche \u00dcbertragung k\u00f6nnen unflexibel sein, wenn die Datenstr\u00f6me variabel sind.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbungen/%C3%9Cbungsklausur%20Netzwerktechnik/","title":"\u00dcbungsklausur Netzwerktechnik","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbungen/%C3%9Cbungsklausur%20Netzwerktechnik/#frage-1-bandbreite-und-ubertragungsdauer","title":"Frage 1: Bandbreite und \u00dcbertragungsdauer","text":"<p>a) Berechnen Sie die Zeit, die ben\u00f6tigt wird, um 500 Gigabyte Daten \u00fcber eine 100-Mbit/s-Verbindung zu \u00fcbertragen. -&gt; 500GB = 500 000 / 100 = 5000s </p> <p>b) Sie haben einen Datentr\u00e4ger mit 1 Terabyte Daten, die Sie in eine 300 km entfernte Stadt bringen m\u00fcssen. Sie haben zwei M\u00f6glichkeiten:</p> <p>Die Daten \u00fcber eine 50-Mbit/s-Verbindung zu \u00fcbertragen. Den Datentr\u00e4ger mit dem Auto zu transportieren, was 4 Stunden dauert. Welche Methode ist schneller und warum? Ber\u00fccksichtigen Sie bei Ihrer Berechnung, dass 1 Byte 8 Bit entspricht.</p> <p>-&gt; 50 Mb /s * 60 = 3000Mb/m -&gt; 3000Mb/m * 60 = 18 0000 Mb / h -&gt; 18 0000 Mb / h * 4 =72 000 MB in 4 Studen sind kleiner als 1000000 MB</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbungen/%C3%9Cbungsklausur%20Netzwerktechnik/#frage-2-manchester-code","title":"Frage 2: Manchester-Code","text":"<p>a) Erkl\u00e4ren Sie die Funktionsweise des Manchester-Codes und geben Sie mindestens einen Grund an, warum er verwendet wird.</p> <p>b) Stellen Sie die Bitfolge 1011001 grafisch im Manchester-Code dar.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbungen/%C3%9Cbungsklausur%20Netzwerktechnik/#frage-3-aufteilung-des-mediums-und-kollisionsvermeidung","title":"Frage 3: Aufteilung des Mediums und Kollisionsvermeidung","text":"<p>a) Erl\u00e4utern Sie, wie sich ein \u00dcbertragungsmedium gerecht aufteilen l\u00e4sst, um Kollisionen zu vermeiden.</p> <p>b) Nennen und beschreiben Sie zwei Verfahren zur Kollisionsvermeidung. CSMA/CA Im initialen Zusand wird gewartet, sobald ein Ger\u00e4t etwas senden m\u00f6chte, wird zuerst eine Anfrage an den Verwalter des Netzes geschickt. (RTS). Sobald der Verwalter ein Packet zur\u00fcckschickt mit der Best\u00e4tigung das gesendet werden darf (CTS) sendet das Ger\u00e4t. Sobald die \u00dcbertragung beendet ist, schickt der Verwalter eine Best\u00e4tigung (ACK) das die \u00dcbertragung angekommen ist.  Jeder Request enth\u00e4lt ein NAV. Dies sagt aus, wie lange die Leitung belegt ist, und die anderen Ger\u00e4te nicht senden d\u00fcrfen. Diese warten dann diese Zeit ab, bevor wieder gesendet wird. Falls eine Kollision auftritt, also kein ACK gesendet wird, wartet das ger\u00e4t eine zuf\u00e4llig lange Zeit bis es wieder sendet.</p> <p>Token Ring: Jeder Rechner ist mit dem vorg\u00e4nger und nachfolger verbunden Immer nur ein Rechner darf senden, der jenige, der den \"Stab hat\". Sobald dieser Rechner fertig gesendet hat, darf der n\u00e4chste Rechner in der Reihe senden.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbungen/%C3%9Cbungsklausur%20Netzwerktechnik/#frage-4-subnetting","title":"Frage 4: Subnetting","text":"<p>Ein Unternehmen hat den IP-Adressbereich 172.20.0.0/16 erhalten. Es ben\u00f6tigt 4 Subnetze unterschiedlicher Gr\u00f6\u00dfe:</p> <p>Subnetz 1: 500 Hosts -&gt; 503 Subnetz 2: 250 Hosts -&gt; 253 Subnetz 3: 100 Hosts -&gt; 103 Subnetz 4: 50 Hosts -&gt; 53 F\u00fchren Sie ein Subnetting durch und geben Sie f\u00fcr jedes Subnetz folgende Informationen an:</p> <p>Netzadresse Broadcast-Adresse Bereich der nutzbaren IP-Adressen Subnetzmaske</p> Netzadresse Broadcast-Adresse Bereich Subnetzmaske 172.20.0.0/23 172.20.1.255/23 172.20.0.1 - 172.20.1.254 172.20.1.255 172.20.2.0/24 172.20.2.255 172.20.2.0-172.20.2.254 172.20.2.255 172.20.3.0/25 172.20.3.127/25 172.20.3.1-172.20.3.126 172.20.2.127 172.20.3.128/26 172.20.3.191/26 172.20.3.129 - 172.20.3.190"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbungen/%C3%9Cbungsklausur%20Netzwerktechnik/#frage-5-ip-adressvergabe-und-dhcp","title":"Frage 5: IP-Adressvergabe und DHCP","text":"<p>a) Beschreiben Sie zwei M\u00f6glichkeiten, wie ein Knoten in einem Netzwerk eine IP-Adresse erhalten kann. -&gt; Einmal ist dies m\u00f6glich \u00fcber die manuelle Setzung der IP Adresse am Knoten oder die Automatische Zuweisung \u00fcber einen DHCP Server</p> <p>b) Erkl\u00e4ren Sie die Funktionsweise des DHCP-Protokolls (Dynamic Host Configuration Protocol). Gehen Sie dabei auf die einzelnen Schritte der Kommunikation zwischen Client und Server ein.</p> <p>-&gt; Client kommt ins Netz und kennt DHCP nicht deswegen Broadcast zur Suche des Servers.  -&gt; Server auf diese Anfrage mit der IP Adresse -&gt; Client erh\u00e4lt die Anfrage von DHCP und antwortet darauf mit einer Best\u00e4tigung, das er diese IP Adresse nimmt </p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbungen/%C3%9Cbungsklausur%20Netzwerktechnik/#frage-6-udp-und-tcp","title":"Frage 6: UDP und TCP","text":"<p>a) Vergleichen Sie die Protokolle UDP (User Datagram Protocol) und TCP (Transmission Control Protocol) hinsichtlich ihrer Eigenschaften und Anwendungsf\u00e4lle.</p> <p>UDP -&gt; wartet nicht auf best\u00e4tigung vom Empf\u00e4nger, schneller und weniger Resourcen. Anwendung in Online Videospiele wo es wichtig ist das es Fl\u00fcssig ist, aber nicht das jedes Paket ankommt</p> <p>TCP -&gt; best\u00e4tigt, das Empf\u00e4nger Paket erhalten hat, braucht l\u00e4nger und mehr overhead. Anwendung zumeist in Datei\u00fcbertragung, da dort jedes Paket anbkommen soll</p> <p>b) Geben Sie f\u00fcr jedes Protokoll ein Beispiel f\u00fcr ein Szenario, in dem es sinnvoll eingesetzt wird, und begr\u00fcnden Sie Ihre Wahl.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbungen/%C3%9Cbungsklausur%20Netzwerktechnik/#frage-7-three-way-handshake","title":"Frage 7: Three-Way-Handshake","text":"<p>Erkl\u00e4ren Sie den Ablauf des Three-Way-Handshake beim Aufbau einer TCP-Verbindung. Gehen Sie dabei auf die Bedeutung der einzelnen Schritte und der ausgetauschten Nachrichten ein.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbungen/%C3%9Cbungsklausur%20Netzwerktechnik/#frage-8-dns","title":"Frage 8: DNS","text":"<p>a) Erl\u00e4utern Sie den Ablauf einer DNS-Anfrage (Domain Name System).</p> <p>b) Warum wird DNS ben\u00f6tigt?</p> <p>Frage 9: ARP a) Beschreiben Sie den Ablauf des ARP-Protokolls (Address Resolution Protocol).</p> <p>b) Erkl\u00e4ren Sie, warum ARP notwendig ist.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Netzwerktechnik/%C3%9Cbungen/Aufgabe%201/Bearbeitung/","title":"Bearbeitung","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Collections/","title":"Collections","text":"<p>Generische Collections in C# bieten leistungsstarke Container f\u00fcr verschiedene Datentypen und -strukturen. Sie befinden sich im Namensraum <code>System.Collections.Generic</code>. Im Vergleich zu nicht-generischen Collections sind sie typsicher und bieten bessere Leistung und Flexibilit\u00e4t.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Collections/#ubersicht","title":"\u00dcbersicht","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Collections/#namensraume","title":"Namensr\u00e4ume","text":"<ul> <li><code>System.Collections.Generic</code>: Enth\u00e4lt generische Collections wie <code>List&lt;T&gt;</code>, <code>Dictionary&lt;TKey, TValue&gt;</code>, <code>HashSet&lt;T&gt;</code>, und mehr.</li> <li><code>System.Collections.Concurrent</code>: Bietet thread-sichere Collections wie <code>BlockingCollection&lt;T&gt;</code>, <code>ConcurrentDictionary&lt;TKey, TValue&gt;</code>, <code>ConcurrentQueue&lt;T&gt;</code>, und <code>ConcurrentStack&lt;T&gt;</code>.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Collections/#veraltete-klassen","title":"Veraltete Klassen","text":"<p>Vermeide die Verwendung von nicht-generischen Klassen aus <code>System.Collections</code>, wie z.B. <code>ArrayList</code>, <code>HashTable</code>, <code>Queue</code>, und <code>Stack</code>, da sie nicht typsicher sind.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Collections/#arrays-vs-collections","title":"Arrays vs. Collections","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Collections/#schwachen-von-arrays","title":"Schw\u00e4chen von Arrays","text":"<ul> <li>Feste Gr\u00f6\u00dfe: Die Gr\u00f6\u00dfe muss beim Erstellen festgelegt werden und kann nicht mehr ver\u00e4ndert werden.</li> <li>Aufwand beim Einf\u00fcgen/Entfernen: Das Einf\u00fcgen und Entfernen von Elementen ist aufw\u00e4ndig.</li> <li>Kovarianz: Arrays unterst\u00fctzen Kovarianz, was zu Laufzeitfehlern f\u00fchren kann.</li> </ul> <p>[!example]- Beispiel f\u00fcr Kovarianz: <pre><code>object[] oarr = new string[] { \"a\", \"b\" };  \noarr[0] = 13;  // Laufzeitfehler: System.ArrayTypeMismatchException  \n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Collections/#collection-klassen","title":"Collection Klassen","text":"<p>Hier sind einige der wichtigsten Collection-Klassen in C#:</p> Klasse Beschreibung <code>Dictionary&lt;TKey, TValue&gt;</code> Key-Value-Paare (Hash-Tabelle) <code>HashSet&lt;T&gt;</code> Duplikatfreies, ungeordnetes Set <code>LinkedList&lt;T&gt;</code> Doppelt verlinkte Liste <code>List&lt;T&gt;</code> Stark typisierte Liste mit Indexzugriff <code>PriorityQueue&lt;TElement, TPriority&gt;</code> Elemente mit Wert und Priorit\u00e4t <code>Queue&lt;T&gt;</code> First-in, First-out (FIFO) Collection <code>SortedDictionary&lt;TKey, TValue&gt;</code> Key-Value-Paare, nach Key sortiert <code>SortedList&lt;TKey, TValue&gt;</code> Sortierte Key-Value-Paare <code>SortedSet&lt;T&gt;</code> Sortierte Collection ohne Duplikate <code>Stack&lt;T&gt;</code> Last-in-First-out (LIFO) Collection"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Collections/#icollectiont-interface","title":"<code>ICollection&lt;T&gt;</code> Interface","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Collections/#methoden","title":"Methoden","text":"Methode Beschreibung <code>Add(T element)</code> F\u00fcgt ein Element hinzu. <code>Contains(T element)</code> \u00dcberpr\u00fcft, ob ein Element vorhanden ist. <code>Remove(T element)</code> Entfernt das erste Vorkommen eines Elements. <code>CopyTo(T[] array, int index)</code> Kopiert die Elemente in ein Array. <code>Clear()</code> Entfernt alle Elemente."},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Collections/#eigenschaften","title":"Eigenschaften","text":"Eigenschaft Beschreibung <code>Count</code> Gibt die Anzahl der Elemente zur\u00fcck. <code>IsReadOnly</code> Gibt an, ob die Collection schreibgesch\u00fctzt ist."},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Collections/#verwaltung-einer-liste-listt","title":"Verwaltung einer Liste (<code>List&lt;T&gt;</code>)","text":"<ul> <li><code>List&lt;T&gt;</code> speichert Elemente in einem dynamischen Array <code>T[]</code>, das bei Bedarf vergr\u00f6\u00dfert wird.</li> <li><code>Capacity</code> ist meist gr\u00f6\u00dfer als <code>Count</code>.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Collections/#wichtige-methoden-und-eigenschaften","title":"Wichtige Methoden und Eigenschaften","text":"Methode Beschreibung <code>IndexOf(T element)</code> Gibt den Index des ersten Vorkommens zur\u00fcck. <code>Insert(int pos, T element)</code> F\u00fcgt ein Element an der angegebenen Position ein. <code>RemoveAt(int pos)</code> Entfernt das Element an der angegebenen Position. <code>AsReadOnly()</code> Gibt eine schreibgesch\u00fctzte Sicht auf die Liste zur\u00fcck. <p>[!example]- Beispiel f\u00fcr <code>List&lt;T&gt;</code>: <pre><code>List&lt;string&gt; names = new List&lt;string&gt; { \"Alice\", \"Bob\", \"Charlie\" };  \nnames.Add(\"Diana\");  \nnames.RemoveAt(1); // Entfernt \"Bob\"  \nint index = names.IndexOf(\"Charlie\"); // Gibt den Index von \"Charlie\" zur\u00fcck  \n</code></pre> </p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Collections/#suchen-und-sortieren","title":"Suchen und Sortieren","text":"Methode Beschreibung <code>BinarySearch</code> Sucht ein Element in der sortierten Liste. <code>Find</code> Findet das erste Vorkommen eines Elements, das den angegebenen Bedingungen entspricht. <code>Sort</code> Sortiert die Liste nach den angegebenen Vergleichskriterien. <p>[!example]- Beispiel f\u00fcr Suchen und Sortieren: <pre><code>List&lt;int&gt; numbers = new List&lt;int&gt; { 4, 2, 9, 1, 5 };  \nnumbers.Sort(); // Sortiert die Liste  \nint index = numbers.BinarySearch(5); // Gibt den Index von 5 zur\u00fcck  \nbool exists = numbers.Exists(n =&gt; n &gt; 8); // \u00dcberpr\u00fcft, ob ein Wert gr\u00f6\u00dfer als 8 existiert  \n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Collections/#verwaltung-einer-liste-linkedlistt","title":"Verwaltung einer Liste (<code>LinkedList&lt;T&gt;</code>)","text":"<ul> <li><code>LinkedList&lt;T&gt;</code> verwendet doppelt verkettete Elemente f\u00fcr effizientes Einf\u00fcgen und Entfernen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Collections/#wichtige-methoden","title":"Wichtige Methoden","text":"Methode Beschreibung <code>AddFirst(T element)</code> F\u00fcgt ein Element am Anfang hinzu. <code>AddLast(T element)</code> F\u00fcgt ein Element am Ende hinzu. <code>AddBefore(LinkedListNode&lt;T&gt; node, T element)</code> F\u00fcgt ein Element vor einem bestimmten Knoten hinzu. <code>AddAfter(LinkedListNode&lt;T&gt; node, T element)</code> F\u00fcgt ein Element nach einem bestimmten Knoten hinzu. <code>RemoveFirst()</code> Entfernt das erste Element. <code>RemoveLast()</code> Entfernt das letzte Element. <p>[!example]- Beispiel f\u00fcr <code>LinkedList&lt;T&gt;</code>: <pre><code>LinkedList&lt;string&gt; linkedList = new LinkedList&lt;string&gt;();  \nlinkedList.AddLast(\"Alice\");  \nlinkedList.AddFirst(\"Bob\");  \nLinkedListNode&lt;string&gt; node = linkedList.Find(\"Alice\");  \nlinkedList.AddAfter(node, \"Charlie\");  \nlinkedList.RemoveFirst(); // Entfernt \"Bob\"  \n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Collections/#verwaltung-eines-sets","title":"Verwaltung eines Sets","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Collections/#hashsett","title":"<code>HashSet&lt;T&gt;</code>","text":"<ul> <li><code>HashSet&lt;T&gt;</code> verwendet eine Hash-Tabelle f\u00fcr schnelle Existenzpr\u00fcfungen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Collections/#wichtige-methoden_1","title":"Wichtige Methoden","text":"Methode Beschreibung <code>Add(T element)</code> F\u00fcgt ein Element hinzu, wenn es noch nicht existiert. <code>Contains(T element)</code> \u00dcberpr\u00fcft, ob ein Element vorhanden ist. <code>IntersectWith(IEnumerable&lt;T&gt; other)</code> Intersectiert das Set mit einem anderen. <code>UnionWith(IEnumerable&lt;T&gt; other)</code> Vereinigt das Set mit einem anderen. <code>ExceptWith(IEnumerable&lt;T&gt; other)</code> Entfernt Elemente, die in einem anderen Set enthalten sind. <p>[!example]- Beispiel f\u00fcr <code>HashSet&lt;T&gt;</code>: <pre><code>HashSet&lt;string&gt; set1 = new HashSet&lt;string&gt; { \"A\", \"B\", \"C\" };  \nHashSet&lt;string&gt; set2 = new HashSet&lt;string&gt; { \"B\", \"C\", \"D\" };  \nset1.UnionWith(set2); // Vereinigt set1 mit set2  \nset1.ExceptWith(set2); // Entfernt Elemente, die in set2 vorhanden sind  \nbool contains = set1.Contains(\"A\"); // \u00dcberpr\u00fcft, ob \"A\" vorhanden ist  \n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Collections/#sortedsett","title":"<code>SortedSet&lt;T&gt;</code>","text":"<ul> <li><code>SortedSet&lt;T&gt;</code> verwendet einen balancierten Bin\u00e4rbaum, um Elemente sortiert zu halten.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Collections/#verwaltung-von-schlussel-wert-paaren","title":"Verwaltung von (Schl\u00fcssel-Wert) \u2013 Paaren","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Collections/#dictionarytkey-tvalue","title":"<code>Dictionary&lt;TKey, TValue&gt;</code>","text":"<ul> <li><code>Dictionary&lt;TKey, TValue&gt;</code> speichert Key-Value-Paare ohne Duplikate.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Collections/#wichtige-methoden_2","title":"Wichtige Methoden","text":"Methode Beschreibung <code>Add(K key, V value)</code> F\u00fcgt ein Paar hinzu. <code>ContainsKey(K key)</code> \u00dcberpr\u00fcft, ob ein Schl\u00fcssel vorhanden ist. <code>TryGetValue(K key, out V value)</code> Versucht, den Wert f\u00fcr einen Schl\u00fcssel abzurufen. <p>[!example]- Beispiel f\u00fcr <code>Dictionary&lt;TKey, TValue&gt;</code>: <pre><code>Dictionary&lt;string, int&gt; dictionary = new Dictionary&lt;string, int&gt;();  \ndictionary.Add(\"Alice\", 25);  \ndictionary.Add(\"Bob\", 30);  \nif (dictionary.TryGetValue(\"Alice\", out int age)) {  \n    Console.WriteLine($\"Alice ist {age} Jahre alt.\");  \n}  \n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Flache%20vs.%20Tiefe%20Kopie/","title":"Flache vs. Tiefe Kopie","text":"<p>In C# k\u00f6nnen Sie das Interface <code>ICloneable</code> verwenden, um Objekte zu klonen. Es bietet eine Methode <code>Clone()</code>, die verwendet wird, um Kopien von Objekten zu erstellen. Hier zeigen wir, wie man flache und tiefe Kopien mithilfe des <code>ICloneable</code>-Interfaces implementiert.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Flache%20vs.%20Tiefe%20Kopie/#flache-kopie-mit-icloneable","title":"Flache Kopie mit <code>ICloneable</code>","text":"<p>Eine flache Kopie (shallow copy) erstellt eine neue Instanz des Objekts, wobei die Felder der neuen Instanz die gleichen Werte wie die Felder der Originalinstanz enthalten. Bei einer flachen Kopie werden jedoch nur die Referenzen auf die Objekte kopiert, nicht die Objekte selbst.</p> <p>[!example] <pre><code>using System;\n\npublic class Address : ICloneable\n{\n    public string City { get; set; }\n    \n    // Implementierung von Clone() f\u00fcr flache Kopie\n    public object Clone()\n    {\n        return this.MemberwiseClone();\n    }\n}\n\npublic class Person : ICloneable\n{\n    public string Name { get; set; }\n    public Address Address { get; set; }\n    \n    // Implementierung von Clone() f\u00fcr flache Kopie\n    public object Clone()\n    {\n        Person clone = (Person)this.MemberwiseClone();\n        clone.Address = (Address)this.Address.Clone(); // Flache Kopie der Adresse\n        return clone;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Address address = new Address { City = \"Berlin\" };\n        Person original = new Person { Name = \"John\", Address = address };\n        \n        // Erstellen einer flachen Kopie\n        Person shallowCopy = (Person)original.Clone();\n        \n        // \u00c4ndern der Adresse in der Kopie\n        shallowCopy.Address.City = \"Munich\";\n        \n        Console.WriteLine($\"Original City: {original.Address.City}\"); // Output: Munich\n        Console.WriteLine($\"Copy City: {shallowCopy.Address.City}\");   // Output: Munich\n    }\n}\n</code></pre></p> <p>In diesem Beispiel verwendet die Methode <code>Clone()</code> von <code>Person</code> und <code>Address</code> eine flache Kopie. Das <code>Address</code>-Objekt wird ebenfalls mithilfe der flachen Kopie geklont. \u00c4nderungen an der Adresse in der Kopie beeinflussen auch das Originalobjekt, weil sie beide auf dasselbe <code>Address</code>-Objekt zeigen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Flache%20vs.%20Tiefe%20Kopie/#tiefe-kopie-mit-icloneable","title":"Tiefe Kopie mit <code>ICloneable</code>","text":"<p>Eine tiefe Kopie (deep copy) erstellt nicht nur eine neue Instanz des Objekts, sondern auch neue Instanzen aller untergeordneten Objekte. Dies bedeutet, dass \u00c4nderungen an den untergeordneten Objekten in der Kopie keine Auswirkungen auf das Originalobjekt haben.</p> <p>[!example] <pre><code>using System;\n\npublic class Address : ICloneable\n{\n    public string City { get; set; }\n    \n    // Implementierung von Clone() f\u00fcr tiefe Kopie\n    public object Clone()\n    {\n        return new Address { City = this.City };\n    }\n}\n\npublic class Person : ICloneable\n{\n    public string Name { get; set; }\n    public Address Address { get; set; }\n    \n    // Implementierung von Clone() f\u00fcr tiefe Kopie\n    public object Clone()\n    {\n        Person clone = (Person)this.MemberwiseClone();\n        clone.Address = (Address)this.Address.Clone(); // Tiefe Kopie der Adresse\n        return clone;\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        Address address = new Address { City = \"Berlin\" };\n        Person original = new Person { Name = \"John\", Address = address };\n        \n        // Erstellen einer tiefen Kopie\n        Person deepCopy = (Person)original.Clone();\n        \n        // \u00c4ndern der Adresse in der Kopie\n        deepCopy.Address.City = \"Munich\";\n        \n        Console.WriteLine($\"Original City: {original.Address.City}\"); // Output: Berlin\n        Console.WriteLine($\"Copy City: {deepCopy.Address.City}\");    // Output: Munich\n    }\n}\n</code></pre></p> <p>In diesem Beispiel stellt die Methode <code>Clone()</code> von <code>Address</code> eine tiefe Kopie sicher, indem sie ein neues <code>Address</code>-Objekt erstellt. Daher zeigen die <code>Address</code>-Referenzen in der Kopie und im Originalobjekt auf unterschiedliche Objekte. \u00c4nderungen an der Adresse in der Kopie beeinflussen nicht die Adresse im Originalobjekt.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Flache%20vs.%20Tiefe%20Kopie/#zusammenfassung","title":"Zusammenfassung","text":"<ul> <li>Flache Kopie: Kopiert die Werte und Referenzen auf untergeordnete Objekte. \u00c4nderungen an den untergeordneten Objekten in der Kopie beeinflussen das Originalobjekt.</li> <li>Tiefe Kopie: Erstellt vollst\u00e4ndige Kopien des Objekts und aller untergeordneten Objekte, sodass \u00c4nderungen an der Kopie keine Auswirkungen auf das Original haben.</li> </ul> <p>Verwenden Sie flache Kopien, wenn die Referenzen auf untergeordnete Objekte unver\u00e4ndert bleiben sollen. Verwenden Sie tiefe Kopien, wenn Sie eine vollst\u00e4ndige und unabh\u00e4ngige Kopie eines Objekts ben\u00f6tigen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Generische%20Typen/","title":"Generische Typen","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Generische%20Typen/#generisches-programmieren-in-c","title":"Generisches Programmieren in C","text":"<p>Generisches Programmieren in C# erm\u00f6glicht es, Klassen, Strukturen, Methoden und Interfaces zu erstellen, die mit verschiedenen Datentypen arbeiten k\u00f6nnen, ohne dass der Code f\u00fcr jeden Datentyp neu geschrieben werden muss. Dies f\u00f6rdert die Wiederverwendbarkeit und Typsicherheit des Codes.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Generische%20Typen/#einfuhrung-in-generics","title":"Einf\u00fchrung in Generics","text":"<p>Generics erlauben es, Platzhalter f\u00fcr Datentypen in Klassen, Strukturen, Methoden und Interfaces zu verwenden. Diese Platzhalter werden bei der Verwendung der generischen Typen zur Laufzeit durch konkrete Datentypen ersetzt.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Generische%20Typen/#beispiel-fur-eine-generische-klasse","title":"Beispiel f\u00fcr eine generische Klasse","text":"<p>Angenommen, wir m\u00f6chten eine Klasse zur Verwaltung von Objekten erstellen, die unterschiedliche Typen enthalten kann, wie Fahrzeuge oder Wohnungen. Statt f\u00fcr jeden Typ eine separate Klasse zu erstellen, k\u00f6nnen wir eine generische Klasse verwenden:</p> <p>[!code]- Beispiel: Generische Klasse ```csharp public class RentalManager {    private List rentals = new List();   private List booked = new List(); <p>public void Book(T item) { booked.Add(item); }    public bool CancelBooking(T item) { return booked.Remove(item); }    public void AddRentalObject(T item) { rentals.Add(item); }    public void RemoveRentalObject(T item) { rentals.Remove(item); }    public float CalculateCost(T item, DateTime from, DateTime to)    {        // Kostenberechnung implementieren        return 0f;    } } ```</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Generische%20Typen/#verwendung-von-generics","title":"Verwendung von Generics","text":"<p>Um diese generische Klasse f\u00fcr verschiedene Typen zu nutzen, erstellen wir Instanzen der Klasse mit den gew\u00fcnschten Typen:</p> <p>[!code]- Beispiel: Verwendung der generischen Klasse ```csharp public class Vehicle {    public float PricePerDay { get; set; }    public int Seats { get; set; } }</p> <p>public class Home {    public float PricePerDay { get; set; }    public int SquareMeter { get; set; } }</p> <p>// Verwenden der generischen Klasse f\u00fcr verschiedene Typen RentalManager vehicleManager = new RentalManager(); RentalManager homeManager = new RentalManager(); ```"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Generische%20Typen/#generische-methoden","title":"Generische Methoden","text":"<p>Generische Methoden k\u00f6nnen \u00e4hnlich wie generische Klassen Typ-Parameter verwenden. </p> <p>[!code]- Beispiel: Verwendung von Genrischen Methoden <pre><code>public T Max&lt;T&gt;(T x, T y) where T : IComparable&lt;T&gt;\n{\n   return x.CompareTo(y) &gt; 0 ? x : y;\n}\n</code></pre></p> <p>Hier ist <code>T</code> der Typ-Parameter, und <code>T</code> muss das <code>IComparable&lt;T&gt;</code> Interface implementieren, um den Vergleich durchzuf\u00fchren.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Generische%20Typen/#typrestriktionen","title":"Typrestriktionen","text":"<p>Generische Typen k\u00f6nnen durch Restriktionen eingeschr\u00e4nkt werden.</p> <p>[!code]- Beispiel: Typrestriktionen <pre><code>public class LimitedClass&lt;T&gt; where T : IComparable&lt;T&gt;\n{\n    // T muss IComparable&lt;T&gt; implementieren\n}\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Generische%20Typen/#generische-interfaces","title":"Generische Interfaces","text":"<p>Generische Interfaces arbeiten auf \u00e4hnliche Weise wie generische Klassen:</p> <p>[!code]- Beispiel: Generisches Interface <pre><code>public interface IRepository&lt;T&gt;\n{\n   void Add(T item);\n   T Get(int id);\n}\n</code></pre></p> <p>[!code]- Beispiel: Implementierung eines generischen Interfaces <pre><code>public class VehicleRepository : IRepository&lt;Vehicle&gt;\n{\n   public void Add(Vehicle item) { /* Implementierung */ }\n   public Vehicle Get(int id) { /* Implementierung */ return new Vehicle(); }\n}\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Programmierung/","title":"Programmierung","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Programmierung/#allgemeine-informationen","title":"Allgemeine Informationen","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Programmierung/#klausur-themen","title":"Klausur Themen","text":"<p>Eigene Exception erstellen</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Programmierung/#termine","title":"Termine","text":"<p>24.09.2024 \u2192 Klausur</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/Common%20Type%20System%20%28CTS%29%20in%20Csharp/","title":"Common Type System (CTS) in Csharp","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/Common%20Type%20System%20%28CTS%29%20in%20Csharp/#einfuhrung","title":"\ud83d\udcd8 Einf\u00fchrung","text":"<p>Das Common Type System (CTS) ist ein grundlegender Bestandteil der .NET-Architektur, das sicherstellt, dass in verschiedenen .NET-Sprachen definierte und verwendete Datentypen miteinander kompatibel sind. Es definiert eine Reihe von Datentypen und Regeln f\u00fcr die Arbeit mit diesen Typen, um Interoperabilit\u00e4t und Sicherheit zu gew\u00e4hrleisten.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/Common%20Type%20System%20%28CTS%29%20in%20Csharp/#regeln-und-konzepte-des-cts","title":"\ud83d\udee1\ufe0f Regeln und Konzepte des CTS","text":"<p>Das CTS definiert mehrere Regeln und Konzepte, die die Verwendung von Datentypen standardisieren:</p> <ol> <li>Typensicherheit: Das CTS sorgt daf\u00fcr, dass Operationen nur auf kompatiblen Datentypen ausgef\u00fchrt werden, was Laufzeitfehler verhindert.</li> <li>Vererbung: Referenztypen k\u00f6nnen von anderen Typen erben und deren Mitglieder verwenden.</li> <li>Boxing und Unboxing: Werttypen k\u00f6nnen in Referenztypen umgewandelt werden (Boxing) und wieder zur\u00fcck (Unboxing).</li> <li>Gemeinsame Typenbibliothek (Base Class Library, BCL): Eine Sammlung vordefinierter Klassen und Typen, die alle .NET-Sprachen nutzen k\u00f6nnen.</li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/Common%20Type%20System%20%28CTS%29%20in%20Csharp/#beispiele-fur-boxing-und-unboxing","title":"\ud83d\udd04 Beispiele f\u00fcr Boxing und Unboxing","text":"<p>Boxing wandelt einen Werttyp in einen Referenztyp um: <pre><code>int number = 123;\nobject boxedNumber = number; // Boxing\n</code></pre></p> <p>Unboxing wandelt einen Referenztyp wieder in einen Werttyp um: <pre><code>object boxedNumber = 123;\nint number = (int)boxedNumber; // Unboxing\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/Common%20Type%20System%20%28CTS%29%20in%20Csharp/#interoperabilitat-zwischen-net-sprachen","title":"\ud83c\udf0d Interoperabilit\u00e4t zwischen .NET-Sprachen","text":"<p>Durch das CTS k\u00f6nnen verschiedene .NET-Sprachen (z.B. C#, VB.NET, F#) nahtlos miteinander arbeiten, da alle Sprachen die gleichen Typen und Regeln verwenden. Dies erm\u00f6glicht die Verwendung von Bibliotheken und Modulen, die in einer Sprache geschrieben wurden, in einer anderen Sprache.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/Csharp%20vs%20Java/","title":"Csharp vs Java","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/Csharp%20vs%20Java/#net-losung-left-side","title":"\ud83c\udf10 .NET-L\u00f6sung (Left Side)","text":"<p>Die .NET-L\u00f6sung wird von Microsoft entwickelt und unterst\u00fctzt mehrere Programmiersprachen und Plattformen. Die Hauptkomponenten der .NET-Architektur sind:</p> <ul> <li>Xamarin</li> <li> <p>Xamarin ist ein Framework, das die Entwicklung von Anwendungen f\u00fcr mehrere Plattformen erm\u00f6glicht, darunter:</p> <ul> <li>Android</li> <li>iOS</li> <li>Unix</li> <li>Windows</li> <li>Mac</li> </ul> </li> <li> <p>Mono</p> </li> <li>Mono ist eine Open-Source-Implementierung des .NET Frameworks, die auf den offenen Standards f\u00fcr die Sprache C# und die Common Language Runtime (CLR) basiert.</li> <li> <p>Es erm\u00f6glicht die Entwicklung von plattform\u00fcbergreifenden Anwendungen und erweitert die Reichweite des .NET Frameworks auf andere Betriebssysteme als Windows.</p> </li> <li> <p>Microsoft</p> </li> <li>Programmiersprachen:<ul> <li>C#: Eine moderne, objektorientierte Programmiersprache, die von Microsoft entwickelt wurde.</li> <li>J#: Eine Java-\u00e4hnliche Sprache, die f\u00fcr die .NET-Plattform entwickelt wurde.</li> <li>VB (Visual Basic): Eine leicht zu erlernende Sprache, die sich gut f\u00fcr Rapid Application Development (RAD) eignet.</li> </ul> </li> <li>IL codes (Intermediate Language): Der Zwischencode, in den der Quellcode der .NET-Sprachen kompiliert wird.</li> <li>CLR (Common Language Runtime): Die Laufzeitumgebung, die den IL-Code ausf\u00fchrt und Funktionen wie Garbage Collection, Sicherheit und Ausnahmebehandlung bietet.</li> <li>Windows OS: Das Betriebssystem, auf dem die .NET-Anwendungen ausgef\u00fchrt werden.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/Csharp%20vs%20Java/#java-losung-right-side","title":"\u2615 Java-L\u00f6sung (Right Side)","text":"<p>Die Java-L\u00f6sung wurde urspr\u00fcnglich von Sun Microsystems entwickelt und sp\u00e4ter von Oracle \u00fcbernommen. Die Hauptkomponenten der Java-Architektur sind:</p> <ul> <li>Sun -&gt; Oracle</li> <li>Java code: Der Quellcode, der in der Programmiersprache Java geschrieben ist.</li> <li>Java byte code: Der Zwischencode, in den der Java-Quellcode kompiliert wird.</li> <li>JVM (Java Virtual Machine): Die Laufzeitumgebung, die den Java-Bytecode ausf\u00fchrt und plattform\u00fcbergreifende Kompatibilit\u00e4t erm\u00f6glicht.</li> <li>Unterst\u00fctzte Plattformen:<ul> <li>Unix</li> <li>Windows</li> <li>Mac</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/Csharp%20vs%20Java/#vergleich-und-zusammenhange","title":"\ud83d\udd04 Vergleich und Zusammenh\u00e4nge","text":"<ul> <li>Plattformunabh\u00e4ngigkeit:</li> <li> <p>Beide L\u00f6sungen bieten eine Form der Plattformunabh\u00e4ngigkeit. Bei .NET wird dies durch Mono und Xamarin erreicht, w\u00e4hrend Java dies durch die JVM erreicht.</p> </li> <li> <p>Zwischencode:</p> </li> <li> <p>Sowohl .NET als auch Java verwenden einen Zwischencode (IL-Code bzw. Bytecode), der auf einer virtuellen Maschine (CLR bzw. JVM) ausgef\u00fchrt wird.</p> </li> <li> <p>Laufzeitumgebungen:</p> </li> <li>Die CLR und die JVM bieten \u00e4hnliche Funktionen, wie z.B. Garbage Collection, Sicherheit und Ausnahmebehandlung, um die Ausf\u00fchrung von Anwendungen zu verwalten.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/Csharp%20vs%20Pyhton/","title":"Csharp vs Pyhton","text":"Vergleichspunkt C# vs. Python Ausf\u00fchrungsart kompiliert, h\u00f6here Ausf\u00fchrungsperformance interpretiert, h\u00f6here Entwicklungsperformance Programmierparadigma objektorientiert objektorientiert und funktional Bibliotheken gro\u00dfe Standardbibliothek im .net-Framework viele verwendbare Frameworks Lizenz Microsoft-Lizenz Open-Source Typisierung Typischer dynamisches Casting von Typen Dependency Injection Ja - Multithreading Multi-Threading kein Multithreading Anwendungsbereiche Webanwendungen (ASP), Desktopanwendungen (MAUI, WPF und WinUI), Spieleentwicklung (Unity), Cloud-Funktionen Webanwendungen (Flask oder Django), Datenanalyse, Daten-Visualisierung und Objekt- bzw. Gesichtserkennung Betriebssystem Windows! Linux!"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/IronPython/","title":"IronPython","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/IronPython/#was-ist-ironpython","title":"\ud83d\udcd8 Was ist IronPython?","text":"<p>IronPython ist eine Implementierung der Python-Programmiersprache, die auf der .NET Common Language Runtime (CLR) l\u00e4uft. Es kombiniert die dynamischen und flexiblen Eigenschaften von Python mit der leistungsstarken und umfassenden Infrastruktur des .NET-Frameworks.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/IronPython/#hauptmerkmale-von-ironpython","title":"\ud83d\udee0\ufe0f Hauptmerkmale von IronPython","text":"<ol> <li>Integration mit .NET: Erlaubt die Nutzung von .NET-Bibliotheken und -Funktionen direkt in Python-Skripten.</li> <li>Interoperabilit\u00e4t: Python-Code kann .NET-Objekte erstellen und verwenden, w\u00e4hrend .NET-Code auch Python-Module importieren und verwenden kann.</li> <li>Dynamische Sprache: Beh\u00e4lt die dynamische Natur von Python bei, was schnelles und flexibles Entwickeln erm\u00f6glicht.</li> <li>Cross-Plattform: Kann auf verschiedenen Plattformen eingesetzt werden, die .NET unterst\u00fctzen, einschlie\u00dflich Windows, Linux und macOS.</li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/IronPython/#technische-details","title":"\u2699\ufe0f Technische Details","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/IronPython/#installation","title":"Installation","text":"<p>IronPython kann einfach \u00fcber den Installer von der offiziellen IronPython-Website oder \u00fcber NuGet installiert werden.</p> <pre><code>pip install ironpython\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/IronPython/#grundlegende-verwendung","title":"Grundlegende Verwendung","text":"<p>Ein einfaches Beispiel, wie IronPython verwendet wird, um auf .NET-Bibliotheken zuzugreifen:</p> <pre><code>import clr\nclr.AddReference('System')\nfrom System import Console\n\nConsole.WriteLine(\"Hello from IronPython!\")\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/IronPython/#integration-mit-net","title":"Integration mit .NET","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/IronPython/#aufruf-von-net-code-aus-ironpython","title":"Aufruf von .NET-Code aus IronPython","text":"<p>IronPython erm\u00f6glicht es, .NET-Assemblies zu referenzieren und deren Klassen und Methoden direkt zu nutzen: <pre><code>import clr\nclr.AddReference('System.Drawing')\nfrom System.Drawing import Point\n\npoint = Point(10, 20)\nprint(point.X, point.Y)\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/IronPython/#aufruf-von-ironpython-code-aus-net","title":"Aufruf von IronPython-Code aus .NET","text":"<p>Sie k\u00f6nnen auch IronPython-Code von einer .NET-Anwendung aus aufrufen. Hier ist ein Beispiel in C#: <pre><code>using IronPython.Hosting;\nusing Microsoft.Scripting.Hosting;\n\nclass Program\n{\n    static void Main()\n    {\n        ScriptEngine engine = Python.CreateEngine();\n        engine.Execute(\"print('Hello from Python in .NET')\");\n    }\n}\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/IronPython/#anwendungsbeispiele","title":"\ud83d\udca1 Anwendungsbeispiele","text":"<ol> <li>Scripting in .NET-Anwendungen: Verwenden Sie IronPython, um dynamische Scripting-Funktionen in Ihre .NET-Anwendungen zu integrieren.</li> <li>Rapid Prototyping: Nutzen Sie die Flexibilit\u00e4t von Python, um schnell Prototypen zu erstellen, die sp\u00e4ter in .NET-Anwendungen integriert werden k\u00f6nnen.</li> <li>Automatisierung: Schreiben Sie Automatisierungsskripte in Python, die .NET-Bibliotheken verwenden.</li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/Net%20MAUI%20-%20Multi-platform%20App%20UI/","title":"Net MAUI   Multi platform App UI","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/Net%20MAUI%20-%20Multi-platform%20App%20UI/#einfuhrung","title":"\ud83d\udcd8 Einf\u00fchrung","text":"<p>.NET MAUI steht f\u00fcr \".NET Multi-platform App UI\" und ist ein modernes UI-Framework von Microsoft. Es erm\u00f6glicht Entwicklern, plattform\u00fcbergreifende Anwendungen f\u00fcr verschiedene Zielplattformen wie Windows, macOS, iOS, Android und Web zu erstellen.</p> <p></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/Net%20MAUI%20-%20Multi-platform%20App%20UI/#hauptmerkmale-von-net-maui","title":"\ud83d\udee0\ufe0f Hauptmerkmale von .NET MAUI","text":"<ol> <li>Einheitliche Codebasis: Erh\u00f6ht die Entwicklungseffizienz durch die gemeinsame Nutzung des Gro\u00dfteils des Codes f\u00fcr alle unterst\u00fctzten Plattformen.</li> <li>Native Benutzeroberfl\u00e4chen: Erm\u00f6glicht die Erstellung nativer Benutzeroberfl\u00e4chen, die sich nahtlos in die spezifischen Betriebssysteme einf\u00fcgen.</li> <li>XAML-basierte UI-Entwicklung: Erstellung der Benutzeroberfl\u00e4che (UI) \u00fcber XAML, kombiniert mit C# zur Steuerung der Logik.</li> <li>Erweiterbarkeit und Anpassbarkeit: Integration vorhandener nativer Funktionen und Bibliotheken in .NET MAUI-Anwendungen.</li> <li>Unterst\u00fctzung f\u00fcr mobile und Desktop-Plattformen: Entwicklung von Anwendungen f\u00fcr iOS, Android, Windows und macOS.</li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/Net%20MAUI%20-%20Multi-platform%20App%20UI/#technische-details","title":"\u2699\ufe0f Technische Details","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/Net%20MAUI%20-%20Multi-platform%20App%20UI/#projektstruktur","title":"Projektstruktur","text":"<p>Ein .NET MAUI-Projekt besteht aus: - Einem Hauptprojekt f\u00fcr die gemeinsame Logik und Benutzeroberfl\u00e4che. - Spezifischen Projekten f\u00fcr jede Zielplattform zur plattformspezifischen Anpassung und Konfiguration.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/Net%20MAUI%20-%20Multi-platform%20App%20UI/#plattformintegration","title":"Plattformintegration","text":"<ul> <li>Plattformspezifische APIs und Ressourcen k\u00f6nnen direkt \u00fcber Dependency Injection und Schnittstellen genutzt werden.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/Net%20MAUI%20-%20Multi-platform%20App%20UI/#entwicklungsumgebung","title":"Entwicklungsumgebung","text":"<ul> <li>Visual Studio 2022</li> <li>Visual Studio Code</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/Net%20MAUI%20-%20Multi-platform%20App%20UI/#beispiel","title":"\ud83d\udca1 Beispiel","text":"<p>Ein einfaches Beispiel f\u00fcr eine .NET MAUI-Anwendung:</p> <pre><code>using Microsoft.Maui;\nusing Microsoft.Maui.Controls;\n\npublic partial class App : Application\n{\n    public App()\n    {\n        InitializeComponent();\n\n        MainPage = new MainPage();\n    }\n}\n\npublic partial class MainPage : ContentPage\n{\n    public MainPage()\n    {\n        var label = new Label\n        {\n            Text = \"Hello, Maui!\",\n            HorizontalOptions = LayoutOptions.Center,\n            VerticalOptions = LayoutOptions.Center\n        };\n\n        Content = new StackLayout\n        {\n            Children = { label }\n        };\n    }\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/Stack%20and%20Heap/","title":"Stack and Heap","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/Stack%20and%20Heap/#stack","title":"\ud83d\udcdd Stack","text":"<p>Der Stack ist ein spezieller Speicherbereich, der verwendet wird, um die Ausf\u00fchrung von Programmen zu verwalten. Jede Funktion hat einen eigenen \"Stack Frame\", der beim Aufrufen der Funktion angelegt wird und lokale Variablen sowie Funktionsparameter speichert. Der Zugriff auf den Stack ist sehr schnell und effizient.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/Stack%20and%20Heap/#verwendung","title":"Verwendung","text":"<p>Der Stack wird f\u00fcr die Speicherung von primitiven Datentypen (z.B. int, float, bool), Funktionsparametern und lokalen Variablen genutzt.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/Stack%20and%20Heap/#lebensdauer","title":"Lebensdauer","text":"<p>Variablen im Stack leben nur innerhalb der Dauer des zugeh\u00f6rigen Funktionsaufrufs.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/Stack%20and%20Heap/#heap","title":"\ud83d\uddc4\ufe0f Heap","text":"<p>Der Heap ist ein gr\u00f6\u00dferer und allgemeinerer Speicherbereich, der zur dynamischen Speicherung von Objekten und Datenstrukturen dient. Im Gegensatz zum Stack erfolgt die Speicherung im Heap zur Laufzeit und erfordert mehr Verwaltungsaufwand.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/Stack%20and%20Heap/#verwendung_1","title":"Verwendung","text":"<p>Der Heap wird f\u00fcr die Speicherung von Objekten (Instanzen von Klassen), Arrays und anderen dynamischen Datenstrukturen verwendet.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/Stack%20and%20Heap/#lebensdauer_1","title":"Lebensdauer","text":"<p>Objekte im Heap bleiben solange erhalten, bis sie nicht mehr referenziert werden und vom Garbage Collector eingesammelt werden.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/Stack%20and%20Heap/#unterschiede-zusammengefasst","title":"\ud83d\udd04 Unterschiede zusammengefasst","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/Stack%20and%20Heap/#zugriff-und-geschwindigkeit","title":"Zugriff und Geschwindigkeit","text":"<p>Der Zugriff auf den Stack ist schneller und direkter im Vergleich zum Heap, der langsamer aufgrund der dynamischen Allokation ist.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/Stack%20and%20Heap/#lebensdauer_2","title":"Lebensdauer","text":"<p>Variablen im Stack haben eine begrenzte Lebensdauer, abh\u00e4ngig vom Funktionsaufruf. Objekte im Heap k\u00f6nnen eine l\u00e4ngere Lebensdauer haben, basierend auf der Verwaltung ihrer Referenzen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/Typsystem/","title":"Typsystem","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/Vergleich%20von%20Programmiersprachen/","title":"Vergleich von Programmiersprachen","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/Was%20kann%20Csharp/","title":"Was kann Csharp","text":"<ul> <li>\ud83d\udda5\ufe0f Objektorientiert:</li> <li> <p>C# unterst\u00fctzt die objektorientierte Programmierung, wodurch Code modular und wiederverwendbar wird.</p> </li> <li> <p>\ud83d\udee0\ufe0f Managed:</p> </li> <li> <p>C# verwendet eine Speicherverwaltung mit Garbage Collection. Das bedeutet, dass Speicher nicht manuell wie in C reserviert oder freigegeben werden muss. Diese Aufgabe \u00fcbernimmt C# automatisch, wodurch Speicherlecks vermieden werden.</p> </li> <li> <p>\ud83d\udcda Bibliotheksframework:</p> </li> <li> <p>Umfassende Standardbibliotheken bieten Funktionalit\u00e4ten f\u00fcr:</p> <ul> <li>Container (z.B. Listen, Arrays, Dictionaries)</li> <li>Objekte und deren Verwaltung</li> <li>Algorithmen (z.B. Sortieren, Suchen)</li> </ul> </li> <li> <p>\ud83d\udd12 Strikter, logischer und typsicher:</p> </li> <li> <p>C# ist eine stark typisierte Sprache, die strikte Typpr\u00fcfungen zur Kompilierzeit durchf\u00fchrt, wodurch Fehler fr\u00fchzeitig erkannt werden.</p> </li> <li> <p>\ud83d\udc22 Leistungsf\u00e4higkeit:</p> </li> <li> <p>Im Vergleich zu Sprachen wie C++ kann C# langsamer sein aufgrund der zus\u00e4tzlichen Abstraktionsebenen und der Garbage Collection. Vergleich von Programmiersprachen</p> </li> <li> <p>\ud83d\ude80 Unterst\u00fctzung f\u00fcr verschiedene Technologien:</p> </li> <li>\ud83d\udcca Datenbanken:<ul> <li>Einfache Integration mit Datenbanken \u00fcber ADO.NET, Entity Framework und LINQ.</li> </ul> </li> <li>\ud83d\uddbc\ufe0f Grafische Benutzeroberfl\u00e4chen (GUIs):<ul> <li>Mit Windows Presentation Foundation (WPF) lassen sich moderne und ansprechende Desktop-Anwendungen erstellen.</li> </ul> </li> <li>\ud83d\uddc3\ufe0f Serialisierung:<ul> <li>Unterst\u00fctzung f\u00fcr die Serialisierung und Deserialisierung von Daten in Formaten wie XML und JSON.</li> </ul> </li> <li>\ud83c\udfa5 Multimedia:<ul> <li>Bibliotheken f\u00fcr die Verarbeitung von Bildern, Audio und Video.</li> </ul> </li> <li>\ud83e\uddf5 Multithreading:<ul> <li>Umfangreiche Unterst\u00fctzung f\u00fcr parallele und asynchrone Programmierung, um die Leistung zu maximieren.</li> </ul> </li> <li>\ud83d\udd14 Ereignisgesteuerte Programmierung:<ul> <li>Robuste Ereignis- und Delegatenmodelle, um interaktive Anwendungen zu entwickeln.</li> </ul> </li> <li>\u2699\ufe0f Parallele Programmierung:<ul> <li>Mit der Task Parallel Library (TPL) und Parallel LINQ (PLINQ) k\u00f6nnen Entwickler parallele Programme einfach erstellen.</li> </ul> </li> <li>\ud83c\udf10 Web-Anwendungen:<ul> <li>Mit Blazor k\u00f6nnen interaktive Web-Apps sowohl auf dem Server als auch im Browser mit .NET geschrieben werden.</li> </ul> </li> <li>\ud83c\udfe2 Enterprise Services:<ul> <li>Unterst\u00fctzung f\u00fcr Unternehmensanwendungen durch Technologien wie ASP.NET, Windows Communication Foundation (WCF)</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/%C3%9Cberblick%20%C3%BCber%20die%20Elementaren%20Datentypen/","title":"\u00dcberblick \u00fcber die Elementaren Datentypen","text":"<p>C# bietet eine Vielzahl von elementaren Datentypen, die in zwei Hauptkategorien unterteilt sind: Werttypen und Referenztypen. Hier ist ein \u00dcberblick \u00fcber die elementaren Datentypen in C#:</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/%C3%9Cberblick%20%C3%BCber%20die%20Elementaren%20Datentypen/#werttypen","title":"\ud83e\udde9 Werttypen","text":"<p>Werttypen speichern tats\u00e4chliche Werte direkt im Speicher. Zu den Werttypen geh\u00f6ren:</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/%C3%9Cberblick%20%C3%BCber%20die%20Elementaren%20Datentypen/#ganzzahlige-typen","title":"\ud83d\udd22 Ganzzahlige Typen","text":"<ol> <li><code>byte</code></li> <li>Speichergr\u00f6\u00dfe: 1 Byte</li> <li> <p>Wertebereich: 0 bis 255</p> </li> <li> <p><code>sbyte</code></p> </li> <li>Speichergr\u00f6\u00dfe: 1 Byte</li> <li> <p>Wertebereich: -128 bis 127</p> </li> <li> <p><code>short</code></p> </li> <li>Speichergr\u00f6\u00dfe: 2 Bytes</li> <li> <p>Wertebereich: -32.768 bis 32.767</p> </li> <li> <p><code>ushort</code></p> </li> <li>Speichergr\u00f6\u00dfe: 2 Bytes</li> <li> <p>Wertebereich: 0 bis 65.535</p> </li> <li> <p><code>int</code></p> </li> <li>Speichergr\u00f6\u00dfe: 4 Bytes</li> <li> <p>Wertebereich: -2.147.483.648 bis 2.147.483.647</p> </li> <li> <p><code>uint</code></p> </li> <li>Speichergr\u00f6\u00dfe: 4 Bytes</li> <li> <p>Wertebereich: 0 bis 4.294.967.295</p> </li> <li> <p><code>long</code></p> </li> <li>Speichergr\u00f6\u00dfe: 8 Bytes</li> <li> <p>Wertebereich: -9.223.372.036.854.775.808 bis 9.223.372.036.854.775.807</p> </li> <li> <p><code>ulong</code></p> </li> <li>Speichergr\u00f6\u00dfe: 8 Bytes</li> <li>Wertebereich: 0 bis 18.446.744.073.709.551.615</li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/%C3%9Cberblick%20%C3%BCber%20die%20Elementaren%20Datentypen/#gleitkommazahlen","title":"\ud83d\udd22 Gleitkommazahlen","text":"<ol> <li><code>float</code></li> <li>Speichergr\u00f6\u00dfe: 4 Bytes</li> <li>Wertebereich: \u00b11,5 \u00d7 10^\u221245 bis \u00b13,4 \u00d7 10^38</li> <li> <p>Genauigkeit: ca. 6-9 Stellen</p> </li> <li> <p><code>double</code></p> </li> <li>Speichergr\u00f6\u00dfe: 8 Bytes</li> <li>Wertebereich: \u00b15,0 \u00d7 10^\u2212324 bis \u00b11,7 \u00d7 10^308</li> <li> <p>Genauigkeit: ca. 15-17 Stellen</p> </li> <li> <p><code>decimal</code></p> </li> <li>Speichergr\u00f6\u00dfe: 16 Bytes</li> <li>Wertebereich: \u00b11,0 \u00d7 10^\u221228 bis \u00b17,9 \u00d7 10^28</li> <li>Genauigkeit: 28-29 Stellen</li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/%C3%9Cberblick%20%C3%BCber%20die%20Elementaren%20Datentypen/#andere-werttypen","title":"\ud83d\udd24 Andere Werttypen","text":"<ol> <li><code>char</code></li> <li>Speichergr\u00f6\u00dfe: 2 Bytes</li> <li> <p>Wertebereich: Ein einzelnes 16-Bit-Unicode-Zeichen (0 bis 65.535)</p> </li> <li> <p><code>bool</code></p> </li> <li>Speichergr\u00f6\u00dfe: 1 Byte</li> <li>Wertebereich: <code>true</code> oder <code>false</code></li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/%C3%9Cberblick%20%C3%BCber%20die%20Elementaren%20Datentypen/#referenztypen","title":"\ud83e\udde9 Referenztypen","text":"<p>Referenztypen speichern Verweise auf die tats\u00e4chlichen Daten, die im Heap-Speicher gespeichert sind.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/%C3%9Cberblick%20%C3%BCber%20die%20Elementaren%20Datentypen/#zeichenketten-und-arrays","title":"\ud83d\udcc4 Zeichenketten und Arrays","text":"<ol> <li><code>string</code></li> <li>Eine Folge von Unicode-Zeichen.</li> <li> <p>Beispiel: <code>string name = \"Hello, World!\";</code></p> </li> <li> <p><code>object</code></p> </li> <li>Basistyp f\u00fcr alle Datentypen in C#.</li> <li>Kann jeden Werttyp oder Referenztyp speichern.</li> <li> <p>Beispiel: <code>object obj = 42;</code></p> </li> <li> <p>Arrays</p> </li> <li>Sammlung von Elementen desselben Typs.</li> <li>Beispiel: <code>int[] numbers = { 1, 2, 3, 4, 5 };</code></li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/%C3%9Cberblick%20%C3%BCber%20die%20Elementaren%20Datentypen/#beispielcode","title":"\ud83d\udd27 Beispielcode","text":"<p>Hier ein kurzer Beispielcode, der die verschiedenen Datentypen zeigt:</p> <pre><code>using System;\n\nclass Program\n{\n    static void Main()\n    {\n        // Ganzzahlige Typen\n        byte a = 255;\n        short b = -32768;\n        int c = 2147483647;\n        long d = 9223372036854775807;\n\n        // Gleitkommazahlen\n        float e = 3.14f;\n        double f = 2.7182818284;\n        decimal g = 1.6180339887m;\n\n        // Andere Werttypen\n        char h = 'A';\n        bool i = true;\n\n        // Referenztypen\n        string j = \"Hello, C#!\";\n        object k = 12345;\n        int[] l = { 1, 2, 3, 4, 5 };\n\n        // Ausgabe\n        Console.WriteLine($\"byte: {a}, short: {b}, int: {c}, long: {d}\");\n        Console.WriteLine($\"float: {e}, double: {f}, decimal: {g}\");\n        Console.WriteLine($\"char: {h}, bool: {i}\");\n        Console.WriteLine($\"string: {j}, object: {k}, array: {string.Join(\", \", l)}\");\n    }\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/%C3%9Cbersicht%20.Net%20Framework/","title":"\u00dcbersicht .Net Framework","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/%C3%9Cbersicht%20.Net%20Framework/#allgemeine-beschreibung","title":"\ud83d\udcdd Allgemeine Beschreibung","text":"<p>Das .NET-Framework ist eine Entwicklungsplattform von Microsoft, die es Entwicklern erm\u00f6glicht, Anwendungen f\u00fcr Windows zu erstellen und auszuf\u00fchren. Es unterst\u00fctzt mehrere Programmiersprachen und bietet eine einheitliche Laufzeitumgebung. Im Bild werden die verschiedenen Ebenen der .NET-Architektur sowie deren Entsprechungen auf Mac- und Linux-Systemen mittels Mono-Framework dargestellt.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/%C3%9Cbersicht%20.Net%20Framework/#komponenten-und-beschreibung","title":"\ud83e\udde9 Komponenten und Beschreibung","text":"<ol> <li> <p>Programmiersprachen und IL-Codes</p> <ul> <li>C#, J#, VB: Dies sind Beispiele f\u00fcr .NET-Programmiersprachen, die zur Erstellung von Anwendungen verwendet werden k\u00f6nnen.</li> <li>IL-Codes: IL (Intermediate Language) ist der Zwischencode, in den .NET-Programme kompiliert werden, bevor sie auf der CLR ausgef\u00fchrt werden.</li> </ul> </li> <li> <p>Mono</p> <ul> <li>Mono Class Library (&lt;.NET6): Eine Open-Source-Implementierung der .NET-Framework-Klassenbibliothek, die auf mehreren Betriebssystemen l\u00e4uft.</li> <li>Mono Runtime: Die Laufzeitumgebung, die es erm\u00f6glicht, .NET-Anwendungen auf nicht-Windows-Plattformen (z.B. Linux, macOS) auszuf\u00fchren.</li> </ul> </li> <li> <p>Common Language Runtime (CLR)</p> <ul> <li>Dies ist die Laufzeitumgebung von .NET, die IL-Codes ausf\u00fchrt. Sie bietet Dienste wie Speicherverwaltung, Sicherheit und Ausnahmebehandlung.</li> </ul> </li> <li> <p>Framework Class Library (FCL) / Base Class Library (BCL)</p> <ul> <li>Die Basisklassenbibliothek bietet eine Vielzahl von grundlegenden Klassen und Methoden, die f\u00fcr die Entwicklung von .NET-Anwendungen ben\u00f6tigt werden.</li> </ul> </li> <li> <p>Common Intermediate Language (CIL)</p> <ul> <li>Auch bekannt als Microsoft Intermediate Language (MSIL). Es handelt sich um einen plattformunabh\u00e4ngigen Zwischencode, in den .NET-Sprachen kompiliert werden.</li> </ul> </li> <li> <p>Common Language Specification (CLS)</p> <ul> <li>Eine Menge von Regeln und Best Practices, die sicherstellen, dass verschiedene .NET-Sprachen miteinander interoperabel sind.</li> </ul> </li> <li> <p>Betriebssysteme und Hardware</p> <ul> <li>Windows OS: Das Betriebssystem, auf dem das .NET-Framework haupts\u00e4chlich ausgef\u00fchrt wird.</li> <li>Mac: Zeigt die Unterst\u00fctzung von Mono f\u00fcr MacOS an.</li> <li>Linux: Zeigt die Unterst\u00fctzung von Mono f\u00fcr Linux an.</li> <li>Hardware: Die physische Ebene, auf der das Betriebssystem l\u00e4uft.</li> </ul> </li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Einleitung/%C3%9Cbersicht%20.Net%20Framework/#zusatzliche-informationen","title":"\ud83d\udca1 Zus\u00e4tzliche Informationen","text":"<ul> <li>Portabilit\u00e4t und Interoperabilit\u00e4t: </li> <li> <p>Durch die Verwendung von IL und CLR ist es m\u00f6glich, .NET-Anwendungen auf verschiedenen Plattformen auszuf\u00fchren, ohne den Quellcode zu \u00e4ndern. Dies wird durch das Mono-Framework noch erweitert, das die Ausf\u00fchrung auf anderen Betriebssystemen erm\u00f6glicht.</p> </li> <li> <p>Leistung und Sicherheit: </p> </li> <li> <p>CLR bietet eine optimierte Laufzeitumgebung, die sowohl die Leistung der Anwendung als auch die Sicherheit durch Funktionen wie Garbage Collection und Code Access Security verbessert.</p> </li> <li> <p>Framework-Erweiterungen: </p> </li> <li> <p>Das .NET-Framework wird kontinuierlich erweitert und aktualisiert. Mit .NET Core und sp\u00e4ter .NET 5/6 wurden viele Verbesserungen und neue Funktionen eingef\u00fchrt, die Cross-Platform-Kompatibilit\u00e4t weiter verbessern.</p> </li> <li> <p>Entwicklungstools: </p> </li> <li>Visual Studio ist die integrierte Entwicklungsumgebung (IDE) von Microsoft, die umfassende Unterst\u00fctzung f\u00fcr die .NET-Entwicklung bietet, einschlie\u00dflich Debugging, Refactoring und Performance-Analyse.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Exception%20Handling/Exception%20Class/","title":"Exception Class","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Exception%20Handling/Exception%20Handling/","title":"Exception Handling","text":"<p>[!info]- Murphy's Law: \"Anything that can go wrong will go wrong.\"</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Exception%20Handling/Exception%20Handling/#einfuhrung","title":"Einf\u00fchrung","text":"<p>Bei vielen Methodenaufrufen ist es realistisch und erforderlich, auf St\u00f6rungen des normalen Ablaufs vorbereitet zu sein. Unterschiedliche Funktionen aus verschiedenen, getrennt entwickelten Modulen m\u00fcssen zusammenarbeiten. Dies erfordert eine robuste Ausnahmebehandlung, um mit Laufzeitfehlern umzugehen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Exception%20Handling/Exception%20Handling/#definition-von-ausnahmen","title":"Definition von Ausnahmen","text":"<p>Wenn eine Funktion w\u00e4hrend ihres Ablaufs eine \"un\u00fcbliche Situation\" (Ausnahme, Exception) feststellt, kann dies durch Programmierfehler (z.B. ung\u00fcltiger Indexzugriff, Division durch Null) oder besondere Umst\u00e4nde (z.B. Speichermangel, Netzwerkunterbrechung) verursacht werden. Die Reaktion kann unterschiedlich ausfallen:</p> <ul> <li>Fehlermeldung ausgeben und Programm abbrechen</li> <li>Fehlerstatus zur\u00fcckgeben: Trennung von Fehlerfeststellung (in der Funktion) und Fehlerbehandlung (beim Aufrufer)</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Exception%20Handling/Exception%20Handling/#probleme-bei-der-ruckgabe-von-fehlerwerten","title":"Probleme bei der R\u00fcckgabe von Fehlerwerten","text":"<ul> <li>Ein R\u00fcckgabewert: Schwierig, R\u00fcckgabewerte von Fehlerwerten zu unterscheiden</li> <li>M\u00fchsame Fehlerabfrage: Jedes Mal muss der Erfolg des Aufrufs \u00fcberpr\u00fcft werden</li> <li>Vergessene Fehlerbehandlung: Kann zu falschen Berechnungen f\u00fchren</li> <li>Fehlererkennung und -behandlung nicht v\u00f6llig getrennt</li> <li>Bibliotheksfunktionen: Sollten eine letzte Chance f\u00fcr Aufr\u00e4umarbeiten bieten</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Exception%20Handling/Exception%20Handling/#fehlerdefinition","title":"Fehlerdefinition","text":"<p>Eine Fehlerklasse wird an der \"Unfallstelle\" erzeugt. Dies geschieht durch:</p> <p>[!implementation]- Implementation <pre><code>public class COdieExcept : Exception {}\npublic class CJonExcept : Exception {}\npublic class CNermalExcept : Exception {}\n</code></pre></p> <p>Durch die Verwendung spezifischer Unterklassen k\u00f6nnen verschiedene Fehlerarten unterschieden und zus\u00e4tzliche Informationen hinzugef\u00fcgt werden.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Exception%20Handling/Exception%20Handling/#fehlererkennung-und-signalisierung","title":"Fehlererkennung und -signalisierung","text":"<p>Der L\u00f6sungsalgorithmus wird in einen <code>try</code>-Block eingeschlossen. Bei einer Ausnahmesituation wird ein Ausnahmeobjekt mit <code>throw</code> geworfen:</p> <pre><code>try\n{\n    // L\u00f6sungsalgorithmus\n}\ncatch (Exception e)\n{\n    // Fehlerbehandlung\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Exception%20Handling/Exception%20Handling/#fehlerfangen-und-behandlung","title":"Fehlerfangen und -behandlung","text":"<p>Reaktionsm\u00f6glichkeiten:</p> <ul> <li>Fortsetzung der Methode: Angepasst oder mit erneuter Ausnahme</li> <li>Ignorieren der Ausnahme: Ausnahmeobjekt wird dem Aufrufer \u00fcberlassen</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Exception%20Handling/Exception%20Handling/#beispiel-fakultatsberechnung","title":"Beispiel: Fakult\u00e4tsberechnung","text":"<p>[!example]- Beispiel Beispiel: Berechnung der Fakult\u00e4t einer Zahl unter Verwendung der <code>try</code>, <code>catch</code> und <code>finally</code> Bl\u00f6cke.</p> <pre><code>using System;\n\nstatic void Main(string[] args)\n{\n    if (args.Length == 0)\n    {\n        Console.WriteLine(\"Kein Argument angegeben\");\n        Environment.Exit(1);\n    }\n\n    int argument = Kon2Int(args[0]);\n    if (argument != -1)\n    {\n        double fakul = 1.0;\n        for (int i = 1; i &lt;= argument; i++)\n            fakul *= i;\n        Console.WriteLine(\"Fakult\u00e4t von {0}: {1}\", args[0], fakul);\n    }\n    else\n    {\n        Console.WriteLine(\"Keine ganze Zahl im Intervall [0, 170]: \" + args[0]);\n    }\n}\n\nstatic int Kon2Int(string instr)\n{\n    try\n    {\n        int arg = Int32.Parse(instr);\n        if (arg &lt; 0 || arg &gt; 170)\n            throw new OverflowException();\n        return arg;\n    }\n    catch (OverflowException)\n    {\n        return -1;\n    }\n    catch (FormatException)\n    {\n        return -3;\n    }\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Exception%20Handling/Exception%20Handling/#der-finally-block","title":"Der <code>finally</code>-Block","text":"<p>Ein <code>finally</code>-Block wird unter fast allen Umst\u00e4nden ausgef\u00fchrt:</p> <ul> <li>Nach der ungest\u00f6rten Ausf\u00fchrung des <code>try</code>-Blocks</li> <li>Nach einer Exceptionbehandlung in einem <code>catch</code>-Block</li> <li>Nach dem Auftreten einer unbehandelten Exception im <code>try</code>-Block</li> <li>Beim Verlassen der <code>try</code>-Anweisung durch eine <code>goto</code>-Anweisung</li> </ul> <p>Der <code>finally</code>-Block ist ideal zur Freigabe von Ressourcen:</p> <pre><code>finally\n{\n    // Bereinigungsarbeiten\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Exception%20Handling/Returnwerte%20versus%20Exceptionhandling/","title":"Returnwerte versus Exceptionhandling","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Exception%20Handling/Returnwerte%20versus%20Exceptionhandling/#nachteile-der-nutzung-von-returnwerten-fur-fehlerruckgabe","title":"Nachteile der Nutzung von Returnwerten f\u00fcr Fehlerr\u00fcckgabe","text":"<p>[!fail] Nachteile: - Ungesicherte Beachtung von R\u00fcckgabewerten:   Gut gesetzte R\u00fcckgabewerte n\u00fctzen nichts, wenn sich die Aufrufer nicht darum k\u00fcmmern. - Umst\u00e4ndliche Weiterleitung von Fehlern:   Wenn ein Fehler nicht an Ort und Stelle behandelt werden soll, muss die Fehlerinformation aufw\u00e4ndig entlang der Aufrufersequenz nach oben gemeldet werden. - Beschr\u00e4nkung auf Methoden:   Die R\u00fcckgabe eines Fehlerindikators ist keine Option bei Eigenschaften, Indexern, Ereignissen oder \u00fcberladenen Operatoren.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Exception%20Handling/Returnwerte%20versus%20Exceptionhandling/#vorteile-von-exceptions","title":"Vorteile von Exceptions","text":"<p>[!done] Vorteile: - Bessere Lesbarkeit des Quellcodes:   Bessere Trennung zwischen den Anweisungen f\u00fcr den normalen Programmablauf und den Exceptionbehandlungen im Quellcode. - Garantierte Beachtung von Ausnahmen:   Exceptions k\u00f6nnen nicht ignoriert werden. Reagiert ein Programm nicht darauf, wird es vom Laufzeitsystem beendet. - Automatische Weitermeldung bis zur bestger\u00fcsteten Methode:   Oft ist der unmittelbare Verursacher nicht gut ger\u00fcstet zur Behandlung einer Ausnahme, z. B. nach dem vergeblichen \u00d6ffnen einer Datei. Dann entscheidet eine \u201eh\u00f6here\u201c Methode \u00fcber das weitere Vorgehen und erfragt z. B. beim Benutzer eine alternative Datei. - Bessere Fehlerinformationen f\u00fcr den Aufrufer/Ausgabe:   \u00dcber ein Exception-Objekt kann der Aufrufer sehr genau \u00fcber den aufgetretenen Fehler informiert werden (bei einem traditionellen R\u00fcckgabewert nicht der Fall).</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Exception%20Handling/Selbst%20erstellte%20Exception/","title":"Selbst erstellte Exception","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Exception%20Handling/Selbst%20erstellte%20Exception/#empfehlungen-fur-ausnahmeklassen","title":"Empfehlungen f\u00fcr Ausnahmeklassen","text":"<p>[!tip] Empfehlungen: - Basisklasse:   Als Basisklasse sollte <code>System.Exception</code> verwendet werden, z. B.: <pre><code>public class BadFaculArgException : Exception { ... }\n</code></pre> - Klassennamen:   Der Klassenname sollte mit dem Wort <code>Exception</code> enden. - Konstruktoren:   Die folgenden allgemeinen Konstruktoren f\u00fcr Exceptions sollten mit <code>public</code>-Verf\u00fcgbarkeit implementiert werden:   - Parameterfreier Konstruktor: <pre><code>public BadFaculArgException() { }\n</code></pre>   - Konstruktor mit einem <code>string</code>-Parameter f\u00fcr die Fehlermeldung: <pre><code>public BadFaculArgException(string message) : base(message) { }\n</code></pre>   - Konstruktor mit einem <code>string</code>-Parameter f\u00fcr die Fehlermeldung und einem <code>Exception</code>-Parameter f\u00fcr eine innere Exception: <pre><code>public BadFaculArgException(string message, Exception innerException) : base(message, innerException) { }\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Exception%20Handling/Selbst%20erstellte%20Exception/#eigene-exceptions-definieren","title":"Eigene Exceptions definieren","text":"<p>[!example] Beispiel f\u00fcr eine benutzerdefinierte Exception:</p> <p>```csharp using System;</p> <p>public class BadFaculArgException : Exception // Ableitung von Exception, bad argument in function faculty() {   int type = -1, value = -1;  string input;</p> <p>// Parameterfreier Konstruktor  public BadFaculArgException() { }</p> <p>// Konstruktor mit String-Parameter f\u00fcr Fehlermeldung    public BadFaculArgException(string message) : base(message) { }</p> <p>// Konstruktor mit der inner Exception   public BadFaculArgException(string message, Exception innerException) : base(message, innerException) { }</p> <p>// Konstruktor mit zus\u00e4tzlichem Information   public BadFaculArgException(string message, string input_, int type_, int value_, Exception innerException)        : base(message, innerException)  {     input = input_;       // zu konvertierende Zeichenfolge       if (type_ &gt;= 0 &amp;&amp; type &lt;= 3) type = type_;       // numerischer Indikator f\u00fcr die Fehlerart:       if (type_ == 4 &amp;&amp; (value_ &lt; 0 || value_ &gt; 170))       {           // 0: Unbekannt           // 1: Argument hat den Wert null           // 2: Zeichenfolge kann nicht konvertiert werden           // 3: int-\u00dcberlauf           // 4: int-Wert au\u00dferhalb [0, 170]           type = type_;           value = value_;       }   }</p> <p>public string Input { get { return input; } }    public int Type { get { return type; } }    public int Value { get { return value; } } } ```</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Iteratoren/Benannte%20Iteratoren/","title":"Benannte Iteratoren","text":"<p>Benannte Iteratoren in C# verwenden die <code>yield return</code>-Anweisung, um jedes Element einzeln nacheinander zur\u00fcckzugeben. Dabei wird die aktuelle Codeposition plus aller lokalen Variablen auf dem Stack gespeichert. Wenn die Iteratorfunktion das n\u00e4chste Mal aufgerufen wird, wird die Ausf\u00fchrung von dieser Position gestartet.</p> <p>[!NOTE] In einer Iteratormethode darf kein <code>return</code> ohne <code>yield</code> verwendet werden.</p> <p>[!TIP] <code>yield break</code> bricht die Speicherung in einem Zyklus ab.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Iteratoren/Benannte%20Iteratoren/#beispiel-1-einfache-iteratormethode","title":"Beispiel 1: Einfache Iteratormethode","text":"<p>[!example]- <pre><code>using System;\nusing System.Collections;\n\nclass Program\n{\n    static void Main()\n    {\n        foreach (int number in NextNumber())\n        {\n            Console.Write(number.ToString() + \" \");\n        }\n        // Output: 3 5 8\n    }\n\n    public static IEnumerable NextNumber()\n    {\n        yield return 3;\n        yield return 5;\n        yield return 8;\n    }\n}\n</code></pre></p> <p>In diesem Beispiel gibt die Methode <code>NextNumber</code> nacheinander die Zahlen 3, 5 und 8 zur\u00fcck. Der <code>foreach</code>-Loop in der <code>Main</code>-Methode gibt diese Zahlen aus.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Iteratoren/Benannte%20Iteratoren/#beispiel-2-iteratormethode-mit-bedingungen","title":"Beispiel 2: Iteratormethode mit Bedingungen","text":"<p>[!example]- <pre><code>using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main()\n    {\n        foreach (int number in EvenSequence(3, 12))\n        {\n            Console.Write(number.ToString() + \" \");\n        }\n        // Output: 4 6 8 10 12\n    }\n\n    public static IEnumerable&lt;int&gt; EvenSequence(int firstNumber, int lastNumber)\n    {\n        for (int number = firstNumber; number &lt;= lastNumber; number++)\n        {\n            if (number % 2 == 0)\n            {\n                yield return number;\n            }\n        }\n    }\n}\n</code></pre></p> <p>In diesem Beispiel erzeugt die Methode <code>EvenSequence</code> eine Sequenz von geraden Zahlen zwischen <code>firstNumber</code> und <code>lastNumber</code>. Nur die Zahlen, die durch 2 teilbar sind (d.h. gerade Zahlen), werden zur\u00fcckgegeben. Der <code>foreach</code>-Loop in der <code>Main</code>-Methode gibt diese Zahlen aus.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Iteratoren/Iteratoren%20Klassen/","title":"Iteratoren Klassen","text":"<p>Eine aufz\u00e4hlbare Klasse in C# implementiert das <code>IEnumerable</code>-Interface, um benutzerdefinierte Iterationen \u00fcber ihre Elemente zu erm\u00f6glichen. Im folgenden Beispiel zeigen wir, wie man eine einfache aufz\u00e4hlbare Klasse erstellt und verwendet.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Iteratoren/Iteratoren%20Klassen/#beispiel-aufzahlbare-klasse-cpeople","title":"Beispiel: Aufz\u00e4hlbare Klasse <code>CPeople</code>","text":"<p>Wir definieren zun\u00e4chst die Klasse <code>CPerson</code>, die einfache Gesch\u00e4ftsinformationen enth\u00e4lt. Dann erstellen wir die Klasse <code>CPeople</code>, die eine Sammlung von <code>CPerson</code>-Objekten verwaltet und das <code>IEnumerable&lt;CPerson&gt;</code>-Interface implementiert, um die Verwendung der <code>foreach</code>-Schleife zu erm\u00f6glichen.</p> <p>[!example] <pre><code>using System;\nusing System.Collections;\nusing System.Collections.Generic;\n\n// Definiert eine einfache Gesch\u00e4ftsklasse f\u00fcr Personen\npublic class CPerson\n{\n    public CPerson(string fName, string lName)\n    {\n        FirstName = fName;\n        LastName = lName;\n    }\n\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n}\n\n// Definiert eine aufz\u00e4hlbare Klasse f\u00fcr eine Sammlung von Personen\npublic class CPeople : IEnumerable&lt;CPerson&gt;\n{\n    private CPerson[] people;\n\n    public CPeople(CPerson[] pArray)\n    {\n        people = new CPerson[pArray.Length];\n        for (int i = 0; i &lt; pArray.Length; i++)\n        {\n            people[i] = pArray[i];\n        }\n    }\n\n    // Implementiert die GetEnumerator-Methode f\u00fcr IEnumerable&lt;CPerson&gt;\n    public IEnumerator&lt;CPerson&gt; GetEnumerator()\n    {\n        for (int i = 0; i &lt; people.Length; i++)\n        {\n            yield return people[i];\n        }\n    }\n\n    // Implementiert die nicht-generische GetEnumerator-Methode f\u00fcr IEnumerable\n    IEnumerator IEnumerable.GetEnumerator()\n    {\n        return GetEnumerator();\n    }\n}\n\nclass App\n{\n    static void Main()\n    {\n        CPerson[] peopleArray = new CPerson[3]\n        {\n            new CPerson(\"John\", \"Smith\"),\n            new CPerson(\"Jim\", \"Johnson\"),\n            new CPerson(\"Sue\", \"Rabon\")\n        };\n\n        CPeople peopleList = new CPeople(peopleArray);\n        foreach (CPerson p in peopleList)\n        {\n            Console.WriteLine(p.FirstName + \" \" + p.LastName);\n        }\n        // Output:\n        // John Smith\n        // Jim Johnson\n        // Sue Rabon\n    }\n}\n</code></pre></p> <p>In diesem Beispiel:</p> <ol> <li>Klasse <code>CPerson</code>: Definiert eine einfache Person mit Vor- und Nachnamen.</li> <li>Klasse <code>CPeople</code>: Enth\u00e4lt ein Array von <code>CPerson</code>-Objekten und implementiert das <code>IEnumerable&lt;CPerson&gt;</code>-Interface, um die Iteration \u00fcber die Personen zu erm\u00f6glichen.</li> <li>Methode <code>GetEnumerator</code>: Gibt einen Iterator zur\u00fcck, der es erm\u00f6glicht, die <code>CPerson</code>-Objekte in der Sammlung zu durchlaufen.</li> <li><code>Main</code>-Methode: Erstellt ein Array von <code>CPerson</code>-Objekten, initialisiert eine <code>CPeople</code>-Sammlung und durchl\u00e4uft diese mit einer <code>foreach</code>-Schleife, um die Namen der Personen auszugeben.</li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Klausur%20Aufgaben/1.%20Klausur/","title":"1. Klausur","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Klausur%20Aufgaben/1.%20Klausur/#1-klassen-methoden-objekte","title":"1. Klassen, Methoden, Objekte","text":"<ul> <li>Was ist der Unterschied zwischen einer Klasse und einem Objekt? </li> </ul> <p>[!example]- L\u00f6sung Eine Klasse ist nicht initialisiert und kann im laufenden Betrieb nicht einfach so verwendet werden. (Statische Klassen schon) Um Methoden einer Klasse benutzen zu k\u00f6nnen, muss ein Objekt dieser Klasse erstellt werden. Eine Klasse ist ein Bauplan das beschreibt wie das Objekt auszusehen hat.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Klausur%20Aufgaben/1.%20Klausur/#-wie-definierst-du-eine-methode-in-c-und-wie-unterscheidet-sich-eine-statische-von-einer-instanzmethode","title":"- Wie definierst du eine Methode in C# und wie unterscheidet sich eine statische von einer Instanzmethode?","text":"<p>[!example]- L\u00f6sung</p> <ul> <li>Was ist das Schl\u00fcsselwort <code>this</code> in einer Klasse und wann wird es verwendet? <p>[!example]- L\u00f6sung Ich habe folgende Klasse: int number = 0; private void Methode(int number) { number = number; } Wenn ich diese Methode so implementiere Funktioniert sie nicht wie ich m\u00f6chte, da ich zwei Variablen habe, welche Gleich hei\u00dfen.  int number = 0; private void Methode(int number) { this. number = number; } mit this kann ich definieren, das ein Feld von der Klasse genommen wird, und nicht die Variable innerhalb der Methode</p> </li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Klausur%20Aufgaben/1.%20Klausur/#beispiel","title":"Beispiel","text":"<p>public static int Methode() {} Eine Statische Methode kann ohne vorher erstellte Objekt aufgerufen werden Um eine nicht statische Methode aufrufen zu k\u00f6nnen, muss zuerst das Objekt der Klasse, in welcher sie sich befindet, aufgerufen werden. </p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Klausur%20Aufgaben/1.%20Klausur/#2-konstruktoren","title":"2. Konstruktoren","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Klausur%20Aufgaben/1.%20Klausur/#-was-ist-ein-konstruktor-und-wie-unterscheidet-er-sich-von-einer-normalen-methode","title":"- Was ist ein Konstruktor und wie unterscheidet er sich von einer normalen Methode?","text":"<p>[!example]- L\u00f6sung Ein Konstruktor wird immer dann aufgerufen, wenn eine Klasse initilaisiert wird. Er hat keinen R\u00fcckgabewert und kann auch sonst nicht aufgerufen werden. Er ist daf\u00fcr gedacht, das bestimmte Felder vor dem ausf\u00fchren der Methoden innerhalb der Klasse gesetzt werden, oder eine Logik initial ausgef\u00fchrt werden kann. </p> <ul> <li>Kann eine Klasse mehr als einen Konstruktor haben? Wenn ja, wie wird das erreicht? </li> </ul> <p>[!example]- L\u00f6sung Eine Klasse kann mehrere Konstruktoren erreichen. Dies kann erreicht werden in dem sie \u00fcberladen werden. Also jeweils unterschiedliche Parameter ben\u00f6tigen</p> <ul> <li>Was ist ein Standardkonstruktor und wann wird er automatisch bereitgestellt? </li> </ul> <p>[!example]- L\u00f6sung Sollte kein eigen erstellter Konstruktor innerhalb der Klasse definiert sein, wird automatisch ein parameterloser Konstruktor erstellt. Dieser ist nicht direkt sichtbar innerhalb des Codes. </p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Klausur%20Aufgaben/1.%20Klausur/#3-vererbung-polymorphie","title":"3. Vererbung, Polymorphie","text":"<ul> <li>Was ist Vererbung und wie implementierst du sie in C#? </li> </ul> <p>[!example]- L\u00f6sung Vererbung in C# ist ein Mechanismus, bei dem eine Klasse (die abgeleitete Klasse) die Eigenschaften und Methoden einer anderen Klasse (der Basisklasse) erbt. Dadurch kann die abgeleitete Klasse die Funktionen der Basisklasse nutzen, ohne sie erneut implementieren zu m\u00fcssen. Au\u00dferdem kann sie eigene zus\u00e4tzliche Methoden und Eigenschaften hinzuf\u00fcgen oder bestehende Methoden \u00fcberschreiben.</p> <ul> <li> <p>Wie verh\u00e4lt sich Polymorphie in C# und welche Rolle spielt das <code>virtual</code> und <code>override</code> Schl\u00fcsselwort?   ???  </p> </li> <li> <p>Was ist der Unterschied zwischen einer abstrakten Klasse und einem Interface?   ???</p> </li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Klausur%20Aufgaben/1.%20Klausur/#4-destruktoren-operatoren","title":"4. Destruktoren, Operatoren","text":"<ul> <li> <p>Was ist ein Destruktor in C# und wann wird er verwendet?   ???  </p> </li> <li> <p>Wie kannst du benutzerdefinierte Operatoren in C# \u00fcberladen?   ???  </p> </li> <li> <p>Wie \u00fcberl\u00e4dst du den <code>+</code>-Operator f\u00fcr eine Klasse?   ???</p> </li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Klausur%20Aufgaben/1.%20Klausur/#5-interfaces","title":"5. Interfaces","text":"<ul> <li> <p>Was ist ein Interface in C# und wie unterscheidet es sich von einer abstrakten Klasse?   ???  </p> </li> <li> <p>Kann eine Klasse mehrere Interfaces implementieren? Wie?   ???  </p> </li> <li> <p>Warum sind Interfaces n\u00fctzlich f\u00fcr die Entwicklung flexibler Software?   ???</p> </li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Klausur%20Aufgaben/1.%20Klausur/#6-generik","title":"6. Generik","text":"<ul> <li> <p>Was ist Generik in C# und warum wird sie verwendet?   ???  </p> </li> <li> <p>Wie definierst du eine generische Klasse?   ???  </p> </li> <li> <p>Was ist der Vorteil von generischen Containern im Vergleich zu nicht-generischen Containern?   ???</p> </li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Klausur%20Aufgaben/1.%20Klausur/#7-exceptions","title":"7. Exceptions","text":"<ul> <li> <p>Was ist eine Exception in C# und wie gehst du mit ihr um?   ???  </p> </li> <li> <p>Was ist der Unterschied zwischen <code>throw</code> und <code>throw ex</code> in einem <code>catch</code>-Block?   ???  </p> </li> <li> <p>Wie erstellst du eine benutzerdefinierte Exception?   ???</p> </li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Klausur%20Aufgaben/1.%20Klausur/#8-iteratoren","title":"8. Iteratoren","text":"<ul> <li> <p>Was ist ein Iterator und wie implementierst du ihn in einer Klasse?   ???  </p> </li> <li> <p>Wie funktioniert das <code>yield return</code>-Schl\u00fcsselwort?   ???  </p> </li> <li> <p>Was ist der Vorteil eines Iterators gegen\u00fcber einer normalen R\u00fcckgabe von Collections?   ???</p> </li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Klausur%20Aufgaben/1.%20Klausur/#9-collections","title":"9. Collections","text":"<ul> <li> <p>Was sind die wichtigsten Unterschiede zwischen Arrays und Listen in C#?   ???  </p> </li> <li> <p>Welche Collection-Klassen unterst\u00fctzt das .NET-Framework, und wann w\u00fcrdest du welche verwenden?   ???  </p> </li> <li> <p>Wie funktioniert die Klasse <code>Dictionary&lt;TKey, TValue&gt;</code> und wann w\u00fcrdest du sie verwenden?   ???</p> </li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Klausur%20Aufgaben/1.%20Klausur/#10-generische-container","title":"10. Generische Container","text":"<ul> <li> <p>Wie implementierst du eine generische Liste in C#?   ???  </p> </li> <li> <p>Was ist der Unterschied zwischen <code>List&lt;T&gt;</code> und <code>ArrayList</code>?   ???  </p> </li> <li> <p>Erkl\u00e4re den Begriff \u201eTyp-Sicherheit\u201c im Kontext von generischen Containern.   ???</p> </li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Klausur%20Aufgaben/2.%20Klausur/","title":"2. Klausur","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Klausur%20Aufgaben/2.%20Klausur/#task-1-classes-and-inheritance","title":"Task 1: Classes and Inheritance","text":"<p>Create a base class <code>Shape</code> with a method <code>CalculateArea()</code> and an abstract method <code>DisplayInfo()</code>. Then, create three derived classes <code>Circle</code>, <code>Rectangle</code>, and <code>Triangle</code>. Each derived class should override <code>CalculateArea()</code> to compute the area and implement <code>DisplayInfo()</code> to print information about the shape. Use these classes in a program that processes an array of shapes and prints their areas and info.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Klausur%20Aufgaben/2.%20Klausur/#task-2-polymorphism-and-interfaces","title":"Task 2: Polymorphism and Interfaces","text":"<p>Design an interface <code>IDisplayable</code> with a method <code>Display()</code>. Implement this interface in a <code>Book</code> class and a <code>Movie</code> class, each having properties like <code>Title</code>, <code>Year</code>, and a custom <code>Display()</code> method. Then, create a list of <code>IDisplayable</code> items that can contain both <code>Book</code> and <code>Movie</code> objects, and iterate through this list, calling <code>Display()</code> on each item.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Klausur%20Aufgaben/2.%20Klausur/#task-3-collections-and-generics","title":"Task 3: Collections and Generics","text":"<p>Write a generic class <code>Cache&lt;T&gt;</code> that can store a set of key-value pairs. It should have methods <code>AddItem(T key, T value)</code>, <code>RemoveItem(T key)</code>, and <code>GetItem(T key)</code>. Then, write a program that uses this class to store and retrieve values of different data types (e.g., strings, integers).</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Klausur%20Aufgaben/2.%20Klausur/#task-4-exception-handling","title":"Task 4: Exception Handling","text":"<p>Create a method <code>DivideNumbers(int a, int b)</code> that takes two integers and returns their division. Implement proper exception handling to catch <code>DivideByZeroException</code> and <code>FormatException</code>. Additionally, create a custom exception <code>InvalidNumberException</code> that is thrown when negative numbers are passed as input.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Klausur%20Aufgaben/2.%20Klausur/#task-5-iterator","title":"Task 5: Iterator","text":"<p>Implement an iterator for a class <code>FibonacciSequence</code> that generates the first <code>n</code> numbers in the Fibonacci sequence. The class should implement <code>IEnumerable&lt;int&gt;</code> and allow iteration using a <code>foreach</code> loop.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Klausur%20Aufgaben/2.%20Klausur/#task-6-operator-overloading","title":"Task 6: Operator Overloading","text":"<p>Create a <code>ComplexNumber</code> class to represent complex numbers (with real and imaginary parts). Overload the <code>+</code>, <code>-</code>, <code>*</code>, and <code>/</code> operators to perform addition, subtraction, multiplication, and division of complex numbers.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Klausur%20Aufgaben/Prompt/","title":"Prompt","text":"<p>Hey, ich bereite mich aktuell auf meine Programmieren Klausur vor und ben\u00f6tige Fragen dazu. Folgende Themen Kommen dran. Die Sprache ist C#:</p> <p>Klassen, Methoden, Objekte Construcotr Vererbung, Polymorphie Destruktoren, Operatoren Interfaces Generik Exceptions Iteratoren Collections</p> <p>Es sollen Generische container auf jeden Fall dran kommen </p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Boxing%20und%20Unboxing/","title":"Boxing und Unboxing","text":"<p>In C# gibt es zwei wichtige Konzepte, die es erm\u00f6glichen, Werte von Werttypen in Referenztypen und umgekehrt zu konvertieren: Boxing und Unboxing.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Boxing%20und%20Unboxing/#was-ist-boxing","title":"Was ist Boxing?","text":"<p>Boxing ist der Prozess, bei dem ein Werttyp (z.B. <code>int</code>, <code>double</code>, <code>struct</code>) in ein Objekt vom Typ <code>object</code> oder einen anderen Referenztyp konvertiert wird. Dabei wird der Wert des Werttyps in eine Instanz eines Referenztyps verpackt (oder \"boxed\").</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Boxing%20und%20Unboxing/#beispiel-fur-boxing","title":"Beispiel f\u00fcr Boxing:","text":"<p><pre><code>int number = 123;\nobject boxedNumber = number; // Boxing\n</code></pre> In diesem Beispiel wird der <code>int</code>-Wert <code>number</code> in ein <code>object</code> konvertiert. Der Wert wird in einer neuen Speicherstelle gespeichert, die als Referenztyp behandelt wird.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Boxing%20und%20Unboxing/#internes-verhalten-von-boxing","title":"Internes Verhalten von Boxing:","text":"<ol> <li>Es wird ein Objekt auf dem Heap erstellt.</li> <li>Der Wert des Werttyps wird in das neu erstellte Objekt kopiert.</li> <li>Eine Referenz auf dieses Objekt wird zur\u00fcckgegeben.</li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Boxing%20und%20Unboxing/#was-ist-unboxing","title":"Was ist Unboxing?","text":"<p>Unboxing ist der Prozess, bei dem ein Objekt, das zuvor \"geboxt\" wurde, zur\u00fcck in einen Werttyp konvertiert wird. Dabei wird der Wert aus dem Referenztyp extrahiert und in eine Variable des Werttyps zur\u00fcckkopiert.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Boxing%20und%20Unboxing/#beispiel-fur-unboxing","title":"Beispiel f\u00fcr Unboxing:","text":"<p><pre><code>object boxedNumber = 123; // Boxing\nint number = (int)boxedNumber; // Unboxing\n</code></pre> In diesem Beispiel wird das <code>object</code> <code>boxedNumber</code>, das einen <code>int</code>-Wert enth\u00e4lt, zur\u00fcck in einen <code>int</code> konvertiert.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Boxing%20und%20Unboxing/#internes-verhalten-von-unboxing","title":"Internes Verhalten von Unboxing:","text":"<ol> <li>Die Referenz wird \u00fcberpr\u00fcft, um sicherzustellen, dass sie auf den korrekten Werttyp zeigt.</li> <li>Der Wert wird aus dem Objekt auf dem Heap extrahiert.</li> <li>Der Wert wird in die Zielvariable des Werttyps kopiert.</li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Boxing%20und%20Unboxing/#wichtige-punkte-zu-boxing-und-unboxing","title":"Wichtige Punkte zu Boxing und Unboxing","text":"<ul> <li>Leistungs\u00fcberlegungen: Boxing und Unboxing sind kostspielige Operationen, da sie Speicheroperationen auf dem Heap und zus\u00e4tzliche Arbeit des Garbage Collectors erfordern. Daher sollte \u00fcberm\u00e4\u00dfiges Boxing und Unboxing vermieden werden, insbesondere in performancekritischen Anwendungen.</li> <li>Typkonvertierungsfehler: Beim Unboxing muss sichergestellt werden, dass das <code>object</code> tats\u00e4chlich den Werttyp enth\u00e4lt, auf den es konvertiert werden soll. Andernfalls wird eine <code>InvalidCastException</code> ausgel\u00f6st.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Boxing%20und%20Unboxing/#beispiel-mit-typkonvertierungsfehler","title":"Beispiel mit Typkonvertierungsfehler:","text":"<pre><code>object boxedNumber = 123;\ntry\n{\n    double number = (double)boxedNumber; // Falscher Typ, l\u00f6st InvalidCastException aus\n}\ncatch (InvalidCastException ex)\n{\n    Console.WriteLine(\"Unboxing fehlgeschlagen: \" + ex.Message);\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Boxing%20und%20Unboxing/#beispiele-fur-den-praktischen-einsatz","title":"Beispiele f\u00fcr den praktischen Einsatz","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Boxing%20und%20Unboxing/#einsatz-in-einer-liste","title":"Einsatz in einer Liste:","text":"<pre><code>ArrayList list = new ArrayList();\nlist.Add(123); // Boxing\nint number = (int)list[0]; // Unboxing\n</code></pre> <p>In diesem Beispiel wird ein <code>int</code>-Wert in eine <code>ArrayList</code> eingef\u00fcgt, was Boxing erfordert, da <code>ArrayList</code> Objekte vom Typ <code>object</code> speichert. Beim Abrufen des Werts aus der Liste wird Unboxing durchgef\u00fchrt.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Boxing%20und%20Unboxing/#einsatz-in-einer-generischen-liste","title":"Einsatz in einer generischen Liste:","text":"<pre><code>List&lt;int&gt; list = new List&lt;int&gt;();\nlist.Add(123); // Kein Boxing\nint number = list[0]; // Kein Unboxing\n</code></pre> <p>Durch die Verwendung einer generischen Liste (<code>List&lt;T&gt;</code>) wird Boxing und Unboxing vermieden, da die Liste speziell f\u00fcr den Werttyp <code>int</code> typisiert ist.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Boxing%20und%20Unboxing/#methoden","title":"Methoden","text":"<p>Wenn es um Methoden geht, k\u00f6nnen Boxing und Unboxing auftreten, wenn Werttypen als Parameter \u00fcbergeben oder von Methoden zur\u00fcckgegeben werden, die Referenztypen (wie <code>object</code>) erwarten oder liefern. Dies kann insbesondere bei nicht-generischen Sammlungen oder Methoden, die mit <code>object</code> arbeiten, vorkommen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Boxing%20und%20Unboxing/#methodenparameter-und-boxingunboxing","title":"Methodenparameter und Boxing/Unboxing","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Boxing%20und%20Unboxing/#beispiel-1-methoden-mit-object-parametern","title":"Beispiel 1: Methoden mit <code>object</code>-Parametern","text":"<p>Wenn eine Methode einen Parameter vom Typ <code>object</code> hat und ein Werttyp als Argument \u00fcbergeben wird, tritt Boxing auf. <pre><code>public void DisplayObject(object obj)\n{\n    Console.WriteLine(obj);\n}\n\npublic void Example()\n{\n    int number = 123;\n    DisplayObject(number); // Boxing tritt hier auf\n}\n</code></pre> In diesem Beispiel wird der <code>int</code>-Wert <code>number</code> boxed, um ihn als <code>object</code> an die <code>DisplayObject</code>-Methode zu \u00fcbergeben.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Boxing%20und%20Unboxing/#beispiel-2-methoden-mit-ruckgabewerten-vom-typ-object","title":"Beispiel 2: Methoden mit R\u00fcckgabewerten vom Typ <code>object</code>","text":"<pre><code>public object GetBoxedNumber()\n{\n    int number = 123;\n    return number; // Boxing tritt hier auf\n}\n\npublic void Example()\n{\n    object boxedNumber = GetBoxedNumber();\n    int number = (int)boxedNumber; // Unboxing tritt hier auf\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Destruktoren/","title":"Destruktoren","text":"<p>In C# sind Destruktoren spezielle Methoden, die verwendet werden, um Ressourcen freizugeben und Aufr\u00e4umarbeiten durchzuf\u00fchren, bevor ein Objekt endg\u00fcltig aus dem Speicher entfernt wird. Destruktoren werden automatisch aufgerufen, wenn das Garbage Collection-System feststellt, dass ein Objekt nicht mehr verwendet wird.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Destruktoren/#eigenschaften-von-destruktoren","title":"Eigenschaften von Destruktoren","text":"<ul> <li>Destruktoren haben den gleichen Namen wie die Klasse, der sie angeh\u00f6ren, jedoch mit einem Tilde-Pr\u00e4fix (<code>~</code>).</li> <li>Sie haben keine Parameter und keinen R\u00fcckgabewert.</li> <li>Sie k\u00f6nnen nicht \u00fcberladen werden.</li> <li>Sie k\u00f6nnen nicht direkt aufgerufen werden. Sie werden vom Garbage Collector automatisch aufgerufen.</li> <li>Eine Klasse kann nur einen Destruktor haben.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Destruktoren/#syntax-eines-destruktors","title":"Syntax eines Destruktors","text":"<p>Die Syntax eines Destruktors ist einfach: <pre><code>public class ClassName\n{\n    // Destruktor\n    ~ClassName()\n    {\n        // Aufr\u00e4umarbeiten durchf\u00fchren\n    }\n}\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Destruktoren/#beispiel","title":"Beispiel","text":"<p>Hier ist ein Beispiel, das zeigt, wie ein Destruktor in einer Klasse verwendet werden kann: <pre><code>public class FileManager\n{\n    private string fileName;\n\n    public FileManager(string fileName)\n    {\n        this.fileName = fileName;\n        // Datei \u00f6ffnen oder andere Initialisierungsaufgaben\n        Console.WriteLine($\"Datei {fileName} ge\u00f6ffnet.\");\n    }\n\n    // Destruktor\n    ~FileManager()\n    {\n        // Datei schlie\u00dfen oder andere Aufr\u00e4umarbeiten\n        Console.WriteLine($\"Datei {fileName} geschlossen.\");\n    }\n}\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Destruktoren/#verwendung-des-filemanager","title":"Verwendung des <code>FileManager</code>","text":"<pre><code>class Program\n{\n    static void Main(string[] args)\n    {\n        FileManager manager = new FileManager(\"example.txt\");\n\n        // Hier w\u00fcrde die Datei \"example.txt\" ge\u00f6ffnet sein\n\n        // Das Ende des G\u00fcltigkeitsbereichs von `manager` wird erreicht\n        // Der Destruktor wird automatisch aufgerufen, wenn der Garbage Collector das Objekt `manager` entfernt\n    }\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Destruktoren/#wichtige-hinweise-zu-destruktoren","title":"Wichtige Hinweise zu Destruktoren","text":"<ul> <li>In modernen C#-Programmen, insbesondere bei der Verwendung von .NET Framework und .NET Core, sollten Destruktoren selten verwendet werden. Stattdessen wird empfohlen, die <code>IDisposable</code>-Schnittstelle zu implementieren und die <code>Dispose</code>-Methode zu verwenden, um Ressourcen explizit freizugeben.</li> <li>Destruktoren k\u00f6nnen die Garbage Collection verlangsamen, da der Garbage Collector zwei Durchl\u00e4ufe ben\u00f6tigt, um Objekte mit Destruktoren zu entfernen: einen, um den Destruktor aufzurufen, und einen zweiten, um das Objekt tats\u00e4chlich zu entfernen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Destruktoren/#beispiel-mit-idisposable","title":"Beispiel mit <code>IDisposable</code>","text":"<p>Statt Destruktoren zu verwenden, implementiert man besser die <code>IDisposable</code>-Schnittstelle: <pre><code>public class FileManager : IDisposable\n{\n    private string fileName;\n    private bool disposed = false;\n\n    public FileManager(string fileName)\n    {\n        this.fileName = fileName;\n        // Datei \u00f6ffnen oder andere Initialisierungsaufgaben\n        Console.WriteLine($\"Datei {fileName} ge\u00f6ffnet.\");\n    }\n\n    public void Dispose()\n    {\n        Dispose(true);\n        GC.SuppressFinalize(this);\n    }\n\n    protected virtual void Dispose(bool disposing)\n    {\n        if (!disposed)\n        {\n            if (disposing)\n            {\n                // Freigabe von verwalteten Ressourcen\n            }\n\n            // Freigabe von nicht verwalteten Ressourcen\n            Console.WriteLine($\"Datei {fileName} geschlossen.\");\n            disposed = true;\n        }\n    }\n\n    // Destruktor\n    ~FileManager()\n    {\n        Dispose(false);\n    }\n}\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Destruktoren/#verwendung-des-filemanager-mit-idisposable","title":"Verwendung des <code>FileManager</code> mit <code>IDisposable</code>","text":"<pre><code>class Program\n{\n    static void Main(string[] args)\n    {\n        using (FileManager manager = new FileManager(\"example.txt\"))\n        {\n            // Hier w\u00fcrde die Datei \"example.txt\" ge\u00f6ffnet sein\n        }\n        // Datei wird automatisch geschlossen, wenn `Dispose` am Ende des using-Blocks aufgerufen wird\n    }\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Indexer%C3%BCberladung/","title":"Indexer\u00fcberladung","text":"<p>In C# erm\u00f6glichen Indexer einer Klasse oder Struktur, wie Arrays zu funktionieren. Sie erm\u00f6glichen den Zugriff auf die Elemente der Klasse oder Struktur \u00fcber Indizes, \u00e4hnlich wie bei einem Array. Ein Indexer wird wie eine Eigenschaft definiert, jedoch mit <code>this</code> anstelle eines Eigenschaftennamens und einem Parameter.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Indexer%C3%BCberladung/#syntax-eines-indexers","title":"Syntax eines Indexers","text":"<p>Ein Indexer wird mit dem Schl\u00fcsselwort <code>this</code> definiert, gefolgt von einem Parameter in eckigen Klammern. Der R\u00fcckgabewert und der Parameter des Indexers bestimmen den Typ der Daten, auf die zugegriffen wird.</p> <pre><code>public class ClassName\n{\n    private int[] array = new int[100]; // Beispiel-Array\n\n    // Indexer-Definition\n    public int this[int index]\n    {\n        get { return array[index]; }\n        set { array[index] = value; }\n    }\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Indexer%C3%BCberladung/#beispiel-einfache-indexeruberladung","title":"Beispiel: Einfache Indexer\u00fcberladung","text":"<p>Angenommen, wir haben eine Klasse <code>SampleCollection</code>, die einen Indexer \u00fcberl\u00e4dt, um auf ihre Elemente zuzugreifen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Indexer%C3%BCberladung/#definition-der-klasse-samplecollection","title":"Definition der Klasse <code>SampleCollection</code>","text":"<pre><code>public class SampleCollection&lt;T&gt;\n{\n    private T[] array = new T[100];\n\n    // Indexer-Definition\n    public T this[int index]\n    {\n        get\n        {\n            if (index &lt; 0 || index &gt;= array.Length)\n            {\n                throw new IndexOutOfRangeException(\"Index out of range\");\n            }\n            return array[index];\n        }\n        set\n        {\n            if (index &lt; 0 || index &gt;= array.Length)\n            {\n                throw new IndexOutOfRangeException(\"Index out of range\");\n            }\n            array[index] = value;\n        }\n    }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        SampleCollection&lt;string&gt; collection = new SampleCollection&lt;string&gt;();\n        collection[0] = \"Hello\";\n        collection[1] = \"World\";\n\n        Console.WriteLine(collection[0]); // Ausgabe: Hello\n        Console.WriteLine(collection[1]); // Ausgabe: World\n    }\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Indexer%C3%BCberladung/#mehrdimensionale-indexer","title":"Mehrdimensionale Indexer","text":"<p>Ein Indexer kann auch mehrdimensional sein, indem mehrere Parameter verwendet werden.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Indexer%C3%BCberladung/#beispiel-mehrdimensionaler-indexer","title":"Beispiel: Mehrdimensionaler Indexer","text":"<pre><code>public class Matrix\n{\n    private int[,] array = new int[10, 10];\n\n    // Mehrdimensionaler Indexer\n    public int this[int row, int column]\n    {\n        get\n        {\n            if (row &lt; 0 || row &gt;= array.GetLength(0) || column &lt; 0 || column &gt;= array.GetLength(1))\n            {\n                throw new IndexOutOfRangeException(\"Index out of range\");\n            }\n            return array[row, column];\n        }\n        set\n        {\n            if (row &lt; 0 || row &gt;= array.GetLength(0) || column &lt; 0 || column &gt;= array.GetLength(1))\n            {\n                throw new IndexOutOfRangeException(\"Index out of range\");\n            }\n            array[row, column] = value;\n        }\n    }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Matrix matrix = new Matrix();\n        matrix[0, 0] = 1;\n        matrix[1, 1] = 2;\n\n        Console.WriteLine(matrix[0, 0]); // Ausgabe: 1\n        Console.WriteLine(matrix[1, 1]); // Ausgabe: 2\n    }\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Indexer%C3%BCberladung/#einschrankungen-und-best-practices","title":"Einschr\u00e4nkungen und Best Practices","text":"<ul> <li>Sichtbarkeit: Indexer k\u00f6nnen Sichtbarkeitsmodifizierer (wie <code>public</code>, <code>private</code>, <code>protected</code> usw.) haben, um den Zugriff zu steuern.</li> <li>R\u00fcckgabewert und Parameter: Der R\u00fcckgabewert und die Parameter eines Indexers k\u00f6nnen beliebige Typen sein. Die Parameter m\u00fcssen nicht auf int beschr\u00e4nkt sein.</li> <li>Fehlerbehandlung: Es ist wichtig, geeignete Fehlerbehandlungen (wie das Werfen von Ausnahmen) in den Indexern zu implementieren, um ung\u00fcltige Zugriffe zu verhindern.</li> <li>Konsistenz: Indexer sollten konsistent und intuitiv implementiert werden, um die erwartete Funktionalit\u00e4t und Benutzerfreundlichkeit zu gew\u00e4hrleisten.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Interface%20vs%20Abstrakte%20Klassen/","title":"Interface vs Abstrakte Klassen","text":"<p>In C# werden sowohl Interfaces als auch abstrakte Klassen verwendet, um die Struktur und das Verhalten von Klassen zu definieren. Hier sind die wesentlichen Unterschiede und Anwendungsf\u00e4lle:</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Interface%20vs%20Abstrakte%20Klassen/#interfaces","title":"Interfaces","text":"<p>[!info] Ein Interface ist eine Sammlung von Methodensignaturen, die von einer Klasse implementiert werden m\u00fcssen. Interfaces enthalten keine Implementierung, sondern nur die Definition von Methoden, Eigenschaften, Ereignissen oder Indexern.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Interface%20vs%20Abstrakte%20Klassen/#merkmale","title":"Merkmale","text":"<ul> <li>Mehrfachvererbung: Eine Klasse kann mehrere Interfaces implementieren.</li> <li>Zugriffsmodifizierer: Alle Mitglieder eines Interfaces sind standardm\u00e4\u00dfig <code>public</code>.</li> <li>Eigenschaften und Ereignisse: Interfaces k\u00f6nnen Eigenschaften, Methoden, Ereignisse und Indexer deklarieren.</li> <li>Standardmethoden (ab C# 8.0): Interfaces k\u00f6nnen Standardimplementierungen f\u00fcr Methoden enthalten.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Interface%20vs%20Abstrakte%20Klassen/#beispiel","title":"Beispiel","text":"<p>[!example]- Beispiel f\u00fcr ein Interface: <pre><code> public interface IAnimal\n {\n     void Eat();\n     void Sleep();\n }\n \n public class Dog : IAnimal\n {\n     public void Eat()\n     {\n         // Implementierung\n     }\n \n     public void Sleep()\n     {\n         // Implementierung\n     }\n }\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Interface%20vs%20Abstrakte%20Klassen/#abstrakte-klassen","title":"Abstrakte Klassen","text":"<p>[!info] Eine abstrakte Klasse ist eine Klasse, die nicht direkt instanziiert werden kann und dazu dient, andere Klassen zu definieren. Sie kann sowohl abstrakte Methoden (Methoden ohne Implementierung) als auch nicht-abstrakte Methoden (Methoden mit Implementierung) enthalten.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Interface%20vs%20Abstrakte%20Klassen/#merkmale_1","title":"Merkmale","text":"<ul> <li>Teilweise Implementierung: Abstrakte Klassen k\u00f6nnen sowohl abstrakte als auch nicht-abstrakte Methoden enthalten.</li> <li>Vererbung: Eine Klasse kann nur von einer abstrakten Klasse erben.</li> <li>Zugriffsmodifizierer: Mitglieder einer abstrakten Klasse k\u00f6nnen unterschiedliche Zugriffsmodifizierer haben (<code>public</code>, <code>protected</code>, <code>private</code>).</li> <li>Konstruktoren: Abstrakte Klassen k\u00f6nnen Konstruktoren haben.</li> <li>Zustand: Abstrakte Klassen k\u00f6nnen Felder und Eigenschaften mit Zustand definieren.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Interface%20vs%20Abstrakte%20Klassen/#beispiel_1","title":"Beispiel","text":"<p>[!example]- Beispiel f\u00fcr eine abstrakte Klasse: <pre><code> public abstract class Animal\n{\n    public abstract void Eat();\n\n    public void Sleep()\n    {\n        // Implementierung\n    }\n}\n\npublic class Dog : Animal\n{\n    public override void Eat()\n    {\n        // Implementierung\n    }\n}\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Interface%20vs%20Abstrakte%20Klassen/#vergleich","title":"Vergleich","text":"Feature Interface Abstrakte Klasse Methoden Keine Implementierung Kann Implementierung enthalten Mehrfachvererbung Ja, mehrere Interfaces m\u00f6glich Nein, nur eine Basisklasse Konstruktoren Nein Ja Felder Nein Ja, kann Felder enthalten Zugriffsmodifizierer Alle Mitglieder sind <code>public</code> Verschiedene Modifizierer m\u00f6glich Eigenschaften Ja Ja Standardmethoden Ja, ab C# 8.0 Nein"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Interface%20vs%20Abstrakte%20Klassen/#wann-verwenden","title":"Wann verwenden?","text":"<ul> <li> <p>Interfaces: Ideal, wenn du eine bestimmte Funktionalit\u00e4t bereitstellen m\u00f6chtest, die von verschiedenen Klassen unabh\u00e4ngig implementiert werden soll. Sie sind n\u00fctzlich f\u00fcr die Definition von Vertr\u00e4gen oder APIs.</p> </li> <li> <p>Abstrakte Klassen: Besser geeignet, wenn du eine Basisstruktur mit gemeinsamen Implementierungen f\u00fcr mehrere Klassen bereitstellen m\u00f6chtest. Sie erm\u00f6glichen es dir, eine grundlegende Implementierung zu teilen und gleichzeitig spezifische Details zu vererben.</p> </li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Interfaces%20und%20abstrakte%20Klassen/","title":"Interfaces und abstrakte Klassen","text":"<p>In C# sind Interfaces und abstrakte Klassen zwei grundlegende Konzepte zur Implementierung von Polymorphismus und zur Definition von Vertr\u00e4gen f\u00fcr Klassen. Beide Konzepte erm\u00f6glichen es, gemeinsame Schnittstellen f\u00fcr verschiedene Klassen zu definieren, aber sie haben unterschiedliche Eigenschaften und Anwendungsbereiche.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Interfaces%20und%20abstrakte%20Klassen/#interfaces","title":"Interfaces","text":"<p>Ein Interface in C# ist eine reine Abstraktion, die nur die Signaturen von Methoden, Eigenschaften, Ereignissen oder Indexern definiert. Es enth\u00e4lt keine Implementierungen. Klassen oder Strukturen, die ein Interface implementieren, m\u00fcssen alle seine Mitglieder implementieren.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Interfaces%20und%20abstrakte%20Klassen/#eigenschaften-von-interfaces","title":"Eigenschaften von Interfaces","text":"<ul> <li>Abstraktion: Ein Interface enth\u00e4lt nur die Signaturen der Mitglieder (keine Implementierungen).</li> <li>Mehrfachvererbung: Eine Klasse oder Struktur kann mehrere Interfaces implementieren.</li> <li>Sichtbarkeit: Standardm\u00e4\u00dfig sind alle Mitglieder eines Interfaces \u00f6ffentlich.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Interfaces%20und%20abstrakte%20Klassen/#syntax","title":"Syntax","text":"<pre><code>public interface IExample\n{\n    void MethodA();\n    int PropertyB { get; set; }\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Interfaces%20und%20abstrakte%20Klassen/#beispiel","title":"Beispiel","text":"<pre><code>public interface IAnimal\n{\n    void MakeSound();\n    void Move();\n}\n\npublic class Dog : IAnimal\n{\n    public void MakeSound()\n    {\n        Console.WriteLine(\"Bark\");\n    }\n\n    public void Move()\n    {\n        Console.WriteLine(\"Run\");\n    }\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Interfaces%20und%20abstrakte%20Klassen/#abstrakte-klassen","title":"Abstrakte Klassen","text":"<p>Eine abstrakte Klasse in C# ist eine Klasse, die nicht instanziiert werden kann und eine teilweise Implementierung enthalten kann. Abstrakte Klassen k\u00f6nnen abstrakte Methoden (ohne Implementierung) und konkrete Methoden (mit Implementierung) enthalten.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Interfaces%20und%20abstrakte%20Klassen/#eigenschaften-von-abstrakten-klassen","title":"Eigenschaften von abstrakten Klassen","text":"<ul> <li>Teilweise Implementierung: Abstrakte Klassen k\u00f6nnen sowohl abstrakte als auch konkrete Mitglieder enthalten.</li> <li>Vererbung: Eine Klasse kann nur eine einzige abstrakte Klasse erben (Einfachvererbung), aber sie kann auch mehrere Interfaces implementieren.</li> <li>Konstruktoren: Abstrakte Klassen k\u00f6nnen Konstruktoren haben, um Basisklassen-Initialisierung durchzuf\u00fchren.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Interfaces%20und%20abstrakte%20Klassen/#syntax_1","title":"Syntax","text":"<pre><code>public abstract class ExampleBase\n{\n    public abstract void MethodA();\n    public void MethodB()\n    {\n        Console.WriteLine(\"MethodB implementation\");\n    }\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Interfaces%20und%20abstrakte%20Klassen/#beispiel_1","title":"Beispiel","text":"<pre><code>public abstract class Animal\n{\n    public abstract void MakeSound();\n    public void Move()\n    {\n        Console.WriteLine(\"Move in an abstract way\");\n    }\n}\n\npublic class Cat : Animal\n{\n    public override void MakeSound()\n    {\n        Console.WriteLine(\"Meow\");\n    }\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Interfaces%20und%20abstrakte%20Klassen/#verwendung","title":"Verwendung","text":"<pre><code>class Program\n{\n    static void Main(string[] args)\n    {\n        Animal myCat = new Cat();\n        myCat.MakeSound(); // Ausgabe: Meow\n        myCat.Move(); // Ausgabe: Move in an abstract way\n    }\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Interfaces%20und%20abstrakte%20Klassen/#unterschiede-zwischen-interfaces-und-abstrakten-klassen","title":"Unterschiede zwischen Interfaces und abstrakten Klassen","text":"<ul> <li>Implementierung: Interfaces enthalten keine Implementierungen, w\u00e4hrend abstrakte Klassen sowohl abstrakte als auch konkrete Implementierungen enthalten k\u00f6nnen.</li> <li>Vererbung: Eine Klasse kann mehrere Interfaces implementieren, aber nur eine abstrakte Klasse erben.</li> <li>Anwendungsbereich: Interfaces werden verwendet, um Vertr\u00e4ge zu definieren, die von beliebigen Klassen oder Strukturen implementiert werden k\u00f6nnen, w\u00e4hrend abstrakte Klassen verwendet werden, um eine gemeinsame Basis f\u00fcr verwandte Klassen bereitzustellen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Konstruktoren/","title":"Konstruktoren","text":"<p>In C# sind Konstruktoren spezielle Methoden, die verwendet werden, um Objekte einer Klasse zu initialisieren. Sie haben den gleichen Namen wie die Klasse und werden automatisch aufgerufen, wenn eine Instanz der Klasse erstellt wird. Konstruktoren spielen eine entscheidende Rolle bei der Zuweisung von Startwerten zu den Datenfeldern eines Objekts und bei der Ausf\u00fchrung anderer Initialisierungsvorg\u00e4nge.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Konstruktoren/#arten-von-konstruktoren","title":"Arten von Konstruktoren","text":"<p>Es gibt verschiedene Arten von Konstruktoren in C#:</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Konstruktoren/#1-standardkonstruktor-parameterloser-konstruktor","title":"1. Standardkonstruktor (Parameterloser Konstruktor)","text":"<p>Ein Standardkonstruktor hat keine Parameter und wird verwendet, um ein Objekt mit Standardwerten zu initialisieren. <pre><code>public class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n\n    // Standardkonstruktor\n    public Person()\n    {\n        Name = \"Unbekannt\";\n        Age = 0;\n    }\n}\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Konstruktoren/#2-parametrisierter-konstruktor","title":"2. Parametrisierter Konstruktor","text":"<p>Ein parametrisierter Konstruktor akzeptiert Argumente, die verwendet werden, um die Datenfelder des Objekts zu initialisieren.</p> <pre><code>public class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n\n    // Parametrisierter Konstruktor\n    public Person(string name, int age)\n    {\n        Name = name;\n        Age = age;\n    }\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Konstruktoren/#3-statischer-konstruktor","title":"3. Statischer Konstruktor","text":"<p>Ein statischer Konstruktor wird verwendet, um statische Daten der Klasse zu initialisieren oder eine bestimmte Aktion auszuf\u00fchren, die nur einmal erfolgen muss. Er hat keinen Zugriffsmodifizierer und keine Parameter.</p> <pre><code>public class Person\n{\n    public static int Population;\n\n    // Statischer Konstruktor\n    static Person()\n    {\n        Population = 0;\n    }\n\n    public Person()\n    {\n        Population++;\n    }\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Konstruktoren/#4-kopierkonstruktor","title":"4. Kopierkonstruktor","text":"<p>Ein Kopierkonstruktor erstellt ein neues Objekt als Kopie eines bestehenden Objekts.</p> <pre><code>public class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n\n    public Person(string name, int age)\n    {\n        Name = name;\n        Age = age;\n    }\n\n    // Kopierkonstruktor\n    public Person(Person existingPerson)\n    {\n        Name = existingPerson.Name;\n        Age = existingPerson.Age;\n    }\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Lokale%20Methoden/","title":"Lokale Methoden","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Lokale%20Methoden/#zweck","title":"Zweck","text":"<ul> <li> <p>Lokale Hilfsmethoden: Durch die Definition innerhalb einer Methode k\u00f6nnen Hilfsmethoden geschaffen werden, die nur lokal innerhalb dieser Methode ben\u00f6tigt werden. Diese lokalen Hilfsmethoden k\u00f6nnen spezielle Aufgaben \u00fcbernehmen, die nur in diesem Kontext sinnvoll sind.</p> </li> <li> <p>St\u00e4rkere Modularisierung: Die Aufteilung des Codes in kleinere, klar abgegrenzte Module erh\u00f6ht die Lesbarkeit und Wartbarkeit des Codes. Jede Methode kann klar abgegrenzte Aufgaben \u00fcbernehmen, was den gesamten Code strukturierter und verst\u00e4ndlicher macht.</p> </li> <li> <p>Mehrfacher Aufruf innerhalb der \u00e4u\u00dferen Methode: Hilfsmethoden, die innerhalb einer Methode definiert werden, k\u00f6nnen mehrfach aus der \u00e4u\u00dferen Methode heraus aufgerufen werden. Dies erm\u00f6glicht eine Wiederverwendung von Code innerhalb derselben Methode, ohne dass der Code global zug\u00e4nglich sein muss.</p> </li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Lokale%20Methoden/#beispiel","title":"Beispiel","text":"<pre><code>using System;\n\nclass CProgram {\n    void LiesZwei(out int z, out int n) {\n        int Lies(string name) {\n            Console.Write(name + \" = \");\n            return Convert.ToInt32(Console.ReadLine());\n        }\n\n        z = Lies(\"Erstes Argument\");\n        n = Lies(\"Zweites Argument\");\n    }\n\n    static void Main(string[] args) {\n        CProgram p = new CProgram();\n        int x, y;\n        p.LiesZwei(out x, out y);\n        Console.WriteLine(\"\\nx % y = \" + (x % y));\n    }\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Operator%C3%BCberladung/","title":"Operator\u00fcberladung","text":"<p>In C# erm\u00f6glicht die Operator\u00fcberladung, dass benutzerdefinierte Typen (wie Klassen und Strukturen) eigene Implementierungen f\u00fcr Standardoperatoren wie <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> usw. bereitstellen. Dies erlaubt es, diese Operatoren auf benutzerdefinierte Objekte in einer Weise anzuwenden, die deren Semantik entspricht.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Operator%C3%BCberladung/#grundlagen-der-operatoruberladung","title":"Grundlagen der Operator\u00fcberladung","text":"<ul> <li>Die Operator\u00fcberladung wird durch die Verwendung des <code>operator</code>-Schl\u00fcsselworts in Verbindung mit dem zu \u00fcberladenden Operator durchgef\u00fchrt.</li> <li>Eine \u00fcberladene Operator-Methode muss <code>public</code> und <code>static</code> sein.</li> <li>Die Parameter der Methode entsprechen den Operanden des Operators, und der R\u00fcckgabewert entspricht dem Ergebnis des Operators.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Operator%C3%BCberladung/#beispiel-uberladen-des-operators","title":"Beispiel: \u00dcberladen des <code>+</code> Operators","text":"<p>Angenommen, wir haben eine Klasse <code>Complex</code>, die komplexe Zahlen repr\u00e4sentiert, und wir m\u00f6chten den <code>+</code> Operator \u00fcberladen, um die Addition von zwei komplexen Zahlen zu erm\u00f6glichen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Operator%C3%BCberladung/#definition-der-klasse-complex","title":"Definition der Klasse <code>Complex</code>","text":"<pre><code>using System;\n\npublic class Complex\n{\n    public double Real { get; set; }\n    public double Imaginary { get; set; }\n\n    public Complex(double real, double imaginary)\n    {\n        Real = real;\n        Imaginary = imaginary;\n    }\n\n    // \u00dcberladen des + Operators\n    public static Complex operator +(Complex c1, Complex c2)\n    {\n        return new Complex(c1.Real + c2.Real, c1.Imaginary + c2.Imaginary);\n    }\n\n    public override string ToString()\n    {\n        return $\"{Real} + {Imaginary}i\";\n    }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Complex c1 = new Complex(1.0, 2.0);\n        Complex c2 = new Complex(3.0, 4.0);\n\n        Complex result = c1 + c2;\n\n        Console.WriteLine(result); // Ausgabe: 4 + 6i\n    }\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Operator%C3%BCberladung/#weitere-beispiele-fur-operatoruberladungen","title":"Weitere Beispiele f\u00fcr Operator\u00fcberladungen","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Operator%C3%BCberladung/#uberladen-des-und-operators","title":"\u00dcberladen des <code>==</code> und <code>!=</code> Operators","text":"<p>F\u00fcr die \u00dcberladung der Vergleichsoperatoren <code>==</code> und <code>!=</code> m\u00fcssen diese immer zusammen \u00fcberladen werden. <pre><code>public class Complex\n{\n    // ... (andere Mitglieder der Klasse)\n\n    // \u00dcberladen des == Operators\n    public static bool operator ==(Complex c1, Complex c2)\n    {\n        return c1.Real == c2.Real &amp;&amp; c1.Imaginary == c2.Imaginary;\n    }\n\n    // \u00dcberladen des != Operators\n    public static bool operator !=(Complex c1, Complex c2)\n    {\n        return !(c1 == c2);\n    }\n\n    public override bool Equals(object obj)\n    {\n        if (obj is Complex)\n        {\n            Complex c = (Complex)obj;\n            return this == c;\n        }\n        return false;\n    }\n\n    public override int GetHashCode()\n    {\n        return Real.GetHashCode() ^ Imaginary.GetHashCode();\n    }\n}\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Operator%C3%BCberladung/#einschrankungen-bei-der-operatoruberladung","title":"Einschr\u00e4nkungen bei der Operator\u00fcberladung","text":"<ul> <li>Nicht alle Operatoren k\u00f6nnen \u00fcberladen werden. Beispielsweise k\u00f6nnen die Bedingungsoperatoren (<code>&amp;&amp;</code> und <code>||</code>) nicht direkt \u00fcberladen werden.</li> <li>Man kann keine neuen Operatoren erstellen, sondern nur vorhandene Operatoren \u00fcberladen.</li> <li>\u00dcberladene Operatoren sollten sinnvoll und intuitiv sein, um den Code lesbar und wartbar zu halten.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Parameterarten/","title":"Parameterarten","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Parameterarten/#ref-parameter","title":"ref Parameter","text":"<p>Der Parameter wird als Referenz \u00fcbergeben und ist sowohl lesbar als auch schreibbar. Der Parameter muss vor dem Aufruf initialisiert sein.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Parameterarten/#beispiel","title":"Beispiel","text":"<pre><code>using System;\n\nclass Prog {\n    void Tausche(ref int a, ref int b) {\n        int temp = a;\n        a = b;\n        b = temp;\n    }\n\n    static void Main() {\n        Prog p = new Prog();\n        int x = 1, y = 2;\n        Console.WriteLine(\"Vorher: x={0}, y={1}\", x, y);\n        p.Tausche(ref x, ref y);\n        Console.WriteLine(\"Nachher: x={0}, y={1}\", x, y);\n    }\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Parameterarten/#out-parameter","title":"out Parameter","text":"<p>Der Parameter wird als Referenz \u00fcbergeben und ist in der Methode nur schreibbar. Der Parameter muss vor dem Aufruf nicht initialisiert sein.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Parameterarten/#beispiel_1","title":"Beispiel","text":"<pre><code>using System;\n\nclass Prog {\n    void Lies(out int x, out int y) {\n        Console.Write(\"x = \");\n        x = Convert.ToInt32(\"1\"); //Eingabe Konsole\n        Console.Write(\"y = \");\n        y = Convert.ToInt32(\"2\"); // Eingabe Konsole\n    }\n\n    static void Main() {\n        Prog p = new Prog();\n        int x, y;\n        p.Lies(out x, out y);\n        Console.WriteLine(\"\\nx % y = \" + (x % y));\n    }\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Parameterarten/#in-parameter","title":"in Parameter","text":"<p>Der Parameter wird als Referenz \u00fcbergeben, ist aber in der Methode nur lesbar. Der Parameter muss vor dem Aufruf initialisiert sein.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Parameterarten/#beispiel_2","title":"Beispiel","text":"<pre><code>using System;\n\nclass Program\n{\n    static void Main()\n    {\n        int x = 5;\n        int y = 10;\n        PrintValues(in x, in y);\n    }\n\n    static void PrintValues(in int a, in int b)\n    {\n        Console.WriteLine($\"a: {a}, b: {b}\"); // Ausgabe: a: 5, b: 10\n        // a und b sind nur lesbar und k\u00f6nnen hier nicht ge\u00e4ndert werden.\n    }\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Parameterarten/#params-parameter","title":"Params-Parameter","text":"<ul> <li>Der <code>params</code>-Modifikator erlaubt die \u00dcbergabe einer variablen Anzahl von Parametern gleichen Typs an eine Methode.</li> <li>Der Parameter muss in der Definition durch das Schl\u00fcsselwort <code>params</code> gekennzeichnet werden.</li> <li>Der <code>params</code>-Parameter muss der letzte Parameter in der Parameterliste sein.</li> <li>Beim Aufruf der Methode wird <code>params</code> nicht angegeben; die Werte werden einfach durch Kommas getrennt.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Parameterarten/#beispiel_3","title":"Beispiel","text":"<pre><code>using System;\n\nclass Prog {\n    void PrintSum(params double[] args) {\n        double summe = 0.0;\n        foreach (double arg in args) {\n            summe += arg;\n        }\n        Console.WriteLine(\"Die Summe ist = \" + summe);\n    }\n\n    static void Main() {\n        Prog p = new Prog();\n        p.PrintSum(1.2, 1.0);\n        p.PrintSum(1.2, 1.0, 3.6);\n    }\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Schl%C3%BCsselw%C3%B6rter%20und%20Modifizierer/","title":"Schl\u00fcsselw\u00f6rter und Modifizierer","text":"<p>In C# gibt es verschiedene Schl\u00fcsselw\u00f6rter und Modifizierer, die die Funktionalit\u00e4t von Klassen, Methoden und Operatoren erweitern oder einschr\u00e4nken. Hier sind einige der wichtigsten:</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Schl%C3%BCsselw%C3%B6rter%20und%20Modifizierer/#override","title":"override","text":"<p>Das <code>override</code>-Schl\u00fcsselwort wird verwendet, um eine Methode in einer abgeleiteten Klasse zu \u00fcberschreiben, die in der Basisklasse als <code>virtual</code>, <code>abstract</code> oder bereits <code>override</code> deklariert wurde.</p> <pre><code>public class BaseClass\n{\n    public virtual void Display()\n    {\n        Console.WriteLine(\"BaseClass Display\");\n    }\n}\n\npublic class DerivedClass : BaseClass\n{\n    public override void Display()\n    {\n        Console.WriteLine(\"DerivedClass Display\");\n    }\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Schl%C3%BCsselw%C3%B6rter%20und%20Modifizierer/#sealed","title":"sealed","text":"<p>Das <code>sealed</code>-Schl\u00fcsselwort wird verwendet, um zu verhindern, dass Klassen oder Methoden weiter abgeleitet oder \u00fcberschrieben werden. Es kann sowohl auf Klassen als auch auf Methoden angewendet werden.</p> <pre><code>public sealed class SealedClass\n{\n    public void Display()\n    {\n        Console.WriteLine(\"SealedClass Display\");\n    }\n}\n\n// Diese Klasse kann nicht abgeleitet werden\n// public class DerivedClass : SealedClass { }\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Schl%C3%BCsselw%C3%B6rter%20und%20Modifizierer/#beispiel-mit-einer-methode","title":"Beispiel mit einer Methode:","text":"<pre><code>public class BaseClass\n{\n    public virtual void Display()\n    {\n        Console.WriteLine(\"BaseClass Display\");\n    }\n}\n\npublic class DerivedClass : BaseClass\n{\n    public sealed override void Display()\n    {\n        Console.WriteLine(\"DerivedClass Display\");\n    }\n}\n\n// Weitere Ableitungen k\u00f6nnen die Methode Display() nicht \u00fcberschreiben\npublic class FurtherDerivedClass : DerivedClass\n{\n    // public override void Display() { }\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Schl%C3%BCsselw%C3%B6rter%20und%20Modifizierer/#virtual","title":"virtual","text":"<p>Das <code>virtual</code>-Schl\u00fcsselwort wird verwendet, um eine Methode in einer Basisklasse zu kennzeichnen, die von abgeleiteten Klassen \u00fcberschrieben werden kann.</p> <pre><code>public class BaseClass\n{\n    public virtual void Display()\n    {\n        Console.WriteLine(\"BaseClass Display\");\n    }\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Schl%C3%BCsselw%C3%B6rter%20und%20Modifizierer/#abstract","title":"abstract","text":"<p>Das <code>abstract</code>-Schl\u00fcsselwort wird verwendet, um eine Methode oder eine Klasse zu kennzeichnen, die nicht instanziiert werden kann und die in abgeleiteten Klassen implementiert werden muss.</p> <pre><code>public abstract class AbstractClass\n{\n    public abstract void Display(); // Muss in einer abgeleiteten Klasse implementiert werden\n}\n\npublic class DerivedClass : AbstractClass\n{\n    public override void Display()\n    {\n        Console.WriteLine(\"DerivedClass Display\");\n    }\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Schl%C3%BCsselw%C3%B6rter%20und%20Modifizierer/#new","title":"new","text":"<p>Das <code>new</code>-Schl\u00fcsselwort wird verwendet, um eine neue Implementierung eines Mitglieds in einer abgeleiteten Klasse zu erstellen, die ein Mitglied der Basisklasse mit dem gleichen Namen ausblendet. <pre><code>public class BaseClass\n{\n    public void Display()\n    {\n        Console.WriteLine(\"BaseClass Display\");\n    }\n}\n\npublic class DerivedClass : BaseClass\n{\n    public new void Display()\n    {\n        Console.WriteLine(\"DerivedClass Display\");\n    }\n}\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Vorteile%20OOP/","title":"Vorteile OOP","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Vorteile%20OOP/#datenkapselung","title":"Datenkapselung","text":"<ul> <li>Methoden kapseln direkte Zugriffe auf Klassendaten.</li> <li>\u00d6ffentliche Methoden bilden die Schnittstelle der Klasse nach au\u00dfen.</li> <li>Dies erleichtert das Testen und die Fehlerbeseitigung durch reproduzierbare Unit Tests.</li> <li>Innovationsoffenheit bei Implementierungsdetails ohne Gef\u00e4hrdung der Zusammenarbeit mit anderen Klassen.</li> <li>Steigerung der Produktivit\u00e4t durch wiederverwendbare Klassen.</li> <li>Unterst\u00fctzung erfolgreicher paralleler Teamarbeit durch abgeschottete Verantwortungsbereiche und vorabdefinierte Interfaces.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Vorteile%20OOP/#vererbung","title":"Vererbung","text":"<ul> <li>Erm\u00f6glicht die Ableitung spezialisierter Klassen aus einer Basisklasse zur L\u00f6sung neuer Aufgaben.</li> <li>Abgeleitete Klassen erben alle Member der Basisklasse, was die Wiederverwendung von Software erleichtert.</li> <li>Die Design\u00e4nderung einer abgeleiteten Klasse kann sich auf neue Member beschr\u00e4nken oder Modifikationen an bestehenden Mitgliedern vornehmen, solange die Kontrakte der Basisklasse eingehalten werden.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Vorteile%20OOP/#open-closed-principle","title":"Open-Closed-Principle","text":"<ul> <li>Dieses Prinzip besagt, dass Klassen offen f\u00fcr Erweiterungen (Verwendung als Basisklasse) sein sollten, aber geschlossen f\u00fcr \u00c4nderungen an ihrem bereits implementierten Verhalten.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Vorteile%20OOP/#polymorphie","title":"Polymorphie","text":"<ul> <li>Erlaubt es Objekten unterschiedlicher Klassen, die von derselben Basisklasse abgeleitet sind, bei gleichen Methodenaufrufen unterschiedliches Verhalten zu zeigen.</li> <li>Methoden k\u00f6nnen in abgeleiteten Klassen \u00fcberschrieben werden, wodurch jedes Objekt entsprechend seiner spezifischen Implementierung reagiert.</li> <li>Diese polymorphen Verhaltensweisen werden zur Laufzeit entschieden (sp\u00e4te Bindung), was zu einer verbesserten Wiederverwendbarkeit von Code und einer losen Kopplung zwischen Klassen f\u00fchrt.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Zugriffsmodifikatoren/","title":"Zugriffsmodifikatoren","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Zugriffsmodifikatoren/#private","title":"private","text":"<p>Zugriff nur durch Mitglieder dieser Klasse.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Zugriffsmodifikatoren/#public","title":"public","text":"<p>Zugriff durch alle Klassen und Objekte.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Zugriffsmodifikatoren/#protected","title":"protected","text":"<p>Zugriff durch Mitglieder dieser Klasse und alle von dieser Klasse abgeleiteten Klassen (auch in anderen Assemblies).</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Zugriffsmodifikatoren/#private-protected-protected-","title":"private protected (<code>protected --</code>)","text":"<p>Zugriff durch Mitglieder dieser Klasse und alle von dieser Klasse abgeleiteten Klassen in derselben Assembly.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Zugriffsmodifikatoren/#internal","title":"internal","text":"<p>Zugriff durch Mitglieder aller Klassen der aktuellen Assembly (.exe oder .dll), jedoch nicht durch Unit Tests.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Zugriffsmodifikatoren/#protected-internal-internal","title":"protected internal (<code>internal ++</code>)","text":"<p>Zugriff durch Mitglieder dieser Klasse, alle Klassen innerhalb derselben Assembly und alle von dieser Klasse abgeleiteten Klassen anderer Assemblies.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/OOP/Zugriffsmodifikatoren/#ubersicht","title":"\u00dcbersicht","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Vim-Tutorial/Modi/Einf%C3%BCgemodus/","title":"Einf\u00fcgemodus","text":"<p>Im Einf\u00fcgemodus kannst du tats\u00e4chlich Text eingeben. Du gelangst in diesen Modus durch verschiedene Befehle im Normalmodus:</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Vim-Tutorial/Modi/Einf%C3%BCgemodus/#in-den-einfugemodus-wechseln","title":"In den Einf\u00fcgemodus wechseln:","text":"<ul> <li><code>i</code>: Beginnt die Eingabe vor dem aktuellen Cursor-Standort.</li> <li><code>I</code>: Beginnt die Eingabe am Anfang der Zeile.</li> <li><code>a</code>: Beginnt die Eingabe nach dem aktuellen Cursor-Standort.</li> <li><code>A</code>: Beginnt die Eingabe am Ende der Zeile.</li> <li><code>o</code>: \u00d6ffnet eine neue Zeile unter der aktuellen Zeile und wechselt in den Einf\u00fcgemodus.</li> <li><code>O</code>: \u00d6ffnet eine neue Zeile \u00fcber der aktuellen Zeile und wechselt in den Einf\u00fcgemodus.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Vim-Tutorial/Modi/Einf%C3%BCgemodus/#zuruck-zum-normalmodus","title":"Zur\u00fcck zum Normalmodus:","text":"<ul> <li><code>Esc</code>: Kehrt jederzeit in den Normalmodus zur\u00fcck.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Vim-Tutorial/Modi/Modi/","title":"Modi","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Vim-Tutorial/Modi/Modi/#normalmodus","title":"Normalmodus","text":"<p>Dies ist der Modus, in dem du landest, wenn du Vim startest. Hier kannst du Befehle ausf\u00fchren, um Text zu navigieren und zu bearbeiten.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Vim-Tutorial/Modi/Modi/#einfugemodus","title":"Einf\u00fcgemodus","text":"<p>Hier kannst du tats\u00e4chlich Text eingeben. Du gelangst in diesen Modus, indem du <code>i</code>, <code>a</code>, <code>o</code> oder \u00e4hnliche Tasten im Normalmodus dr\u00fcckst.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Vim-Tutorial/Modi/Modi/#visueller-modus","title":"Visueller Modus","text":"<p>Erm\u00f6glicht das Markieren von Text. Diesen Modus erreichst du durch Dr\u00fccken von <code>v</code> im Normalmodus.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Vim-Tutorial/Modi/Normalmodus/","title":"Normalmodus","text":"<p>Im Normalmodus kannst du Text navigieren und bearbeiten, aber keinen neuen Text eingeben. Hier f\u00fchrst du die meisten deiner Befehle aus.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Vim-Tutorial/Modi/Normalmodus/#navigation-im-normalmodus","title":"Navigation im Normalmodus","text":"Befehl Beschreibung <code>h</code> Bewegt den Cursor nach links. <code>j</code> Bewegt den Cursor eine Zeile nach unten. <code>k</code> Bewegt den Cursor eine Zeile nach oben. <code>l</code> Bewegt den Cursor nach rechts. <code>w</code> Bewegt den Cursor zum Anfang des n\u00e4chsten Wortes. <code>b</code> Bewegt den Cursor zum Anfang des vorherigen Wortes. <code>0</code> Bewegt den Cursor zum Anfang der Zeile. <code>$</code> Bewegt den Cursor zum Ende der Zeile. <code>gg</code> Bewegt den Cursor zum Anfang der Datei. <code>G</code> Bewegt den Cursor zum Ende der Datei. <code>Ctrl + f</code> Bewegt eine Seite nach unten. <code>Ctrl + b</code> Bewegt eine Seite nach oben."},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Vim-Tutorial/Modi/Normalmodus/#bearbeiten-im-normalmodus","title":"Bearbeiten im Normalmodus","text":"Befehl Beschreibung <code>dd</code> L\u00f6scht die aktuelle Zeile. <code>yy</code> Kopiert die aktuelle Zeile. <code>p</code> F\u00fcgt den kopierten Text nach dem Cursor ein. <code>u</code> Macht die letzte Aktion r\u00fcckg\u00e4ngig. <code>Ctrl + r</code> Wiederholt die r\u00fcckg\u00e4ngig gemachte Aktion. <code>x</code> L\u00f6scht das Zeichen unter dem Cursor."},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Vim-Tutorial/Modi/Visueller%20Modus/","title":"Visueller Modus","text":"<p>Im Visuellen Modus kannst du Textbl\u00f6cke markieren, um sie zu kopieren, zu l\u00f6schen oder zu ersetzen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Vim-Tutorial/Modi/Visueller%20Modus/#visueller-modus-typen","title":"Visueller Modus Typen:","text":"<ul> <li><code>v</code>: Beginnt den visuellen Modus und markiert Zeichen.</li> <li><code>V</code>: Beginnt den visuellen Modus und markiert ganze Zeilen.</li> <li><code>Ctrl + v</code>: Beginnt den visuellen Blockmodus und markiert Rechtecke von Text.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/Vim-Tutorial/Modi/Visueller%20Modus/#befehle-im-visuellen-modus","title":"Befehle im visuellen Modus:","text":"<ul> <li><code>d</code>: L\u00f6scht den markierten Text.</li> <li><code>y</code>: Kopiert den markierten Text.</li> <li><code>p</code>: F\u00fcgt den kopierten Text nach der Markierung ein.</li> <li><code>&gt;</code>: Einr\u00fccken des markierten Textes.</li> <li><code>&lt;</code>: Ausr\u00fccken des markierten Textes.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/%C3%9Cbung/%C3%9Cbung%20Intro/%C3%9Cbung%201/","title":"\u00dcbung 1","text":"<pre><code>class Prog {\n    static void Main() {\n        float pi = 3.141593f;\n        double radius = 2.0;\n        System.Console.WriteLine(\"Der Fl\u00e4cheninhalt betr\u00e4gt: {0:f3}\",\n            pi * radius * radius);\n    }\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/%C3%9Cbung/%C3%9Cbung%20Intro/%C3%9Cbung%202/","title":"\u00dcbung 2","text":"<p>Experimentieen Sie mit dem Hallo-Beispielprogramm</p> <ul> <li> <p>Erg\u00e4nzen Sie weitere Ausgabeanweisungen# <pre><code>using System;\n\nclass Program {\n    static void Main() {\n        Console.WriteLine(\"Hello, World!\");\n        Console.WriteLine(\"Hello, Cake\");\n        Console.WriteLine(\"Mr. Cake!!\");\n    }\n}\n</code></pre></p> </li> <li> <p>Erstellen Sie eine Variante ohne using-Direktive <pre><code>class Program {\n    static void Main() {\n        System.Console.WriteLine(\"Hello, World!\");\n        System.Console.WriteLine(\"Hello, Cake\");\n        System.Console.WriteLine(\"Mr. Cake!!\");\n    }\n}\n</code></pre></p> </li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/%C3%9Cbung/%C3%9Cbung%20Intro/%C3%9Cbung%203/","title":"\u00dcbung 3","text":"<p>Beseitigen Sie die Fehler in der folgenden Variante des Hallo-Programms</p> <pre><code>using System;\n\nclass Hallo{\n    static void Main()\n    {\n        Console.WriteLine(\"Hallo echt .NET hier!\");\n    }\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/%C3%9Cbung/%C3%9Cbung%20Intro/%C3%9Cbung%204/","title":"\u00dcbung 4","text":"<pre><code>using System;\n\nclass Prog {\n    static void Main() {\n        Console.WriteLine(\"3,3 + 2 = \" + (3.3 + 2));\n        }\n\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/%C3%9Cbung/%C3%9Cbung%20Intro/%C3%9Cbung%205/","title":"\u00dcbung 5","text":"<p>Schreiben Sie ein Programm, das aufgrund der folgenden Variablendeklaration und -initialisierung</p> <p>int i = 4711, j = 471, k = 47, m = 4;</p> <p>mit zwei WriteLine() - Aufrufen diese Ausgabe produziert:</p> <p>Rechtsb\u00fcndig: i = 4711 j= 471 k= 47 m= 4</p> <p>Linksb\u00fcndig: 4711 (i) 471 (j) 47 (k) 4 (m)</p> <pre><code>using System;\n\nclass Prog {\n    static void Main() {\n        int i = 4711, j = 471, k = 47, m = 4;\n\n        string rightAligned = $\"Rechtsb\u00fcndig:\\ni = {i,5}\\nj = {j,5}\\nk = {k,5}\\nm = {m,5}\\n\";\n        string leftAligned = $\"Linksb\u00fcndig:\\n{i,-5} (i)\\n{j,-5} (j)\\n{k,-5} (k)\\n{m,-5} (m)\";\n\n        Console.WriteLine(rightAligned);\n        Console.WriteLine(leftAligned);\n        }\n\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/%C3%9Cbung/%C3%9Cbung%20Klassen/%C3%9Cbung%201/","title":"\u00dcbung 1","text":"<p>Warum steigt die Produktivit\u00e4t der Softwareentwicklung durch objektorientiertes Programmieren?</p> <ul> <li>Modellierung von Objekten aus der Datenbank oder XML/JSON ist viel Leichter</li> <li>Es muss weniger Code geschrieben werden durch Vererbung (Autoverleih, nicht f\u00fcr jeden Autotyp eigene Klasse mit gleichen Methoden)</li> <li>Kapselung \u2192 Es kann an Klassen bestimmte Funktionsabl\u00e4ufe ge\u00e4ndert werden, ohne das andere Teile des Programmes angepasst werden m\u00fcssen</li> <li>Tats\u00e4chliche Modellierung von Realen Objekten</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/%C3%9Cbung/%C3%9Cbung%20Klassen/%C3%9Cbung%202/","title":"\u00dcbung 2","text":"<p>a) In C# kann man nur Software f\u00fcr Windows entwickeln. \u2192 Nein</p> <p>b) Das .NET - Framework f\u00fcr Windows wurde in C# programmiert. \u2192 Ja</p> <p>c) Unter den .NET - Programmiersprachen zeichnet sich C# durch eine besonders leistungsf\u00e4hige Standardbibliothek aus. \u2192 Ja</p> <p>d) Die Klassen in einem mit C# erstellten DLL-Assembly k\u00f6nnen auch in anderen .NET - Programmiersprachen (z. B. VB.NET) genutzt werden. \u2192 Ja</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/%C3%9Cbung/%C3%9Cbung%20Klassen/%C3%9Cbung%203/","title":"\u00dcbung 3","text":"<p>Welche Aufgaben Erf\u00fcllt die CLR?</p> <p>Die CLR (Common Language Runtime) erf\u00fcllt mehrere wichtige Aufgaben innerhalb des .NET Frameworks:</p> <ul> <li> <p>Ausf\u00fchrung von Anwendungen: Die CLR ist verantwortlich f\u00fcr die Ausf\u00fchrung von .NET-Anwendungen. Sie l\u00e4dt den MSIL (Microsoft Intermediate Language) Code, wandelt ihn in nativen Code um (Just-in-Time Compilation) und f\u00fchrt ihn aus.</p> </li> <li> <p>Speicherverwaltung: Die CLR \u00fcbernimmt die Verwaltung des Speichers f\u00fcr .NET-Anwendungen. Dazu geh\u00f6rt die Zuweisung und Freigabe von Speicher sowie die Durchf\u00fchrung von Garbage Collection, um nicht mehr ben\u00f6tigte Objekte automatisch zu bereinigen.</p> </li> <li> <p>Sicherheit: Die CLR stellt Mechanismen zur Verf\u00fcgung, um die Sicherheit von .NET-Anwendungen zu gew\u00e4hrleisten. Dazu geh\u00f6ren Code-Access-Security (CAS), Role-Based Security und die \u00dcberpr\u00fcfung von Codeberechtigungen.</p> </li> <li> <p>Typsicherheit und Typ\u00fcberpr\u00fcfung: Die CLR \u00fcberwacht die Typsicherheit von .NET-Anwendungen w\u00e4hrend der Laufzeit und f\u00fchrt bei Bedarf Typ\u00fcberpr\u00fcfungen durch, um sicherzustellen, dass keine unerwarteten Typfehler auftreten.</p> </li> <li> <p>Thread-Management: Die CLR unterst\u00fctzt die Ausf\u00fchrung von Multi-Threaded-Anwendungen durch Verwaltung und Synchronisation von Threads, die in .NET-Anwendungen erstellt werden.</p> </li> <li> <p>Exception Handling: Die CLR bietet Mechanismen zur Behandlung von Ausnahmen (Exceptions), die w\u00e4hrend der Ausf\u00fchrung von .NET-Anwendungen auftreten k\u00f6nnen. Sie erm\u00f6glicht das Fangen und Weiterleiten von Ausnahmen entsprechend den Regeln der Ausnahmehandhabung in .NET.</p> </li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/%C3%9Cbung/%C3%9Cbung%20Klassen/%C3%9Cbung%204/","title":"\u00dcbung 4","text":"<p>In welcher Beziehung stehen Assemblies und Namensr\u00e4ume</p> <ul> <li> <p>Organisatorische Struktur: Namensr\u00e4ume bieten eine organisatorische Struktur f\u00fcr Typen innerhalb eines Assemblys. Typen k\u00f6nnen \u00fcber mehrere Namensr\u00e4ume hinweg organisiert werden, die in einem oder mehreren Assemblies enthalten sein k\u00f6nnen.</p> </li> <li> <p>Namensraum\u00fcberschneidung: Verschiedene Assemblies k\u00f6nnen dieselben Namensr\u00e4ume verwenden, solange sie nicht im Konflikt stehen. Ein Namensraum kann also Typen aus verschiedenen Assemblies umfassen, solange die Typen in diesen Assemblies eindeutig identifizierbar sind.</p> </li> <li> <p>Typsicherheit und Zugriffskontrolle: Assemblies definieren die Einheitlichkeit und die Grenzen f\u00fcr die Bereitstellung von Typen und Ressourcen, w\u00e4hrend Namensr\u00e4ume helfen, diese innerhalb der Anwendung logisch zu organisieren und zu benennen.</p> </li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/%C3%9Cbung/%C3%9Cbung%20Klassen/%C3%9Cbung%205/","title":"\u00dcbung 5","text":"<p>CIL = Common Intermediate Language</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/%C3%9Cbung/%C3%9Cbung%20Klassen/%C3%9Cbung%206/","title":"\u00dcbung 6","text":"<p>FCL = Framework Class Library</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/%C3%9Cbung/%C3%9Cbung%20Klassen/%C3%9Cbung%207/","title":"\u00dcbung 7","text":"<p>CLS = Common Laguage Specification </p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Programmierung/%C3%9Cbung/%C3%9Cbung%20Klassen/%C3%9Cbung%208/","title":"\u00dcbung 8","text":"<p>COM = Component Object Model</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Projektmanagement/","title":"Projektmanagement","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Projektmanagement/#allgemeine-informationen","title":"Allgemeine Informationen","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Projektmanagement/#klausur-themen","title":"Klausur Themen","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Projektmanagement/#termine","title":"Termine","text":"<p>17.09.2024 \u2192 Klausur</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/1.%20Planungsbasiert%20vs%20Agil/","title":"1. Planungsbasiert vs Agil","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/1.%20Planungsbasiert%20vs%20Agil/#ziele-des-planungsbasierten-projektmanagements","title":"\ud83c\udfaf Ziele des planungsbasierten Projektmanagements:","text":"<ul> <li>Fr\u00fches Commitment: Der Kunde definiert das Produkt, die Lieferzeit und den Preis zu Beginn.</li> <li>Sp\u00e4tes Scheitern: Umfangreiche Dokumentation erm\u00f6glicht dem Projektmanager, nachzuweisen, dass weder er noch das Team f\u00fcr Unzufriedenheit des Kunden verantwortlich sind.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/1.%20Planungsbasiert%20vs%20Agil/#ziele-des-agilen-projektmanagements-besser-produktentwicklung","title":"\ud83d\udd04 Ziele des agilen Projektmanagements (besser: Produktentwicklung):","text":"<ul> <li>Welcome Change: Der Kunde ist zufrieden, da er nach einer anf\u00e4nglich unbestimmten Zeit f\u00fcr einen variablen Preis ein ad\u00e4quates, tolles Produkt erh\u00e4lt.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/1.%20Planungsbasiert%20vs%20Agil/#planungsbasiert-vs-agil","title":"\u2696\ufe0f Planungsbasiert vs. Agil?","text":"<ul> <li>Kombination beider Ans\u00e4tze: Viele Methoden eines Ansatzes k\u00f6nnen im anderen sinnvoll eingesetzt werden.</li> <li>Flexibilit\u00e4t und Kreativit\u00e4t: Beide Ans\u00e4tze k\u00f6nnen erfolgreich sein, wenn kreativ umgesetzt.</li> <li>Gemeinsame Elemente: Bestimmte Phasen (Projektentstehung, -initiierung) und Methoden (Reporting, Stakeholdereinbindung) sind in beiden Ans\u00e4tzen g\u00fcltig und notwendig.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/10.%20Projektmanagement%20-%20Was%20nicht%20passieren%20sollte/","title":"10. Projektmanagement   Was nicht passieren sollte","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/11.%20Erfolgsfaktoren%20im%20Projektmanagement/","title":"11. Erfolgsfaktoren im Projektmanagement","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/11.%20Erfolgsfaktoren%20im%20Projektmanagement/#erfolgsquoten","title":"Erfolgsquoten","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/11.%20Erfolgsfaktoren%20im%20Projektmanagement/#cost-of-poor-software-quality","title":"Cost of Poor Software Quality","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/11.%20Erfolgsfaktoren%20im%20Projektmanagement/#projektdauer-und-teamgroe","title":"Projektdauer und Teamgr\u00f6\u00dfe","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/11.%20Erfolgsfaktoren%20im%20Projektmanagement/#effiziente-projektbearbeitung","title":"Effiziente Projektbearbeitung","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/11.%20Erfolgsfaktoren%20im%20Projektmanagement/#gewichtung-der-erfolgsfaktoren","title":"Gewichtung der Erfolgsfaktoren","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/11.%20Erfolgsfaktoren%20im%20Projektmanagement/#erfolgsfaktoren-laut-gpm-studie","title":"Erfolgsfaktoren laut GPM-Studie:","text":"<ol> <li>Machbarkeitsstudie:</li> <li> <p>Thematisch breit und angemessen tiefgehend.</p> </li> <li> <p>Erfolgreicher Projektstart:</p> </li> <li> <p>Zeigt den Verlauf und Ausgang des Projekts ma\u00dfgeblich an.</p> </li> <li> <p>Qualifikation der Mitarbeiter:</p> </li> <li>Sinnvolle Zusammenstellung des Projektteams (Fachkenntnis, Methodenkenntnis, Pers\u00f6nlichkeit).</li> <li>Gute \"Soft Skills\" des Projektleiters.</li> <li>Besetzung von Schl\u00fcsselpositionen mit erfahrenen Personen.</li> <li> <p>Einbindung von Machtpromotoren mit globalem Blick auf Projekt und Projektziel.</p> </li> <li> <p>Klare Anforderungen / Zielsetzung:</p> </li> <li>Vereinbarung von klaren Zielen und Anforderungen zwischen Projektleiter, Team und Auftraggeber/Management.</li> <li> <p>Stets volle Klarheit \u00fcber Projektziele seitens des Teams.</p> </li> <li> <p>Aktive, klare, transparente Kommunikation:</p> </li> <li> <p>Soziale, technische und kommunikative F\u00e4higkeiten des Teams sind entscheidend.</p> </li> <li> <p>Nutzung standardisierter Prozesse, Methoden und Tools:</p> </li> <li>Unterst\u00fctzt die Konsistenz und Effizienz in unternehmensweiten Projekten.</li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/12.%20%20Scheitern%20von%20Projekten/","title":"12.  Scheitern von Projekten","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/12.%20%20Scheitern%20von%20Projekten/#was-sind-typische-grunde-fur-das-scheitern-von-projekten","title":"Was sind typische Gr\u00fcnde f\u00fcr das Scheitern von Projekten?","text":"<ul> <li>\ud83d\udeab \u00dcbersch\u00e4tzung der Projektattraktivit\u00e4t (\u201euns kann nichts passieren\u201c)</li> <li>\ud83c\udfaf Keine klare Zieldefinition</li> <li>\ud83d\udd04 Unklare oder nicht festgelegte Rollen der Projektbeteiligten</li> <li>\ud83c\udf1f Zu optimistische Einsch\u00e4tzung der Umsetzbarkeit</li> <li>\ud83d\udcca Unklare Erfolgsfaktoren (woran messe ich den Erfolg?)</li> <li>\ud83d\udcb8 K\u00fcnstlich erzeugte oder falsch dargestellte Kapitalrenditen</li> <li>\ud83d\udce2 Unangemessene Forcierung von Projekten durch F\u00fchrungskr\u00e4fte</li> <li>\ud83d\udd0d Unzureichende Analyse von Projektabh\u00e4ngigkeiten</li> <li>\ud83d\udd04 Vorhersehbare Ver\u00e4nderungen im Projektumfeld nicht ber\u00fccksichtigt</li> <li>\ud83e\udd1d Konflikte mit externen Partnern (z.B. Lieferanten)</li> <li>\ud83d\udcc9 Fehlende Prozesse zur Realisierung des Projektnutzens</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/12.%20%20Scheitern%20von%20Projekten/#typische-auswirkungen-von-gescheiterten-projekten","title":"Typische Auswirkungen von gescheiterten Projekten","text":"<ul> <li>\ud83d\ude41 Unzufriedene und frustrierte Kunden (Imageverlust)</li> <li>\ud83d\udcb8 Verschwendung von Ressourcen</li> <li>\ud83d\udcb0 Kein \"Return on Investment\" f\u00fcr den Kunden</li> <li>\ud83d\udcc9 Gesch\u00e4ftsverlust (nicht quantifizierbar)</li> <li>\ud83d\ude1e Demotivierte und frustrierte Mitarbeiter</li> <li>\ud83d\udcb8 Abschreibungsbedarf in Millionenh\u00f6he</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/13.%20Woran%20misst%20man%20den%20Projekterfolg/","title":"13. Woran misst man den Projekterfolg","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/13.%20Woran%20misst%20man%20den%20Projekterfolg/#erfolgskriterien-des-projektes-magisches-dreieck","title":"Erfolgskriterien des Projektes (Magisches Dreieck):","text":"<ul> <li>Termintreue: % \u00dcber/Unterschreitung des Zeitplans</li> <li>im Budget: % \u00dcber/Unterschreitung des Budgets</li> <li>Umfang/Qualit\u00e4t: % Anforderungen im Verh\u00e4ltnis zum vereinbarten Umfang</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/13.%20Woran%20misst%20man%20den%20Projekterfolg/#erfolgskriterien-des-portfolio-managements","title":"Erfolgskriterien des Portfolio-Managements:","text":"<ul> <li>Kunden-/Nutzerzufriedenheit: Bewertung von sehr hoch bis sehr niedrig</li> <li>Business-Value erreicht: Bewertung von sehr hoch bis sehr niedrig</li> <li>Beitrag zu strategischen Unternehmenszielen: Bewertung von unmittelbar bis entfernt</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/2.%20Motivation%20Projektmanagement/","title":"2. Motivation Projektmanagement","text":"<p>Innovative und interessante Aufgaben werden meist in Projektform realisiert, da sich Projektarbeit in fast allen Unternehmen etabliert hat.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/2.%20Motivation%20Projektmanagement/#projekt-vorgehen","title":"\ud83d\udd04 Projekt-Vorgehen:","text":"<p>Ein tempor\u00e4res Spezialisten-Team l\u00f6st zielgerichtet, schnell und kompetent die vorgegebene Aufgabe.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/2.%20Motivation%20Projektmanagement/#projekt-organisation","title":"\ud83c\udfe2 Projekt-Organisation:","text":"<p>Projektarbeit stellt die ideale Organisationsform f\u00fcr komplexe Aufgabenstellungen dar.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/2.%20Motivation%20Projektmanagement/#nutzen-fur-die-unternehmen","title":"\ud83d\udcc8 Nutzen f\u00fcr die Unternehmen:","text":"<ul> <li>H\u00f6herer Output</li> <li>Qualitativ bessere Arbeitsergebnisse</li> <li>Schnelle Reaktion auf Wettbewerbsver\u00e4nderungen m\u00f6glich</li> </ul> <p>Erfolgreiches Projektmanagement \u2794 Strategischer Wettbewerbsvorteil</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/3.%20Was%20ist%20ein%20Projekt/","title":"3. Was ist ein Projekt","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/3.%20Was%20ist%20ein%20Projekt/#definition-din-69901-2009","title":"Definition (DIN 69901, 2009):","text":"<p>Ein Projekt ist ein Vorhaben, das im Wesentlichen durch die Einmaligkeit der Bedingungen in ihrer Gesamtheit gekennzeichnet ist, wie z.B.: - Zielvorgabe - Zeitliche, finanzielle, personelle oder andere Begrenzungen - Abgrenzungen gegen\u00fcber anderen Vorhaben - Projektspezifische Organisation</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/3.%20Was%20ist%20ein%20Projekt/#definition-von-pmi-im-pmbok","title":"Definition von PMI (im PMBOK):","text":"<p>A project is a temporary endeavor undertaken to create a unique product or service. It is: - Performed by people - Constrained by limited resources - Planned, executed, and controlled.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/4.%20Merkmale%20von%20Projekten/","title":"4. Merkmale von Projekten","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/4.%20Merkmale%20von%20Projekten/#einmaligkeit","title":"\ud83c\udd95 Einmaligkeit:","text":"<ul> <li>Projekte sind einmalige Vorhaben.</li> <li>Know-how, Pl\u00e4ne oder Erfahrungen sind nur bedingt vorhanden.</li> <li>Schwer einsch\u00e4tzbare Risiken bei der Durchf\u00fchrung.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/4.%20Merkmale%20von%20Projekten/#losungsangebote-des-projektmanagements","title":"L\u00f6sungsangebote des Projektmanagements:","text":"<ul> <li>Methoden zur Bew\u00e4ltigung eines hohen Organisations- und Innovationsbedarfs mit hohem Durchf\u00fchrungsrisiko.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/4.%20Merkmale%20von%20Projekten/#umfang","title":"\ud83d\udccf Umfang:","text":"<ul> <li>Projekte sind ganzheitliche Aufgaben.</li> <li>Komplex in Planung und Durchf\u00fchrung.</li> <li>Ber\u00fccksichtigung einer Vielzahl von Faktoren und Abh\u00e4ngigkeiten.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/4.%20Merkmale%20von%20Projekten/#losungsangebote-des-projektmanagements_1","title":"L\u00f6sungsangebote des Projektmanagements:","text":"<ul> <li>F\u00e4higkeiten zur engen Zusammenarbeit und Umgang mit vielen Schnittstellen sowie systematisches Vorgehen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/4.%20Merkmale%20von%20Projekten/#zeitliche-begrenzung","title":"\u23f3 Zeitliche Begrenzung:","text":"<ul> <li>Projekte haben einen definierten Anfang und ein klar definiertes Ende.</li> <li>Erfordern andere organisatorische und personelle Regelungen als Linienaufgaben.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/4.%20Merkmale%20von%20Projekten/#losungsangebote-des-projektmanagements_2","title":"L\u00f6sungsangebote des Projektmanagements:","text":"<ul> <li>F\u00f6rdert eine hohe Flexibilit\u00e4t und hilft beim Kampf um Ressourcen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/5.%20Abgrenzung%20von%20Projekten/","title":"5. Abgrenzung von Projekten","text":"<p>\u2192 Ein Projekt ist nur ein Projekt, wenn der L\u00f6sungsweg nicht bekannt ist, es jedoch klar definierte Ziele gibt. Diese k\u00f6nnen jedoch im laufe des Projektes angepasst werden.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/6.%20Unterschied%20Projektmanagement%20von%20normalem%20Management/","title":"6. Unterschied Projektmanagement von normalem Management","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/6.%20Unterschied%20Projektmanagement%20von%20normalem%20Management/#integration-der-innerbetrieblichen-inseln","title":"Integration der innerbetrieblichen Inseln","text":"<p>Projektmanagement muss sicherstellen, dass die Integration der verschiedenen \"innerbetrieblichen Inseln\" erfolgt, sowohl funktions- (abteilungs-) als auch hierarchie\u00fcbergreifend. Dies bedeutet, dass das Projektteam effektiv \u00fcber organisatorische Grenzen hinweg zusammenarbeitet und Synergien zwischen verschiedenen Bereichen nutzt.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/6.%20Unterschied%20Projektmanagement%20von%20normalem%20Management/#organisation-und-forderung-der-kommunikation","title":"Organisation und F\u00f6rderung der Kommunikation","text":"<p>Ein weiteres zentrales Ziel des Projektmanagements ist es, die Kommunikation zwischen den Teammitgliedern im Projekt zu organisieren und zu f\u00f6rdern. Dies beinhaltet den Aufbau eines klaren Kommunikationsrahmens, in dem Informationen effizient ausgetauscht werden k\u00f6nnen, um Missverst\u00e4ndnisse zu vermeiden und die Zusammenarbeit zu verbessern.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/7.%20Magisches%20Dreieck/","title":"7. Magisches Dreieck","text":"<p>Das Magische Dreieck repr\u00e4sentiert die drei zentralen Gr\u00f6\u00dfen, die miteinander in Zielkonkurrenz stehen und den Erfolg eines Projekts ma\u00dfgeblich bestimmen: </p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/7.%20Magisches%20Dreieck/#leistung-ergebnis-qualitat","title":"Leistung / Ergebnis / Qualit\u00e4t","text":"<p>Diese Dimensionen definieren das angestrebte Ergebnis und die Qualit\u00e4t des Projekts.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/7.%20Magisches%20Dreieck/#zeit-termine","title":"Zeit / Termine","text":"<p>Legt den Zeitrahmen fest, innerhalb dessen das Projekt abgeschlossen werden muss.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/7.%20Magisches%20Dreieck/#kosten-ressourcen","title":"Kosten / Ressourcen","text":"<p>Umfasst die finanziellen und materiellen Ressourcen, die f\u00fcr das Projekt ben\u00f6tigt werden.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/7.%20Magisches%20Dreieck/#beachten","title":"Beachten","text":"<ul> <li>Zu Projektbeginn sind diese drei Gr\u00f6\u00dfen so exakt wie m\u00f6glich zu bestimmen.</li> <li>Eine Ver\u00e4nderung bei einer Gr\u00f6\u00dfe hat immer Auswirkungen auf die anderen Gr\u00f6\u00dfen!</li> <li>Diese Gr\u00f6\u00dfen \u201eim Gleichklang\u201c zu managen, ist die Herausforderung eines jeden IT-Projekts.    \u201eGleichklang\u201c kann auch bedeuten: Ver\u00e4nderungen geschehen im Einvernehmen mit dem Sponsor und dem Kunden/ Marktvertreter.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/8.%20Projektziele/","title":"8. Projektziele","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/8.%20Projektziele/#abwicklungsziele","title":"Abwicklungsziele:","text":"<ul> <li>Es ist nicht m\u00f6glich, Leistung zu erbringen, ohne dabei die Qualit\u00e4t zu ber\u00fccksichtigen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/8.%20Projektziele/#systemziele","title":"Systemziele:","text":"<ul> <li>Steigerung der finanziellen Ertr\u00e4ge durch verbesserte Gesch\u00e4ftsprozesse.</li> <li>F\u00f6rderung der kontinuierlichen Weiterbildung der Mitarbeiter.</li> <li>Generierung neuer Erkenntnisse und Innovationen durch gezielte Entwicklungsma\u00dfnahmen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/8.%20Projektziele/#stakeholder","title":"Stakeholder","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/9.%20Kombinationen%20von%20Resourcen/","title":"9. Kombinationen von Resourcen","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Projektmanagement/Einf%C3%BChrung/9.%20Kombinationen%20von%20Resourcen/#unternehmenskultur","title":"Unternehmenskultur","text":"<ul> <li> <p>Die Menschen machen das Projekt, nicht die Technik. Man kann sie nicht so einfach austauschen.</p> </li> <li> <p>Die Menschen im Projekt k\u00f6nnen die Technik und Organisation ver\u00e4ndern und gestalten</p> </li> <li> <p>Die Menschen im Projekt m\u00fcssen sich verst\u00e4ndigen. Kommunikation zwischen den Beteiligten ist der entscheidende Erfolgsfaktor</p> </li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Rhetorik/Attrikulation/","title":"Attrikulation","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Rhetorik/Flugmetapher/","title":"Flugmetapher","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Rhetorik/Kommunikation/","title":"Kommunikation","text":"<ul> <li>75% K\u00f6rpersprache<ul> <li>Haltung</li> <li>Mimik</li> <li>Gestik</li> <li>Gang</li> <li>Kleidung</li> <li>Brille</li> <li>Schminke</li> <li>Haare</li> <li>H\u00e4ndedruck</li> </ul> </li> <li>20% Aussprache (Wie?)<ul> <li>Deutlisch</li> <li>Lautst\u00e4rke</li> <li>Schnelligkeit</li> <li>Hoch</li> <li>Tief</li> <li>Dialekt</li> </ul> </li> <li>5% Inhalt (Was?)</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Rhetorik/Manuskript/","title":"Manuskript","text":"<ol> <li>Format: A5 - A6</li> <li>Stichpunkte: Maximal 7, durchnummeriert</li> <li>Schriftgr\u00f6\u00dfe: Gro\u00df und deutlich</li> <li>Behandlung: Keine Knicke, Falten oder Spielspuren</li> <li>Beschriftung: Nur einseitig beschriften, R\u00fcckseite f\u00fcr Logo nutzen</li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Rhetorik/Raster/","title":"Raster","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Rhetorik/Raster/#thema","title":"\ud83d\udccc Thema","text":"<ul> <li>Was m\u00f6chte ich \u00fcberhaupt sagen?</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Rhetorik/Raster/#rede-ziel","title":"\ud83c\udfaf Rede-Ziel","text":"<ul> <li>Unterhaltung (Eye Catcher)</li> <li>Informationen</li> <li>\u00dcberzeugen -&gt; Meinungs\u00e4nderung</li> <li>Handlung (Kaufen) -&gt; Emotionen</li> <li>Zwecksatz</li> <li>Bitte (Und deshalb bitte ich Sie, trennen Sie in Zukunft Ihren M\u00fcll)</li> <li>W\u00fcnsche (Ich w\u00fcnsche mir, dass Sie in Zukunft Ihren M\u00fcll trennen)</li> <li>Apell/Aufforderung</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Rhetorik/Raster/#eingesetzte-medien","title":"\ud83c\udfac Eingesetzte Medien","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Rhetorik/Raster/#zielgruppe","title":"\ud83d\udc65 Zielgruppe","text":"<ul> <li>Sprache (Fachausdr\u00fccke)</li> <li>Klamotten (Anzug)</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Rhetorik/Raster/#redezeit","title":"\u23f0 Redezeit","text":"<ul> <li>Fragen dazwischen oder danach</li> <li>3 Minuten davor fertig</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Sichere%20Programmierung/Sichere%20Programmierung/","title":"Sichere Programmierung","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Sichere%20Programmierung/Sichere%20Programmierung/#allgemeine-informationen","title":"Allgemeine Informationen","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Sichere%20Programmierung/Sichere%20Programmierung/#klausur-themen","title":"Klausur Themen","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Sichere%20Programmierung/Sichere%20Programmierung/#termine","title":"Termine","text":"<p>29.08.2024 \u2192 Klausur</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Big%20O%20%28Groe%C3%9Fen-Ordnung%29/","title":"Big O (Groe\u00dfen Ordnung)","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Big%20O%20%28Groe%C3%9Fen-Ordnung%29/#komplexitatschart","title":"Komplexit\u00e4tschart","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Big%20O%20%28Groe%C3%9Fen-Ordnung%29/#komplexitatsnotation","title":"Komplexit\u00e4tsnotation","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Big%20O%20%28Groe%C3%9Fen-Ordnung%29/#ologn","title":"\\(O\\log(N)\\)","text":"N Elements O(N) O(log N) 8 8 3 16 16 4 32 32 5 64 64 6 128 128 7 256 256 8 512 512 9 1024 1024 10"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Big%20O%20%28Groe%C3%9Fen-Ordnung%29/#cheatsheet","title":"Cheatsheet","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Hashes/","title":"Hashes und Hash-Tabellen erkl\u00e4rt","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Hashes/#verwendung-in-einem-fast-food-bestellprogramm","title":"Verwendung in einem Fast-Food-Bestellprogramm","text":"<p>Ein praktisches Beispiel, bei dem Hash-Tabellen verwendet werden k\u00f6nnen, ist ein Programm f\u00fcr Online-Bestellungen bei einem Fast-Food-Restaurant. Hier soll eine Speisekarte mit Preisen angeboten werden. Man k\u00f6nnte dies technisch mit einem Array von Strukturen (structs) umsetzen. </p> <p>[!info] Hinweis:  Ist das Array unsortiert, ben\u00f6tigt die Suche nach dem Preis eines Gerichts \\(O(N)\\) Schritte f\u00fcr eine lineare Suche. Ist das Array nach den Namen der Gerichte sortiert, reduziert sich die Suche auf \\(O(log N)\\) Schritte f\u00fcr eine bin\u00e4re Suche. Dennoch kann die Suche mit Hash-Tabellen auf \\(O(1)\\) reduziert werden.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Hashes/#grundlagen-der-hash-tabellen","title":"Grundlagen der Hash-Tabellen","text":"<p>Eine Hash-Tabelle ist eine Datenstruktur, die aus geordneten Schl\u00fcssel-Wert-Paaren besteht (z.B. Gericht und Preis). Die meisten modernen Programmiersprachen unterst\u00fctzen Hash-Tabellen, auch bekannt unter verschiedenen Namen: - Hashes (Ruby) - Maps (JavaScript) - Hash maps (Java) - Dictionaries (C#, Python) - Associative containers (C++)</p> <p>[!faq] Wichtig:  Das Nachschlagen eines Wertes in einer Hash-Tabelle hat im Durchschnitt eine Effizienz von \\(O(1)\\).</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Hashes/#hashing-und-hash-funktionen","title":"Hashing und Hash-Funktionen","text":"<p>Hashing ist der Prozess, Zeichen oder gro\u00dfe Zahlen in kleinere Zahlen zu konvertieren. Eine Hash-Funktion definiert die Vorschrift, nach der diese Konvertierung erfolgt. Beispiele f\u00fcr einfache Hash-Funktionen: 1. Summenbildung: Die Stellenzahlen der Buchstaben werden summiert. Zum Beispiel wird \"BAD\" zu 2+1+4 = 7. 2. Produktbildung: Die Stellenzahlen der Buchstaben werden multipliziert. Zum Beispiel wird \"BAD\" zu 214 = 8.</p> <p>[!info] Hinweis:  Eine g\u00fcltige Hash-Funktion muss bei jeder Benutzung den gleichen Schl\u00fcssel (String) in die gleiche Zahl umwandeln.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Hashes/#komplexere-hash-funktionen","title":"Komplexere Hash-Funktionen","text":"<p>Einige Beispiele f\u00fcr komplexere Hash-Funktionen sind: - Divisionsrestmethode: \\(h(x) = x \\mod \\text{Hashgr\u00f6\u00dfe}\\) - Mitt-Quadrat-Methode: Ein Wert wird quadriert und bestimmte Ziffern aus der Mitte des Quadrats werden als Hashwert entnommen. - Zerlegungsmethode: Die Ziffern des Wertes werden in Bl\u00f6cke geteilt und mathematische Operationen darauf angewendet.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Hashes/#behandlung-von-kollisionen","title":"Behandlung von Kollisionen","text":"<p>[!error]Kollision:  Eine Kollision tritt auf, wenn zwei Schl\u00fcssel denselben Hash-Wert ergeben. Es gibt verschiedene Methoden, um Kollisionen zu behandeln:</p> <ol> <li>Chaining (Verkettung): Jeder Eintrag in der Hash-Tabelle verweist auf eine Liste von Werten, die denselben Hash-Wert haben.</li> <li>Sondierung: Eine alternative Position in der Hash-Tabelle wird gesucht, wenn der berechnete Platz bereits belegt ist.</li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Hashes/#methoden","title":"Methoden","text":"<p>Es gibt zwei Hauptmethoden des Hashings: - Offenes Hashing (Chaining): Jeder Beh\u00e4lter kann beliebig viele Elemente aufnehmen. - Geschlossenes Hashing (Sondierung): Jeder Beh\u00e4lter kann nur eine konstante Anzahl von Schl\u00fcsseln aufnehmen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Hashes/#effizienz-von-hash-tabellen","title":"Effizienz von Hash-Tabellen","text":"<p>Die Effizienz einer Hash-Tabelle h\u00e4ngt von drei Faktoren ab: - Anzahl der gespeicherten Daten - Anzahl der Zellen in der Hash-Tabelle - Verwendete Hash-Funktion</p> <p>[!info] Tipp:  Ein gutes Verh\u00e4ltnis von Elementen zu Tabellengr\u00f6\u00dfe liegt bei etwa 7 Elementen pro 10 Zellen, was einem Lastfaktor von etwa 0.7-0.8 entspricht.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Hashes/#anwendungsbereiche-von-hash-tabellen","title":"Anwendungsbereiche von Hash-Tabellen","text":"<p>Hash-Tabellen eignen sich besonders gut f\u00fcr: - W\u00f6rterb\u00fccher - Lagerverwaltung (Waren und Anzahl) - Abstimmungen (Kandidat und Stimmenzahl) - HTTP-Statuscodes (Code und Bedeutung)</p> <p>[!info] Hinweis:  Auch wenn Daten nicht paarweise existieren, k\u00f6nnen Hash-Tabellen genutzt werden, um Implementierungen schneller zu machen. Beispielsweise k\u00f6nnen sie verwendet werden, um zu pr\u00fcfen, ob ein Array ein Teilmengen eines anderen Arrays ist.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Huffman-Codierung/","title":"Huffman Codierung","text":"<p>Die Huffman-Codierung ist ein verlustfreies Komprimierungsverfahren, das von David A. Huffman entwickelt wurde. Sie wird verwendet, um die Anzahl der Bits zu minimieren, die zur Darstellung von Zeichen oder Symbolen ben\u00f6tigt werden, basierend auf ihrer H\u00e4ufigkeit in einem Datensatz. Das Verfahren nutzt bin\u00e4re B\u00e4ume zur Codierung und ist besonders effizient, wenn einige Zeichen deutlich h\u00e4ufiger vorkommen als andere.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Huffman-Codierung/#schritte-der-huffman-codierung","title":"Schritte der Huffman-Codierung","text":"<ol> <li>H\u00e4ufigkeitsanalyse: </li> <li> <p>Ermitteln der H\u00e4ufigkeit jedes Zeichens in den Daten.</p> </li> <li> <p>Sortierung der Zeichen:</p> </li> <li> <p>Die Zeichen werden nach ihrer H\u00e4ufigkeit sortiert (h\u00e4ufigste Zeichen mit niedrigerer Priorit\u00e4t).</p> </li> <li> <p>Baumkonstruktion:</p> </li> <li>Jedes Zeichen wird als Blatt in einem Bin\u00e4rbaum dargestellt.</li> <li>Die zwei am seltensten vorkommenden Zeichen werden zu einem neuen Knoten zusammengefasst, dessen H\u00e4ufigkeit der Summe der beiden entspricht.</li> <li> <p>Wiederholen des Vorgangs, bis nur noch ein Baum existiert.</p> </li> <li> <p>Zuordnung von Bin\u00e4rcodes:</p> </li> <li>Jede Kante im Baum wird entweder mit <code>0</code> oder <code>1</code> markiert.</li> <li>Um ein Zeichen zu codieren, folgt man vom Wurzelknoten des Baumes bis zum Blattknoten des Zeichens und liest die entsprechenden <code>0</code>- und <code>1</code>-Folgen ab.</li> <li>H\u00e4ufig vorkommende Zeichen erhalten k\u00fcrzere Codes, seltene Zeichen l\u00e4ngere.</li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Huffman-Codierung/#beispiel","title":"Beispiel","text":"<p>Angenommen, wir haben die Zeichenfolge \"ABRACADABRA\" mit folgenden H\u00e4ufigkeiten:</p> Zeichen H\u00e4ufigkeit A 5 B 2 R 2 C 1 D 1 <p>Auf Basis dieser H\u00e4ufigkeiten wird der Huffman-Baum erstellt und folgende Codes zugeordnet:</p> <ul> <li>A: <code>0</code></li> <li>B: <code>101</code></li> <li>R: <code>100</code></li> <li>C: <code>1110</code></li> <li>D: <code>1111</code></li> </ul> <p>Die Zeichenfolge \"ABRACADABRA\" wird somit zu: <pre><code>0 101 100 0 1110 0 1111 0 101 100 0\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Huffman-Codierung/#vorteile","title":"Vorteile","text":"<ul> <li>Effiziente Komprimierung: Optimal f\u00fcr die verlustfreie Komprimierung von Daten.</li> <li>Verlustfrei: Keine Informationen gehen bei der Komprimierung verloren.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Logarithmus/","title":"Logarithmus","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Logarithmus/#definition-und-grundkonzepte","title":"Definition und Grundkonzepte","text":"<p>[!info] Der Logarithmus ist die Umkehrfunktion der Exponentialfunktion.</p> <p>Exponentialfunktion: \\((2^3 = 2 \\times 2 \\times 2 = 8)\\)</p> <p>Logarithmus: \\(\\log_2(8)\\) - Frage: Wie oft muss ich 2 mit sich selbst multiplizieren, um 8 zu erhalten? - Antwort: 3 - Anwendung: Wie viele Bits braucht man f\u00fcr 8 verschiedene bin\u00e4re Zahlen (0...7)? - Antwort: 3</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Logarithmus/#beispiele-zur-verdeutlichung","title":"Beispiele zur Verdeutlichung","text":"<p>[!example]- Beispiel 1 - \\(2^6 = 2 \\times 2 \\times 2 \\times 2 \\times 2 \\times 2 = 64\\) - \\(\\log_2(64)\\)   - Frage: Wie oft muss ich 2 mit sich selbst multiplizieren, um 64 zu erhalten?   - Antwort: 6   - Anwendung: Wie viele Bits braucht man f\u00fcr 64 verschiedene bin\u00e4re Zahlen (0...63)?   - Antwort: 6</p> <p>[!example]- Beispiel 2 \\(\\log_2(8)\\): - Teilen wir 8 solange durch 2, bis wir 1 erhalten:   - \\(8 / 2 = 4\\)   - \\(4 / 2 = 2\\)   - \\(2 / 2 = 1\\) - Frage: Wie oft m\u00fcssen wir 8 halbieren, bis wir 1 erhalten? - Antwort: 3</p> <p>[!example]- Beispiel 3 \\(\\log_2(64)\\): - Teilen wir 64 solange durch 2, bis wir 1 erhalten:   - \\(64 / 2 = 32\\)   - \\(32 / 2 = 16\\)   - \\(16 / 2 = 8\\)   - \\(8 / 2 = 4\\)   - \\(4 / 2 = 2\\)   - \\(2 / 2 = 1\\) - Frage: Wie oft m\u00fcssen wir 64 halbieren, bis wir 1 erhalten? - Antwort: 6</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Logarithmus/#zusammenhang-mit-informatik-und-algorithmen","title":"Zusammenhang mit Informatik und Algorithmen","text":"<p>[!tip] Big O Notation: \\(O(\\log N)\\) - \\(O(\\log N)\\) ist die verk\u00fcrzte Ausdrucksform f\u00fcr \\(O(\\log_2 N)\\). - \\(O(\\log N)\\) bedeutet, dass ein Algorithmus f\u00fcr \\(N\\) Datenelemente \\(\\log_2 N\\)Schritte ben\u00f6tigt. - Beispiel:   - F\u00fcr \\(N = 8\\) Elemente ben\u00f6tigt der Algorithmus 3 Schritte, weil \\(\\log_2 8 = 3\\). - Erkl\u00e4rung:   - \\(O(\\log N)\\) bedeutet, dass der Algorithmus so viele Schritte ben\u00f6tigt, wie es dauert, die Datenelemente so lange zu halbieren, bis man bei der unteilbaren 1 ankommt.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Speicherkomplexit%C3%A4t%20und%20Speicherlimitationen/","title":"Speicherkomplexit\u00e4t und Speicherlimitationen","text":"<p>Bei der Effizienzanalyse von Algorithmen konzentriert man sich nicht nur auf die Laufzeitkosten, sondern auch auf den Speicherbedarf. Der Speicherbedarf ist besonders wichtig, wenn:</p> <ul> <li>Speicher knapp ist, beispielsweise auf Ger\u00e4ten mit begrenztem Speicher.</li> <li>Datenmengen sehr gro\u00df sind, wie im Fall von Big Data.</li> </ul> <p>Algorithmen sollten sowohl schnell als auch speichereffizient sein. Man muss jedoch entscheiden, ob man Geschwindigkeit \u00fcber Speicherverbrauch stellt oder umgekehrt.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Speicherkomplexit%C3%A4t%20und%20Speicherlimitationen/#big-o-notation-fur-speicherbedarf","title":"Big-O-Notation f\u00fcr Speicherbedarf","text":"<p>Neben der Zeitkomplexit\u00e4t, die beschreibt, wie viele Schritte ein Algorithmus bei einer bestimmten Anzahl von Datenelementen (N) ben\u00f6tigt, gibt es die Speicherkomplexit\u00e4t, die sich darauf konzentriert, wie viele Speichereinheiten ein Algorithmus zus\u00e4tzlich bei N Datenelementen ben\u00f6tigt.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Speicherkomplexit%C3%A4t%20und%20Speicherlimitationen/#beispiel-funktion-makeuppercase","title":"Beispiel: Funktion <code>MakeUppercase()</code>","text":"<p>Die Funktion <code>MakeUppercase()</code> nimmt ein Array von Strings und gibt ein neues Array zur\u00fcck, in dem alle Strings in Gro\u00dfbuchstaben konvertiert sind.</p> <ul> <li>Eingabe: <code>[\"fred\", \"anna\", \"oskar\", \"gerda\"]</code></li> <li>Ausgabe: <code>[\"FRED\", \"ANNA\", \"OSKAR\", \"GERDA\"]</code></li> </ul> <p>[!example]- \ud83d\udccc Beispiel in C#: <pre><code>string[] MakeUppercase(string[] inputArray)\n{\n    string[] resultArray = new string[inputArray.Length];\n    for (int i = 0; i &lt; inputArray.Length; i++)\n    {\n        resultArray[i] = inputArray[i].ToUpper();\n    }\n    return resultArray;\n}\n</code></pre> In diesem Fall werden zwei Arrays im Hauptspeicher gehalten: das Originalarray und das neu erzeugte Array. Der Gesamtspeicherbedarf ist proportional zur Menge der Eingangsdaten, also O(N).</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Speicherkomplexit%C3%A4t%20und%20Speicherlimitationen/#speichereffiziente-version-in-place","title":"Speichereffiziente Version (In-Place)","text":"<p>Eine speichereffizientere Variante verzichtet auf die Erzeugung eines neuen Arrays und modifiziert das \u00fcbergebene Array direkt (\"in place\").</p> <p>[!example]- \ud83d\udccc Beispiel in C#: <pre><code>void MakeUppercaseInPlace(string[] inputArray)\n{\n    for (int i = 0; i &lt; inputArray.Length; i++)\n    {\n        inputArray[i] = inputArray[i].ToUpper();\n    }\n}\n</code></pre> In dieser Version wird kein zus\u00e4tzlicher Speicher ben\u00f6tigt. Der Speicherbedarf ist konstant, also O(1).</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Speicherkomplexit%C3%A4t%20und%20Speicherlimitationen/#vergleich-der-implementierungen","title":"Vergleich der Implementierungen","text":"Version Zeitkomplexit\u00e4t Speicherkomplexit\u00e4t Version #1 O(N) O(N) Version #2 O(N) O(1)"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Speicherkomplexit%C3%A4t%20und%20Speicherlimitationen/#trade-offs-zwischen-zeit-und-speicher","title":"Trade-offs zwischen Zeit und Speicher","text":"<p>Manchmal muss man zwischen Zeit und Speicher abw\u00e4gen. Ein Algorithmus kann schneller sein, ben\u00f6tigt aber mehr Speicher, oder er ist langsamer, ben\u00f6tigt aber weniger Speicher.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Speicherkomplexit%C3%A4t%20und%20Speicherlimitationen/#beispiel-uberprufung-auf-duplikate-in-einem-array","title":"Beispiel: \u00dcberpr\u00fcfung auf Duplikate in einem Array","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Speicherkomplexit%C3%A4t%20und%20Speicherlimitationen/#version-1","title":"Version #1","text":"<ul> <li>Zeitkomplexit\u00e4t: O(N\u00b2) (verschachtelte Schleifen)</li> <li>Speicherkomplexit\u00e4t: O(1) (kein zus\u00e4tzlicher Speicher)</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Speicherkomplexit%C3%A4t%20und%20Speicherlimitationen/#version-2","title":"Version #2","text":"<ul> <li>Zeitkomplexit\u00e4t: O(N) (eine Schleife und ein zus\u00e4tzliches Array)</li> <li>Speicherkomplexit\u00e4t: O(M), wobei M der Wertebereich des Arrays ist.</li> </ul> <p>[!example]- \ud83d\udccc Beispiel in C#: <pre><code>// Version #1: Ineffizient aber speicherschonend\nbool ContainsDuplicates(string[] array)\n{\n    for (int i = 0; i &lt; array.Length; i++)\n    {\n        for (int j = i + 1; j &lt; array.Length; j++)\n        {\n            if (array[i] == array[j])\n                return true;\n        }\n    }\n    return false;\n}\n\n// Version #2: Effizient aber speicherintensiver\nbool ContainsDuplicatesEfficient(string[] array)\n{\n    var set = new HashSet&lt;string&gt;();\n    foreach (var item in array)\n    {\n        if (set.Contains(item))\n            return true;\n        set.Add(item);\n    }\n    return false;\n}\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Speicherkomplexit%C3%A4t%20und%20Speicherlimitationen/#effizienz-der-verschiedenen-versionen","title":"Effizienz der verschiedenen Versionen","text":"Version Zeitkomplexit\u00e4t Speicherkomplexit\u00e4t Version #1 O(N\u00b2) O(1) Version #2 O(N) O(M) Version #3 O(N log N + N) O(log N) <ul> <li>Version #2 ist optimal, wenn Geschwindigkeit ben\u00f6tigt wird und der maximale Wertebereich bekannt und handhabbar ist.</li> <li>Version #1 ist optimal, wenn der Speicher knapp ist oder der Wertebereich sehr gro\u00df oder unbekannt ist.</li> <li>Version #3 bietet einen guten Kompromiss zwischen Zeit und Platz.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Speicherkomplexit%C3%A4t%20und%20Speicherlimitationen/#sortierung-groer-externer-datenmengen","title":"Sortierung gro\u00dfer, externer Datenmengen","text":"<p>Bei der Sortierung externer Daten kann nicht die gesamte Datenmenge gleichzeitig in den Speicher geladen werden. Stattdessen werden Teilmengen sortiert, was zus\u00e4tzliche Strategien wie \"Divide and Conquer\" (Teile, Sortiere und Erobere) erfordert. Dieser Ansatz erlaubt auch eine Parallelisierung auf mehrere Rechenkerne, wodurch die Effizienz weiter gesteigert werden kann.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Theoretische%20Informatik/","title":"Theoretische Informatik","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Theoretische%20Informatik/#allgemeine-informationen","title":"Allgemeine Informationen","text":"<p>Sedgewick, Robert: Algorithmen, Pearson Verlag 2014</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Theoretische%20Informatik/#klausur-themen","title":"Klausur Themen","text":"<p>90 Minuten Klausur \u2192 90 Punkte 45 Punkte um zu bestehen Schriftlich auf Papier Bleistift mitnehmen + Radirgummi Keinen Lauft\u00fcchtigen Code. Irgendeinen Verst\u00e4ndlichen Code</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Theoretische%20Informatik/#termine","title":"Termine","text":"<p>27.09.2024 \u2192 Klausur</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Algorithmen/","title":"Algorithmen","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Algorithmen/#ihre-rolle","title":"Ihre Rolle","text":"<p>Die richtig gew\u00e4hlte Datenstruktur kann die Performance Ihres Codes signifikant beeinflussen. Doch selbst wenn die optimale Datenstruktur gew\u00e4hlt wurde, gibt es einen weiteren entscheidenden Faktor f\u00fcr die Effizienz des Codes: die Auswahl des passenden Algorithmus.</p> <ul> <li>Definition eines Algorithmus: Ein Algorithmus ist \u201e... eine wiederholbare Handlungsanweisung f\u00fcr einen Computer auf einer Menge von Eingangsdaten\u201c.</li> <li>Ziel eines Algorithmus: Ein Algorithmus l\u00f6st ein definiertes Problem, wobei das Ergebnis bestimmten Kriterien entsprechen muss.</li> <li>Vielfalt der L\u00f6sungen: Oftmals kann ein Problem durch mehrere verschiedene Algorithmen gel\u00f6st werden.</li> <li>Effizienz auf Datenstrukturen: Die Effizienz eines Algorithmus kann stark variieren, je nachdem, welche Datenstruktur verwendet wird. Ein Algorithmus kann auf einer Datenstruktur schneller oder effizienter sein als ein anderer.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Bubble%20Sort/","title":"Bubble Sort","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Bubble%20Sort/#einleitung","title":"Einleitung","text":"<p>Bubble Sort ist ein einfacher Vergleichs-basierter Sortieralgorithmus. Der Algorithmus arbeitet, indem er wiederholt benachbarte Elemente der Liste vergleicht und vertauscht, wenn sie in der falschen Reihenfolge sind. Dieser Prozess wird so lange wiederholt, bis die Liste sortiert ist.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Bubble%20Sort/#funktionsweise","title":"Funktionsweise","text":"<p>[!info]  Der Name \"Bubble Sort\" kommt von der Art und Weise, wie gr\u00f6\u00dfere Elemente durch die Liste \"aufsteigen\", \u00e4hnlich wie Blasen in einer Fl\u00fcssigkeit aufsteigen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Bubble%20Sort/#algorithmus-schritte","title":"Algorithmus-Schritte","text":"<ol> <li>Durchlaufe die Liste von Anfang bis Ende.</li> <li>Vergleiche jedes Paar benachbarter Elemente.</li> <li>Vertausche die Elemente, wenn sie in der falschen Reihenfolge sind (das gr\u00f6\u00dfere Element wird nach rechts verschoben).</li> <li>Wiederhole die Schritte 1-3, bis keine Vertauschungen mehr notwendig sind (die Liste ist sortiert).</li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Bubble%20Sort/#komplexitat","title":"Komplexit\u00e4t","text":"<ul> <li>Best Case: \\(O(n)\\) (Die Liste ist bereits sortiert)</li> <li>Average Case: \\(O(n^2)\\)</li> <li>Worst Case: \\(O(n^2)\\) (Die Liste ist in umgekehrter Reihenfolge sortiert)</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Bubble%20Sort/#implementierung","title":"Implementierung","text":"<p>[!code]- Implementierung ```csharp using System;</p> <p>public class Program {    // Auswahl-Sortieralgorithmus    void SelectionSort(int[] array)    {        int n = array.Length;</p> <pre><code>   for (int i = 0; i &lt; n - 1; i++)\n   {\n       // Finde das Minimum im unsortierten Bereich\n       int minIndex = i;\n       for (int j = i + 1; j &lt; n; j++)\n       {\n           if (array[j] &lt; array[minIndex])\n           {\n               minIndex = j;\n           }\n       }\n\n       // Tausche das gefundene Minimum mit dem ersten unsortierten Element\n       if (minIndex != i)\n       {\n           int temp = array[i];\n           array[i] = array[minIndex];\n           array[minIndex] = temp;\n       }\n   }\n</code></pre> <p>}</p> <p>public static void Main()    {        int[] array = { 64, 25, 12, 22, 11 };        Program program = new Program();</p> <pre><code>   Console.WriteLine(\"Unsortiertes Array:\");\n   Console.WriteLine(string.Join(\", \", array));\n\n   program.SelectionSort(array);\n\n   Console.WriteLine(\"Sortiertes Array:\");\n   Console.WriteLine(string.Join(\", \", array));\n</code></pre> <p>} } ```</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Bubble%20Sort/#video","title":"Video","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Counting%20Sort/","title":"Counting Sort","text":"<p>Counting Sort ist ein nichtvergleichendes Sortierverfahren, das in Linearzeit arbeitet, also eine Zeitkomplexit\u00e4t von O(n + k) hat. Es eignet sich besonders f\u00fcr die Sortierung von nat\u00fcrlichen Zahlen innerhalb eines begrenzten Intervalls, wie zum Beispiel Alter oder Distanzen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Counting%20Sort/#eigenschaften-von-counting-sort","title":"Eigenschaften von Counting Sort","text":"<ul> <li>Nichtvergleichendes Sortieren: Counting Sort verzichtet auf direkte Vergleiche zwischen den zu sortierenden Elementen.</li> <li>Lineare Laufzeit: Die Zeitkomplexit\u00e4t betr\u00e4gt O(n + k), wobei <code>n</code> die Anzahl der zu sortierenden Elemente und <code>k</code> der Wertebereich der Schl\u00fcssel ist.</li> <li>Speicherbedarf: Der Speicherbedarf betr\u00e4gt O(k), da ein zus\u00e4tzliches Arbeitsarray (eine Art Hashtabelle) f\u00fcr die Z\u00e4hlung der Elemente ben\u00f6tigt wird.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Counting%20Sort/#funktionsweise","title":"Funktionsweise","text":"<p>Die grundlegende Idee von Counting Sort besteht darin, f\u00fcr jedes Element des Eingabearrays <code>A</code> die H\u00e4ufigkeit jedes Werts zu z\u00e4hlen und diese in einem Arbeitsarray <code>C</code> zu speichern. Anschlie\u00dfend wird dieses Z\u00e4hlarray verwendet, um die Elemente in das sortierte Ausgabearray <code>B</code> zu platzieren.</p> <ol> <li>Initialisierung: Erstelle ein Z\u00e4hlarray <code>C[0..k]</code> und setze alle Elemente auf 0.</li> <li>Z\u00e4hlen: Durchlaufe das Eingabearray <code>A</code> und erh\u00f6he f\u00fcr jeden Wert den entsprechenden Z\u00e4hler in <code>C</code>.</li> <li>Kumulatives Z\u00e4hlen: Transformiere das Z\u00e4hlarray <code>C</code>, sodass jedes Element die Summe der vorherigen Z\u00e4hlwerte enth\u00e4lt. Dies hilft, die korrekte Position eines jeden Elements im Ausgabearray <code>B</code> zu bestimmen.</li> <li>Sortierung: Durchlaufe das Eingabearray <code>A</code> erneut und platziere jedes Element basierend auf den kumulierten Z\u00e4hlwerten in das Ausgabearray <code>B</code>.</li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Counting%20Sort/#beispiel-in-c","title":"Beispiel in C","text":"<p>[!example]-  <pre><code>using System;  \n \npublic class CountingSortExample  \n{  \n    public static void CountingSort(int[] array)  \n    {  \n        int max = array.Max();  \n        int[] count = new int[max + 1];  \n        int[] output = new int[array.Length];  \n \n        // Z\u00e4hlen der Vorkommen jedes Elements  \n        for (int i = 0; i &lt; array.Length; i++)  \n        {  \n            count[array[i]]++;  \n        }  \n \n        // Kumulatives Z\u00e4hlen  \n        for (int i = 1; i &lt;= max; i++)  \n        {  \n            count[i] += count[i - 1];  \n        }  \n \n        // Sortieren der Elemente  \n        for (int i = array.Length - 1; i &gt;= 0; i--)  \n        {  \n            output[count[array[i]] - 1] = array[i];  \n            count[array[i]]--;  \n        }  \n \n        // Kopieren des sortierten Arrays  \n        for (int i = 0; i &lt; array.Length; i++)  \n        {  \n            array[i] = output[i];  \n        }  \n    }  \n \n    public static void Main()  \n    {  \n        int[] array = { 4, 2, 2, 8, 3, 3, 1 };  \n        CountingSort(array);  \n        Console.WriteLine(\"Sortiertes Array: \" + string.Join(\", \", array));  \n    }  \n}  \n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Counting%20Sort/#vor-und-nachteile","title":"Vor- und Nachteile","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Counting%20Sort/#vorteile","title":"Vorteile","text":"<ul> <li>Effizient f\u00fcr begrenzte Wertebereiche: Der Speicherbedarf ist nur abh\u00e4ngig vom Intervall der zu sortierenden Werte, was es effizient macht, wenn der Wertebereich klein ist.</li> <li>Lineare Laufzeit: Counting Sort kann in Linearzeit arbeiten, wenn der Wertebereich <code>k</code> im Verh\u00e4ltnis zu <code>n</code> klein ist.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Counting%20Sort/#nachteile","title":"Nachteile","text":"<ul> <li>Begrenzte Anwendung: Nicht geeignet f\u00fcr gro\u00dfe Wertebereiche, da der Speicherbedarf stark ansteigt.</li> <li>Kompositdaten: Die Sortierung kompositer Daten (wie Tupel oder Objekte) ist m\u00f6glich, aber erfordert zus\u00e4tzlichen Aufwand und ist daher langsamer.</li> </ul> <p>Counting Sort ist daher besonders gut geeignet, wenn die zu sortierenden Daten einen kleinen Wertebereich haben und eine schnelle, lineare Sortierung gew\u00fcnscht wird.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Insertion%20Sort/","title":"Insertion Sort","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Insertion%20Sort/#idee","title":"Idee","text":"<p>Insertion Sort ist ein einfacher Sortieralgorithmus, der Elemente nacheinander in eine sortierte Liste einf\u00fcgt. Man kann sich den Vorgang wie das Sortieren von Karten oder B\u00fcchern vorstellen:</p> <ol> <li> <p>Kartenbeispiel: Stellen Sie sich vor, Sie haben eine Hand von Karten, die bereits sortiert ist. Eine neue Karte wird aus einem Stapel entnommen und an der richtigen Stelle in der sortierten Hand eingef\u00fcgt. Dies wiederholt sich, bis alle Karten sortiert sind.</p> </li> <li> <p>B\u00fccherregal: Wenn Sie ein neues Buch aus dem Regal nehmen, f\u00fcgen Sie es an der richtigen Stelle in einem bereits sortierten Regal ein.</p> </li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Insertion%20Sort/#algorithmus","title":"Algorithmus","text":"<p>Schritte zur Durchf\u00fchrung von Insertion Sort:</p> <ol> <li> <p>Entfernung und Speicherung: Entfernen Sie den Wert am aktuellen Index und speichern Sie ihn in einer tempor\u00e4ren Variable. Dies schafft eine L\u00fccke an diesem Index.</p> </li> <li> <p>Schiebephase: Verschieben Sie alle Werte links von der L\u00fccke nach rechts, bis Sie den richtigen Platz f\u00fcr die tempor\u00e4re Variable finden oder das Ende des Arrays erreichen.</p> </li> <li> <p>Einf\u00fcgen: F\u00fcgen Sie die tempor\u00e4r gespeicherte Variable an der gefundenen Stelle ein.</p> </li> <li> <p>Wiederholung: Wiederholen Sie die Schritte 1 bis 3, bis das gesamte Array sortiert ist.</p> </li> </ol> <p></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Insertion%20Sort/#implementierung","title":"Implementierung","text":"<p>[!code]- C# Beispiel: Insertion Sort</p> <pre><code>// Insertion Sort Implementierung in C#\npublic class InsertionSort\n{\n    public static void Sort(int[] array)\n    {\n        int n = array.Length;\n        for (int i = 1; i &lt; n; i++)\n        {\n            int key = array[i];\n            int j = i - 1;\n\n            // Verschieben der Elemente\n            while (j &gt;= 0 &amp;&amp; array[j] &gt; key)\n            {\n                array[j + 1] = array[j];\n                j--;\n            }\n            array[j + 1] = key;\n        }\n    }\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Insertion%20Sort/#effizienz","title":"Effizienz","text":"<p>Insertion Sort besteht aus folgenden Typen von Schritten:</p> <ul> <li>Vergleiche: Jeder Wert wird mit allen vorherigen Werten verglichen. Im schlechtesten Fall f\u00fchrt dies zu <code>N^2/2</code> Vergleichen.</li> <li>Verschiebungen: Werte m\u00fcssen m\u00f6glicherweise verschoben werden, was ebenfalls zu <code>N^2/2</code> Verschiebungen im schlechtesten Fall f\u00fchrt.</li> <li>Zwischenspeicherung und Einf\u00fcgen: Beide Operationen finden einmal pro Durchlauf statt, also <code>N-1</code> Durchl\u00e4ufe, was zu <code>2N - 2</code> Schritten f\u00fchrt.</li> </ul> <p>Gesamtkomplexit\u00e4t: Worst-Case: <code>O(N^2)</code>. Dies bedeutet, dass Insertion Sort die gleiche Zeitkomplexit\u00e4t wie Bubble Sort und Selection Sort im schlechtesten Fall hat.</p> <p>[!info] Hinweis: Bei der Big-O-Notation betrachten wir nur die h\u00f6chste Ordnung, daher wird der Ausdruck <code>O(N^2 + 2N - 2)</code> vereinfacht zu <code>O(N^2)</code>.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Insertion%20Sort/#vergleich-mit-anderen-sortieralgorithmen","title":"Vergleich mit anderen Sortieralgorithmen","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Insertion%20Sort/#bubble-sort-vs-insertion-sort","title":"Bubble Sort vs. Insertion Sort","text":"Algorithmus Worst Case Best Case Average Case Bubble Sort <code>O(N^2)</code> <code>O(N)</code> <code>O(N^2)</code> Insertion Sort <code>O(N^2)</code> <code>O(N)</code> <code>O(N^2)</code> <ul> <li>Worst Case: Beide Algorithmen haben <code>N^2</code> Schritte.</li> <li>Best Case: Insertion Sort ben\u00f6tigt nur <code>N</code> Schritte, wenn das Array bereits sortiert ist.</li> <li>Average Case: Beide Algorithmen haben eine durchschnittliche Zeitkomplexit\u00e4t von <code>N^2/2</code> Schritten.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Insertion%20Sort/#selection-sort-vs-insertion-sort","title":"Selection Sort vs. Insertion Sort","text":"Algorithmus Worst Case Best Case Average Case Selection Sort <code>O(N^2)</code> <code>O(N^2)</code> <code>O(N^2)</code> Insertion Sort <code>O(N^2)</code> <code>O(N)</code> <code>O(N^2)</code> <ul> <li>Worst Case: Selection Sort hat <code>N^2/2</code> Schritte, w\u00e4hrend Insertion Sort <code>N^2</code> Schritte ben\u00f6tigt.</li> <li>Best Case: Insertion Sort hat eine bessere Leistung bei einem bereits sortierten Array.</li> <li>Average Case: Beide Algorithmen haben \u00e4hnliche durchschnittliche Zeitkomplexit\u00e4ten.</li> </ul> <p>[!info] Empfehlung:  Insertion Sort ist effizienter, wenn die Daten nahezu sortiert sind. Selection Sort ist besser, wenn die Daten weitgehend unsortiert sind und die Anzahl der Vergleiche reduziert werden soll.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Komplexit%C3%A4t%20von%20Sortierverfahren/","title":"Komplexit\u00e4t von Sortierverfahren","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Komplexit%C3%A4tsklassen/","title":"Komplexit\u00e4tsklassen","text":"Klasse Art der Komplexit\u00e4t Beispiel O(1) Die Rechenzeit ist unabh\u00e4ngig von der Problemgr\u00f6\u00dfe. Sequenz O(log n) Die Rechenzeit w\u00e4chst logarithmisch (Basis 2) mit der Problemgr\u00f6\u00dfe. H\u00e4ufig bei Zerlegung eines Problems in Teilprobleme und Berechnung eines Teilproblems (z.B. bin\u00e4re Suche) O(n) Die Rechenzeit w\u00e4chst linear mit der Problemgr\u00f6\u00dfe. Abarbeitung eines eindimensionalen Arrays \u00fcber den Eingabedatenbereich (z.B. lineare Suche) O(n log n) Die Rechenzeit w\u00e4chst linear logarithmisch (Basis 2) mit der Problemgr\u00f6\u00dfe. H\u00e4ufig bei Zerlegung eines Problems in Teilprobleme und Berechnung aller Teilprobleme O(n\u00b2) Die Rechenzeit w\u00e4chst quadratisch mit der Problemgr\u00f6\u00dfe. Einfache Sortieralgorithmen (z.B. Bubble Sort), Abarbeiten von 2-D Strukturen O(n\u00b3) Die Rechenzeit w\u00e4chst kubisch mit der Problemgr\u00f6\u00dfe. Z.B. Matrixmultiplikation, Abarbeiten von 3-D Strukturen O(\\(2^n\\)) Die Rechenzeit w\u00e4chst exponentiell mit der Problemgr\u00f6\u00dfe. Typisch f\u00fcr kombinatorische Aufgaben (z.B. T\u00fcrme von Hanoi) O(n!) Abarbeitung aller Permutationen. Wegl\u00e4ngenbestimmung in B\u00e4umen"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Merge%20Sort/","title":"Merge Sort","text":"<p>MergeSort ist ein effizienter, vergleichsbasierter Sortieralgorithmus, der nach dem Divide-and-Conquer-Prinzip arbeitet. Er ist besonders geeignet f\u00fcr die externe Sortierung gro\u00dfer Datenmengen und bekannt f\u00fcr seine Stabilit\u00e4t und Parallelisierbarkeit.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Merge%20Sort/#grundidee","title":"Grundidee","text":"<ol> <li>Teilen: Der Eingangsstapel (die zu sortierende Liste) wird in zwei m\u00f6glichst gleich gro\u00dfe Teile geteilt.</li> <li>Rekursive Sortierung: Jeder Teil wird einem Helfer gegeben, der das gleiche Verfahren rekursiv anwendet.</li> <li>Mischen: Sobald die Helfer die sortierten Teillisten zur\u00fcckgeben, werden diese im \"Rei\u00dfverschlussprinzip\" (Merge) zu einer einzigen sortierten Gesamtliste zusammengef\u00fcgt.</li> </ol> <p>[!info]- \ud83d\udccc Veranschaulichung:  Man wartet, bis beide H\u00e4lften sortiert sind, und kombiniert sie dann, indem man die jeweils kleinste verbleibende Karte (Element) ausw\u00e4hlt und zum Ergebnisstapel (sortierte Liste) hinzuf\u00fcgt.</p> <p></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Merge%20Sort/#eigenschaften-von-mergesort","title":"Eigenschaften von MergeSort","text":"<ul> <li>Divide &amp; Conquer: Der Algorithmus teilt das Problem in kleinere Unterprobleme, l\u00f6st diese rekursiv und kombiniert die L\u00f6sungen.</li> <li>Vergleichsbasiert: Die Sortierung erfolgt durch Vergleiche der Elemente.</li> <li>Zeitkomplexit\u00e4t: O(n log(n)) im Worst-Case.</li> <li>Speicherbedarf: O(n) zus\u00e4tzlich \u2014 MergeSort ist kein in-place Algorithmus, da er zus\u00e4tzlichen Speicher ben\u00f6tigt, um die Teillisten zu speichern.</li> <li>Stabil: Die Reihenfolge gleichwertiger Elemente bleibt erhalten.</li> <li>Parallelisierbar: Teile des Algorithmus k\u00f6nnen parallel ausgef\u00fchrt werden, was die Performance auf Mehrkernsystemen steigern kann.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Merge%20Sort/#implementierung","title":"Implementierung","text":"<p>MergeSort kann sowohl f\u00fcr interne als auch f\u00fcr externe Sortierungen verwendet werden:</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Merge%20Sort/#interne-sortierung","title":"Interne Sortierung","text":"<ul> <li>Der gesamte Datensatz passt in den Hauptspeicher und wird dort sortiert.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Merge%20Sort/#externe-sortierung-external-memory-mergesort","title":"Externe Sortierung (External Memory MergeSort)","text":"<ul> <li>Bl\u00f6cke im Hauptspeicher sortieren: Einzelne Bl\u00f6cke von Daten werden in den Hauptspeicher geladen, dort sortiert und wieder auf den externen Speicher (z.B. Dateien) geschrieben.</li> <li>K-Way-Merges: Die sortierten Bl\u00f6cke werden dann durch K-Way-Merges kombiniert, wobei die Daten sofort zur\u00fcckgeschrieben werden.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Merge%20Sort/#rekursionskosten-und-speicherbedarf","title":"Rekursionskosten und Speicherbedarf","text":"<p>Obwohl MergeSort selbst O(n) zus\u00e4tzlichen Speicherplatz ben\u00f6tigt, sind bei der Implementierung rekursive Aufrufe erforderlich, die Platz auf dem Stack belegen. Diese versteckten Kosten k\u00f6nnen insbesondere bei gro\u00dfen Datenmengen oder tiefen Rekursionen (z.B. bei einem sehr langen Sortierprozess) eine Rolle spielen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Merge%20Sort/#beispiel-rekursive-funktionen","title":"Beispiel: Rekursive Funktionen","text":"<p>Eine einfache rekursive Funktion, die eine Zahl von N herunterz\u00e4hlt, hat eine Zeitkomplexit\u00e4t von O(N), ben\u00f6tigt aber auch O(N) Speicherplatz f\u00fcr den Aufrufstack. Der Speicherbedarf w\u00e4chst mit der Anzahl der rekursiven Aufrufe.</p> <ul> <li>Stack Limits: Die maximale Stacktiefe ist oft begrenzt; zu viele rekursive Aufrufe f\u00fchren zu einem Stack Overflow.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Merge%20Sort/#vergleich-mit-nicht-rekursiven-ansatzen","title":"Vergleich mit nicht-rekursiven Ans\u00e4tzen","text":"<p>Ein Ansatz mit einer einfachen Schleife, der die gleiche Aufgabe erf\u00fcllt (z.B. den Countdown einer Zahl), hat eine Speicherkomplexit\u00e4t von O(1), da keine zus\u00e4tzlichen Stack-Speicher ben\u00f6tigt werden.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Merge%20Sort/#speicherbedarf-von-sortieralgorithmen","title":"Speicherbedarf von Sortieralgorithmen","text":"<p>Unterschiedliche Sortieralgorithmen haben unterschiedliche Speicheranforderungen, die oft in Bezug auf den verwendeten Speicher betrachtet werden:</p> <ul> <li>Intern (In-Place): Der Algorithmus ben\u00f6tigt nur eine konstante Menge an zus\u00e4tzlichem Speicher. Alle Datenelemente sind bekannt und im Hauptspeicher verf\u00fcgbar.</li> <li>Extern: Der Algorithmus muss mit Daten umgehen, die nicht vollst\u00e4ndig in den Hauptspeicher passen. Nur ein Teil der Daten ist zu einem Zeitpunkt bekannt, und der Algorithmus verwendet externe Speicher (wie Festplatten), um die Daten zu sortieren.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Quicksort/","title":"Quicksort","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Quicksort/#allgemein","title":"Allgemein","text":"<ul> <li>Ist ein extrem schneller Sortieralgorrithmus, besonders effizient f\u00fcr Average Szenarien</li> <li>Performed in Worst-Case Szenarien gleich zu Insertion und Selection Sort</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Quicksort/#effizenz","title":"Effizenz","text":"<ul> <li>Best Case: O(n log n)</li> <li>Average Case: O(n log n)</li> <li>Worst Case: O(n\u00b2)</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Quicksort/#code-beispiel","title":"Code-Beispiel","text":"<pre><code>using System;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        int[] array = { 34, 7, 23, 32, 5, 62 };\n        Console.WriteLine(\"Unsortiertes Array:\");\n        PrintArray(array);\n\n        QuickSort(array, 0, array.Length - 1);\n\n        Console.WriteLine(\"\\nSortiertes Array:\");\n        PrintArray(array);\n    }\n\n    static void QuickSort(int[] array, int low, int high)\n    {\n        if (low &lt; high)\n        {\n            int pivotIndex = Partition(array, low, high);\n            QuickSort(array, low, pivotIndex - 1);\n            QuickSort(array, pivotIndex + 1, high);\n        }\n    }\n\n    static int Partition(int[] array, int low, int high)\n    {\n        int pivot = array[high];\n        int i = (low - 1);\n\n        for (int j = low; j &lt; high; j++)\n        {\n            if (array[j] &lt; pivot)\n            {\n                i++;\n                Swap(array, i, j);\n            }\n        }\n\n        Swap(array, i + 1, high);\n        return i + 1;\n    }\n\n    static void Swap(int[] array, int a, int b)\n    {\n        int temp = array[a];\n        array[a] = array[b];\n        array[b] = temp;\n    }\n\n    static void PrintArray(int[] array)\n    {\n        foreach (var item in array)\n        {\n            Console.Write(item + \" \");\n        }\n        Console.WriteLine();\n    }\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Selection%20Sort/","title":"Selection Sort","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Selection%20Sort/#idee","title":"Idee","text":"<p>Der Selection Sort Algorithmus basiert auf dem Prinzip, in jedem Durchlauf das kleinste Element im unsortierten Bereich zu finden und es an die erste Position des unsortierten Bereichs zu verschieben. Dies wird wiederholt, bis der gesamte Bereich sortiert ist.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Selection%20Sort/#vorgehensweise","title":"Vorgehensweise","text":"<ol> <li> <p>Finde das kleinste Element:</p> <ul> <li>Durchlaufe den unsortierten Teil des Arrays (von der aktuellen Position bis zum Ende) und finde das kleinste Element.</li> <li> <p>Tausche das kleinste Element:</p> </li> <li> <p>Tausche das gefundene kleinste Element mit dem ersten Element des unsortierten Teils.</p> </li> <li> <p>Wiederhole den Vorgang:</p> </li> <li> <p>Bewege die Grenze des sortierten Bereichs einen Schritt weiter und wiederhole die Schritte 1 und 2, bis der gesamte Array sortiert ist.</p> </li> </ul> </li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Selection%20Sort/#zeitkomplexitat","title":"Zeitkomplexit\u00e4t","text":"<ul> <li>Vergleiche: \\(O(N^2)\\)</li> <li>Vertauschungen: \\(O(N)\\)</li> </ul> <p>Die gesamte Zeitkomplexit\u00e4t ist daher \\(O(N2)\\)</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Selection%20Sort/#implementation","title":"Implementation","text":"<p>[!code]- Implementation ```csharp void SelectionSort(int[] array) {    int n = array.Length;</p> <p>for (int i = 0; i &lt; n - 1; i++)    {        // Finde das Minimum im unsortierten Bereich        int minIndex = i;        for (int j = i + 1; j &lt; n; j++)        {            if (array[j] &lt; array[minIndex])            {                minIndex = j;            }        }</p> <pre><code>   // Tausche das gefundene Minimum mit dem ersten unsortierten Element\n   if (minIndex != i)\n   {\n       int temp = array[i];\n       array[i] = array[minIndex];\n       array[minIndex] = temp;\n   }\n</code></pre> <p>} } ```</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Algorithmen/Selection%20Sort/#video","title":"Video","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Char/","title":"Char","text":"<p>In C ist <code>char</code> ein Datentyp, der verwendet wird, um einzelne Zeichen zu speichern. Hier sind einige wichtige Punkte:</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Char/#groe-und-speicherung","title":"Gr\u00f6\u00dfe und Speicherung \ud83d\udccf","text":"<p>Typischerweise belegt ein <code>char</code> 1 Byte (8 Bit) im Speicher. Die Gr\u00f6\u00dfe kann je nach Plattform variieren, aber 1 Byte ist am h\u00e4ufigsten.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Char/#zeichenreprasentation","title":"Zeichenrepr\u00e4sentation \ud83d\udd21","text":"<p>Eine <code>char</code>-Variable kann jedes einzelne Zeichen aus der ASCII-Tabelle speichern, einschlie\u00dflich Buchstaben, Ziffern, Satzzeichen und Steuerzeichen. Zum Beispiel: <code>char c = 'A';</code> speichert das Zeichen 'A' in der Variable <code>c</code>.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Char/#zeichenliterale","title":"Zeichenliterale \ud83d\udcdc","text":"<p>Zeichenliterale sind in einfache Anf\u00fchrungszeichen eingeschlossen. Beispiele sind: <code>'a'</code>, <code>'1'</code>, <code>'$', '</code>.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Char/#ganzzahlige-reprasentation","title":"Ganzzahlige Repr\u00e4sentation \ud83d\udd22","text":"<p>Intern werden Zeichen durch Ganzzahlen gem\u00e4\u00df ihren ASCII-Codes repr\u00e4sentiert. Zum Beispiel wird <code>'A'</code> durch die Ganzzahl 65 im ASCII-Code dargestellt.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Char/#zeichenarrays-und-strings","title":"Zeichenarrays und Strings \ud83e\udde9","text":"<p>Eine Folge von Zeichen wird in einem <code>char</code>-Array gespeichert und oft verwendet, um Strings darzustellen. In C sind Strings nullterminiert, was bedeutet, dass sie mit einem speziellen Zeichen <code>'\\0'</code> enden, um das Ende des Strings anzuzeigen. Zum Beispiel: <code>char str[] = \"Hallo\";</code> stellt den String \"Hallo\" mit einem impliziten Nullterminator am Ende dar.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Char/#modifizierer","title":"Modifizierer \u2699\ufe0f","text":"<p>Der <code>char</code>-Datentyp kann mit den Schl\u00fcsselw\u00f6rtern <code>signed</code> oder <code>unsigned</code> modifiziert werden. Standardm\u00e4\u00dfig kann <code>char</code> je nach Compiler entweder vorzeichenbehaftet (<code>signed</code>) oder vorzeichenlos (<code>unsigned</code>) sein. <code>signed char</code> kann Werte von -128 bis 127 speichern, w\u00e4hrend <code>unsigned char</code> Werte von 0 bis 255 speichern kann.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Double/","title":"Double","text":"<p>In C ist <code>double</code> ein Datentyp, der verwendet wird, um Flie\u00dfkommazahlen (Dezimalzahlen) mit doppelter Genauigkeit zu speichern. Hier sind einige wichtige Punkte zum <code>double</code>-Datentyp:</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Double/#eigenschaften-von-double","title":"Eigenschaften von <code>double</code> \ud83e\uddfe","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Double/#groe-und-speicherplatz","title":"Gr\u00f6\u00dfe und Speicherplatz \ud83d\udcbe:","text":"<p>Typischerweise belegt ein <code>double</code> 8 Bytes (64 Bit) im Speicher. Diese Gr\u00f6\u00dfe kann je nach Plattform und Compiler variieren, aber 8 Bytes sind am h\u00e4ufigsten.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Double/#wertbereich","title":"Wertbereich \ud83c\udf08:","text":"<p>Der Wertbereich eines <code>double</code> reicht normalerweise von ungef\u00e4hr <code>5.0 \u00d7 10^\u2212324</code> bis <code>1.7 \u00d7 10^308</code>. Die genauen Werte k\u00f6nnen je nach Implementierung variieren.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Double/#genauigkeit","title":"Genauigkeit \ud83d\udd0d:","text":"<p>Ein <code>double</code> hat eine ungef\u00e4hre Pr\u00e4zision von 15 bis 16 Dezimalstellen. Das bedeutet, dass <code>double</code>-Werte bis zu etwa 15 signifikante Ziffern genau darstellen k\u00f6nnen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Double/#verwendung","title":"Verwendung \ud83d\udee0\ufe0f:","text":"<p><code>double</code> wird verwendet, wenn du Flie\u00dfkommazahlen mit h\u00f6herer Genauigkeit ben\u00f6tigst als die, die von <code>float</code> bereitgestellt wird. Es ist n\u00fctzlich in wissenschaftlichen Berechnungen, finanziellen Anwendungen und anderen Kontexten, wo h\u00f6here Pr\u00e4zision erforderlich ist.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Double/#formatierung","title":"Formatierung \u2699\ufe0f:","text":"<p>Beim Drucken von <code>double</code>-Werten in C kannst du den Formatbezeichner <code>%lf</code> verwenden. F\u00fcr wissenschaftliche Notation kannst du <code>%e</code> verwenden.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Float/","title":"Float","text":"<p>In C ist <code>float</code> ein Datentyp, der verwendet wird, um Flie\u00dfkommazahlen (also Dezimalzahlen) mit einfacher Genauigkeit zu speichern. Hier sind einige wichtige Punkte zum <code>float</code>-Datentyp:</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Float/#eigenschaften-von-float","title":"Eigenschaften von <code>float</code> \ud83e\uddfe","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Float/#groe-und-speicherplatz","title":"Gr\u00f6\u00dfe und Speicherplatz \ud83d\udcbe:","text":"<p>Typischerweise belegt ein <code>float</code> 4 Bytes (32 Bit) im Speicher. Diese Gr\u00f6\u00dfe kann je nach Plattform variieren, aber 4 Bytes sind am h\u00e4ufigsten.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Float/#wertbereich","title":"Wertbereich \ud83c\udf08:","text":"<p>Der Wertbereich eines <code>float</code> reicht normalerweise von ungef\u00e4hr <code>1.5 \u00d7 10^\u221245</code> bis <code>3.4 \u00d7 10^38</code>. Die genauen Werte k\u00f6nnen je nach Implementierung variieren.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Float/#genauigkeit","title":"Genauigkeit \ud83d\udd0d:","text":"<p>Ein <code>float</code> hat eine ungef\u00e4hre Pr\u00e4zision von 6 bis 7 Dezimalstellen. Das bedeutet, dass es bis zu etwa 7 signifikante Ziffern darstellen kann, bevor Genauigkeitsprobleme auftreten.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Float/#verwendung","title":"Verwendung \ud83d\udee0\ufe0f:","text":"<p><code>float</code> wird verwendet, wenn du Gleitkommazahlen mit einfacher Genauigkeit ben\u00f6tigst und Speicherplatz sparen m\u00f6chtest. Es wird oft in wissenschaftlichen Berechnungen, Grafikprogrammierung und allgemeinen Anwendungen verwendet, wo die Genauigkeit von Gleitkommazahlen erforderlich ist.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Float/#formatierung","title":"Formatierung \u2699\ufe0f:","text":"<p>Beim Drucken von <code>float</code>-Werten in C kannst du den Formatbezeichner <code>%f</code> verwenden. Wenn du eine wissenschaftliche Notation ben\u00f6tigst, kannst du <code>%e</code> verwenden.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Short/","title":"Short","text":"<p>In C ist <code>short</code> ein Datentyp, der f\u00fcr die Speicherung von Ganzzahlen verwendet wird. Der <code>short</code>-Datentyp ist ein k\u00fcrzerer Typ im Vergleich zu <code>int</code> und wird h\u00e4ufig verwendet, wenn du Speicherplatz sparen m\u00f6chtest und die Werte im Bereich von <code>short</code> liegen.</p> <p>Hier sind einige wichtige Punkte zum <code>short</code>-Datentyp:</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Short/#eigenschaften-von-short","title":"Eigenschaften von <code>short</code> \ud83e\uddfe","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Short/#groe-und-speicherplatz","title":"Gr\u00f6\u00dfe und Speicherplatz \ud83d\udcbe:","text":"<p>Der <code>short</code>-Datentyp belegt typischerweise 2 Bytes (16 Bit) im Speicher. Dies kann je nach Plattform variieren, aber 2 Bytes sind am h\u00e4ufigsten.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Short/#wertbereich","title":"Wertbereich \ud83c\udf08:","text":"<p>Der Bereich der Werte, die ein <code>short</code> speichern kann, h\u00e4ngt davon ab, ob es sich um einen vorzeichenbehafteten (<code>signed</code>) oder vorzeichenlosen (<code>unsigned</code>) <code>short</code> handelt:         - Vorzeichenbehaftet (<code>signed short</code>): Der Wertbereich reicht normalerweise von -32,768 bis 32,767.         - Vorzeichenlos (<code>unsigned short</code>): Der Wertbereich reicht von 0 bis 65,535.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Short/#verwendung","title":"Verwendung \ud83d\udee0\ufe0f:","text":"<p><code>short</code> wird verwendet, wenn du Ganzzahlen speichern m\u00f6chtest und weniger Speicherplatz ben\u00f6tigen als f\u00fcr <code>int</code>. Dies kann n\u00fctzlich sein, wenn du in einem speichereffizienten Kontext arbeitest oder eine gro\u00dfe Menge an Ganzzahlen speichern musst.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Short/#modifizierer","title":"Modifizierer \u2699\ufe0f:","text":"<p>Standardm\u00e4\u00dfig ist <code>short</code> vorzeichenbehaftet, aber du kannst es auch als vorzeichenlos deklarieren (<code>unsigned short</code>), um nur nicht-negative Werte zu speichern.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Unsigned%20Char/","title":"Unsigned Char","text":"<p>In C ist <code>unsigned char</code> eine Variante des <code>char</code>-Datentyps, bei dem alle 8 Bits des Bytes zur Darstellung von positiven Werten verwendet werden, ohne ein Vorzeichen zu ber\u00fccksichtigen. Dies bedeutet, dass <code>unsigned char</code> nur nicht-negative Werte darstellen kann.</p> <p>Hier sind einige wichtige Punkte zu <code>unsigned char</code>:</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Unsigned%20Char/#eigenschaften-von-unsigned-char","title":"Eigenschaften von <code>unsigned char</code> \ud83d\udcca","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Unsigned%20Char/#wertbereich","title":"Wertbereich \ud83c\udf08:","text":"<p><code>unsigned char</code> kann Werte von 0 bis 255 speichern. Dies liegt daran, dass es 8 Bits verwendet und alle Bits f\u00fcr die Werte repr\u00e4sentiert werden, ohne ein Vorzeichen zu ber\u00fccksichtigen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Unsigned%20Char/#speichergroe","title":"Speichergr\u00f6\u00dfe \ud83d\udcbe:","text":"<p>Wie <code>char</code> auch, belegt <code>unsigned char</code> typischerweise 1 Byte (8 Bit) im Speicher.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Unsigned%20Char/#verwendung","title":"Verwendung \ud83d\udee0\ufe0f:","text":"<p><code>unsigned char</code> wird oft verwendet, wenn es wichtig ist, dass keine negativen Werte gespeichert werden und der gesamte Wertebereich f\u00fcr positive Zahlen ben\u00f6tigt wird. H\u00e4ufige Anwendungen sind in der Datenmanipulation, bei der Arbeit mit Rohdaten oder beim Speichern von Bin\u00e4rdaten.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Unsigned%20Char/#modifikatoren","title":"Modifikatoren \u2699\ufe0f:","text":"<p><code>unsigned char</code> ist immer vorzeichenlos, daher gibt es keine <code>signed</code>-Alternative wie bei <code>signed char</code>.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Unsigned%20long/","title":"Unsigned long","text":"<p>In C ist <code>unsigned long</code> ein Datentyp, der f\u00fcr die Speicherung von Ganzzahlen ohne Vorzeichen verwendet wird. Der <code>unsigned long</code>-Typ kann gr\u00f6\u00dfere positive Werte speichern als der <code>unsigned int</code>-Typ, da er in der Regel mehr Speicherplatz verwendet.</p> <p>Hier sind einige wichtige Punkte zu <code>unsigned long</code>:</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Unsigned%20long/#eigenschaften-von-unsigned-long","title":"Eigenschaften von <code>unsigned long</code> \ud83e\uddfe","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Unsigned%20long/#groe-und-speicherplatz","title":"Gr\u00f6\u00dfe und Speicherplatz \ud83d\udcbe:","text":"<p>Die Gr\u00f6\u00dfe von <code>unsigned long</code> kann je nach Plattform variieren. In vielen Implementierungen belegt <code>unsigned long</code> 4 Bytes (32 Bit), aber auf einigen Plattformen kann es auch 8 Bytes (64 Bit) belegen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Unsigned%20long/#wertbereich","title":"Wertbereich \ud83c\udf08:","text":"<p>Der Bereich der Werte, die ein <code>unsigned long</code> speichern kann, h\u00e4ngt von der Gr\u00f6\u00dfe ab:     - Bei 4 Bytes (32 Bit): Der Wertebereich reicht von 0 bis 4,294,967,295 (2^32 - 1).     - Bei 8 Bytes (64 Bit): Der Wertebereich reicht von 0 bis 18,446,744,073,709,551,615 (2^64 - 1).</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Unsigned%20long/#verwendung","title":"Verwendung \ud83d\udee0\ufe0f:","text":"<p><code>unsigned long</code> wird verwendet, wenn du gro\u00dfe positive Ganzzahlen speichern musst und sicherstellen m\u00f6chtest, dass keine negativen Werte erlaubt sind. Es wird h\u00e4ufig in Situationen verwendet, in denen gro\u00dfe Datenmengen verarbeitet oder gro\u00dfe Indizes verwaltet werden m\u00fcssen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/C%20Test/Unsigned%20long/#modifizierer","title":"Modifizierer \u2699\ufe0f:","text":"<p><code>unsigned long</code> ist immer vorzeichenlos, was bedeutet, dass es keine negativen Werte darstellen kann.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Basis%20Datenstrukturen%20Array/","title":"Basis Datenstrukturen Array","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Basis%20Datenstrukturen%20Array/#allgemeines","title":"Allgemeines","text":"<p>Das Array ist eine grundlegende Datenstruktur in der Informatik, bestehend aus n gleichen Datenelementen, die dicht aneinander im Speicher angeordnet sind. Der Index eines Arrays identifiziert die Position eines Datenelements innerhalb des Arrays. </p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Basis%20Datenstrukturen%20Array/#geschwindigkeit","title":"Geschwindigkeit","text":"<ul> <li>Geschwindigkeit wird durch die Anzahl der Schritte gemessen, nicht durch absolute Zeit.</li> <li>Beispiel: Wenn Operation A 5 Schritte und Operation B 500 Schritte ben\u00f6tigt, ist Operation A immer schneller.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Basis%20Datenstrukturen%20Array/#synonyme-performance","title":"Synonyme  Performance","text":"<ul> <li>Geschwindigkeit</li> <li>(Zeit-)Komplexit\u00e4t</li> <li>Effizienz</li> <li>Performance</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Basis%20Datenstrukturen%20Array/#operationen","title":"Operationen","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Basis%20Datenstrukturen%20Array/#lesenandern","title":"Lesen/\u00c4ndern:","text":"<p>Zugriff auf Daten an einer bestimmten Stelle erfolgt in konstanter Zeit (O(1)).   =&gt; Zugriff Maximal ein Schritt   </p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Basis%20Datenstrukturen%20Array/#suche","title":"Suche","text":"<p>Um ein Element zu finden, muss man potenziell alle Elemente durchsuchen (O(n)).  </p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Basis%20Datenstrukturen%20Array/#einfugen","title":"Einf\u00fcgen:","text":"<p>Ein weiteres Element wird zur Datenstruktur hinzugef\u00fcgt. Im schlimmsten Fall, wenn das Einf\u00fcgen am Anfang erfolgt, sind (n+1) Schritte erforderlich (O(n)). </p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Basis%20Datenstrukturen%20Array/#loschen","title":"L\u00f6schen:","text":"<p>Elemente k\u00f6nnen nur am Ende effizient gel\u00f6scht werden (O(1)). Um ein Element an einer anderen Position zu l\u00f6schen, m\u00fcssen die verbleibenden Elemente verschoben werden, was im schlimmsten Fall n-1 Schritte erfordert (O(n)). </p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Basis%20Datenstrukturen%20Array/#array-sets","title":"Array Sets","text":"<ul> <li>Sets sind spezielle Arrays, die keine doppelten Datenwerte zulassen.</li> <li>Die Komplexit\u00e4t f\u00fcr Zugriff/Lesen, Suchen und L\u00f6schen entspricht der von Arrays.</li> <li>Beim Einf\u00fcgen muss zuerst das gesamte Set durchsucht werden, was doppelt so lange dauert wie bei einem normalen Array (O(2n)).</li> <li>Das Schreiben (Wert ver\u00e4ndern) dauert n+1 Schritte (O(n)).</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Bin%C3%A4er%20Heap/","title":"Bin\u00e4er Heap","text":"<p>Ein bin\u00e4rer Heap ist ein spezieller bin\u00e4rer Baum, jedoch kein bin\u00e4rer Suchbaum. Es gibt zwei Typen von bin\u00e4ren Heaps:</p> <ol> <li>Max-Heap: Der Wert jedes Knotens ist gr\u00f6\u00dfer als oder gleich den Werten seiner Kinder.</li> <li>Min-Heap: Der Wert jedes Knotens ist kleiner als oder gleich den Werten seiner Kinder.</li> </ol> <p>Ein bin\u00e4rer Heap muss folgende Bedingungen erf\u00fcllen:</p> <ul> <li>Heap-Bedingung: Der Wert jedes Knotens muss entweder gr\u00f6\u00dfer/gleich (Max-Heap) oder kleiner/gleich (Min-Heap) als die Werte seiner Kinder sein.</li> <li>Heap-Vollst\u00e4ndigkeit: Der Baum muss vollst\u00e4ndig sein, d.h. alle Ebenen sind vollst\u00e4ndig gef\u00fcllt, mit Ausnahme der letzten Ebene, die von links nach rechts gef\u00fcllt ist. </li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Bin%C3%A4er%20Heap/#eigenschaften-eines-binaren-heaps","title":"Eigenschaften eines bin\u00e4ren Heaps","text":"<ul> <li>Ein bin\u00e4rer Heap ist anders strukturiert als ein bin\u00e4rer Suchbaum. Im bin\u00e4ren Suchbaum ist jedes rechte Kind gr\u00f6\u00dfer als sein Vorg\u00e4nger. Im bin\u00e4ren Heap gibt es keine solche Regel \u2013 es geht nur um die Heap-Bedingung.</li> <li>Ein bin\u00e4rer Heap ist immer vollst\u00e4ndig und schwach geordnet im Vergleich zu einem bin\u00e4ren Suchbaum, der stark geordnet ist.</li> <li>Der Wurzelknoten ist immer der gr\u00f6\u00dfte (bei Max-Heap) oder kleinste (bei Min-Heap) Knoten im Baum.</li> <li>Der letzte Knoten ist der rechteste Knoten in der untersten Ebene.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Bin%C3%A4er%20Heap/#operationen-auf-einem-binaren-heap","title":"Operationen auf einem bin\u00e4ren Heap","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Bin%C3%A4er%20Heap/#einfugen","title":"Einf\u00fcgen","text":"<ol> <li>Ein neuer Knoten wird am n\u00e4chsten freien Platz auf der untersten Ebene eingef\u00fcgt.</li> <li>Vergleiche den neuen Knoten mit seinem Elternknoten.</li> <li>Wenn der neue Knoten gr\u00f6\u00dfer (Max-Heap) oder kleiner (Min-Heap) als sein Elternknoten ist, tausche sie und wiederhole den Vorgang.</li> <li>Der Prozess endet, wenn die Heap-Bedingung erf\u00fcllt ist. </li> </ol> <p>[!EXAMPLE]- C# Beispiel f\u00fcr das Einf\u00fcgen in einen Max-Heap: <pre><code>using System;\nusing System.Collections.Generic;\n\nclass MaxHeap\n{\n    private List&lt;int&gt; heap = new List&lt;int&gt;();\n\n    public void Insert(int value)\n    {\n        heap.Add(value);\n        HeapifyUp(heap.Count - 1);\n    }\n\n    private void HeapifyUp(int index)\n    {\n        while (index &gt; 0)\n        {\n            int parentIndex = (index - 1) / 2;\n            if (heap[index] &lt;= heap[parentIndex])\n                break;\n\n            // Swap\n            int temp = heap[index];\n            heap[index] = heap[parentIndex];\n            heap[parentIndex] = temp;\n\n            index = parentIndex;\n        }\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        MaxHeap maxHeap = new MaxHeap();\n        maxHeap.Insert(40);\n        maxHeap.Insert(20);\n        maxHeap.Insert(30);\n        maxHeap.Insert(10);\n        maxHeap.Insert(25);\n        maxHeap.Insert(35);\n        maxHeap.Insert(15);\n\n        Console.WriteLine(\"Elemente wurden erfolgreich in den Heap eingef\u00fcgt.\");\n    }\n}\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Bin%C3%A4er%20Heap/#entnehmen","title":"Entnehmen","text":"<ol> <li>Entferne den Wurzelknoten (das Element mit der h\u00f6chsten Priorit\u00e4t).</li> <li>Ersetze den Wurzelknoten mit dem letzten Knoten im Heap.     </li> <li>Versickere den neuen Wurzelknoten nach unten, bis die Heap-Bedingung wieder erf\u00fcllt ist. </li> </ol> <p>[!EXAMPLE]- C# Beispiel f\u00fcr das Entfernen aus einem Max-Heap: <pre><code>using System;\nusing System.Collections.Generic;\n\nclass MaxHeap\n{\n    private List&lt;int&gt; heap = new List&lt;int&gt;();\n\n    public void Insert(int value)\n    {\n        heap.Add(value);\n        HeapifyUp(heap.Count - 1);\n    }\n\n    public int ExtractMax()\n    {\n        if (heap.Count == 0)\n            throw new InvalidOperationException(\"Heap ist leer.\");\n\n        int maxValue = heap[0];\n        heap[0] = heap[heap.Count - 1];\n        heap.RemoveAt(heap.Count - 1);\n\n        HeapifyDown(0);\n        return maxValue;\n    }\n\n    private void HeapifyUp(int index)\n    {\n        while (index &gt; 0)\n        {\n            int parentIndex = (index - 1) / 2;\n            if (heap[index] &lt;= heap[parentIndex])\n                break;\n\n            int temp = heap[index];\n            heap[index] = heap[parentIndex];\n            heap[parentIndex] = temp;\n\n            index = parentIndex;\n        }\n    }\n\n    private void HeapifyDown(int index)\n    {\n        int lastIndex = heap.Count - 1;\n        while (index &lt; lastIndex)\n        {\n            int leftChildIndex = 2 * index + 1;\n            int rightChildIndex = 2 * index + 2;\n            int largestIndex = index;\n\n            if (leftChildIndex &lt;= lastIndex &amp;&amp; heap[leftChildIndex] &gt; heap[largestIndex])\n                largestIndex = leftChildIndex;\n\n            if (rightChildIndex &lt;= lastIndex &amp;&amp; heap[rightChildIndex] &gt; heap[largestIndex])\n                largestIndex = rightChildIndex;\n\n            if (largestIndex == index)\n                break;\n\n            int temp = heap[index];\n            heap[index] = heap[largestIndex];\n            heap[largestIndex] = temp;\n\n            index = largestIndex;\n        }\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        MaxHeap maxHeap = new MaxHeap();\n        maxHeap.Insert(40);\n        maxHeap.Insert(20);\n        maxHeap.Insert(30);\n        maxHeap.Insert(10);\n        maxHeap.Insert(25);\n        maxHeap.Insert(35);\n        maxHeap.Insert(15);\n\n        Console.WriteLine($\"Maximales Element entfernt: {maxHeap.ExtractMax()}\");\n        Console.WriteLine($\"Maximales Element entfernt: {maxHeap.ExtractMax()}\");\n    }\n}\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Bin%C3%A4er%20Heap/#_1","title":"Bin\u00e4er Heap","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Bin%C3%A4er%20Heap/#finden-des-letzten-knotens-in-einem-binaren-heap","title":"Finden des letzten Knotens in einem bin\u00e4ren Heap","text":"<p>Ein bin\u00e4rer Heap wird oft als Array dargestellt, was die Verwaltung und die effiziente Suche nach Knoten erleichtert. In einem bin\u00e4ren Heap ist der \"letzte Knoten\" der rechteste Knoten in der untersten Ebene des Baums. Dies ist wichtig, weil der letzte Knoten h\u00e4ufig bei Operationen wie dem Einf\u00fcgen und Entfernen verwendet wird.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Bin%C3%A4er%20Heap/#darstellung-eines-heaps-als-array","title":"Darstellung eines Heaps als Array","text":"<p>Ein vollst\u00e4ndiger bin\u00e4rer Heap kann einfach als Array dargestellt werden. Bei dieser Darstellung hat jeder Knoten in der Baumstruktur eine entsprechende Position im Array. Der Index jedes Knotens im Array folgt einer spezifischen Ordnung:</p> <ol> <li>Wurzelknoten: Index 0</li> <li>Linkes Kind eines Knotens: Bei Index <code>i</code> hat das linke Kind den Index <code>2 * i + 1</code>.</li> <li>Rechtes Kind eines Knotens: Bei Index <code>i</code> hat das rechte Kind den Index <code>2 * i + 2</code>.</li> <li>Elternknoten eines Knotens: Bei Index <code>i</code> hat der Elternknoten den Index <code>(i - 1) / 2</code>.</li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Bin%C3%A4er%20Heap/#finden-des-letzten-knotens","title":"Finden des letzten Knotens","text":"<p>Der letzte Knoten in einem bin\u00e4ren Heap ist einfach das letzte Element im Array, das den Heap darstellt. Der Grund daf\u00fcr ist, dass der Heap vollst\u00e4ndig ist und alle Ebenen vollst\u00e4ndig gef\u00fcllt sind, au\u00dfer m\u00f6glicherweise der letzten Ebene. Daher:</p> <ul> <li>Der letzte Knoten befindet sich am letzten Index des Arrays.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Bin%C3%A4er%20Heap/#schritte-zum-finden-des-letzten-knotens","title":"Schritte zum Finden des letzten Knotens:","text":"<ol> <li>Identifiziere das Array, das den Heap darstellt.</li> <li>Bestimme die L\u00e4nge des Arrays (d.h. die Anzahl der Elemente im Heap).</li> <li>Der Index des letzten Knotens ist einfach <code>array.Length - 1</code>.</li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Bin%C3%A4er%20Heap/#beispiel-in-c","title":"Beispiel in C","text":"<p>[!EXAMPLE]- C# Beispiel zum Finden des letzten Knotens in einem Max-Heap: <pre><code>using System;\nusing System.Collections.Generic;\n\nclass MaxHeap\n{\n    private List&lt;int&gt; heap = new List&lt;int&gt;();\n\n    public void Insert(int value)\n    {\n        heap.Add(value);\n        HeapifyUp(heap.Count - 1);\n    }\n\n    // Methode, um den letzten Knoten zu finden\n    public int FindLastNode()\n    {\n        if (heap.Count == 0)\n            throw new InvalidOperationException(\"Heap ist leer.\");\n\n        return heap[heap.Count - 1]; // Der letzte Knoten im Array\n    }\n\n    private void HeapifyUp(int index)\n    {\n        while (index &gt; 0)\n        {\n            int parentIndex = (index - 1) / 2;\n            if (heap[index] &lt;= heap[parentIndex])\n                break;\n\n            int temp = heap[index];\n            heap[index] = heap[parentIndex];\n            heap[parentIndex] = temp;\n\n            index = parentIndex;\n        }\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        MaxHeap maxHeap = new MaxHeap();\n        maxHeap.Insert(40);\n        maxHeap.Insert(20);\n        maxHeap.Insert(30);\n        maxHeap.Insert(10);\n        maxHeap.Insert(25);\n        maxHeap.Insert(35);\n        maxHeap.Insert(15);\n\n        Console.WriteLine($\"Letzter Knoten im Heap: {maxHeap.FindLastNode()}\");\n    }\n}\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Bin%C3%A4er%20Heap/#effizienz-von-heaps","title":"Effizienz von Heaps","text":"<ul> <li>Die Zeitkomplexit\u00e4t f\u00fcr das Einf\u00fcgen und Entnehmen in einem bin\u00e4ren Heap betr\u00e4gt O(log N), da die Operationen nur entlang des Pfades von der Wurzel zur tiefsten Ebene erfolgen.</li> <li>Die schwache Ordnung der Heaps ist ideal f\u00fcr die Verwendung in Priority Queues, wo die Operationen Einf\u00fcgen und Entnehmen beide schnell sein m\u00fcssen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Bin%C3%A4er%20Heap/#heaps-fur-prioritats-queue","title":"Heaps f\u00fcr Priorit\u00e4ts-Queue","text":"<p>Eine Priority Queue ist eine Warteschlange, die auf der Priorit\u00e4t der Elemente basiert. Heaps sind eine ausgezeichnete Wahl zur Implementierung von Priority Queues, da sie sowohl effizientes Einf\u00fcgen als auch Entfernen von Elementen erm\u00f6glichen. Ein sortiertes Array w\u00e4re ineffizienter, da das Einf\u00fcgen O(N) und das Entfernen O(1) erfordert, wohingegen ein Heap beide Operationen in O(log N) ausf\u00fchrt.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/B%C3%A4ume/","title":"B\u00e4ume","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/B%C3%A4ume/#baume-in-graphen","title":"B\u00e4ume in Graphen","text":"<p>B\u00e4ume sind eine spezielle Art von Graphen, die zyklenfrei sind und eine hierarchische Struktur aufweisen. Jeder Knoten hat genau einen Vorg\u00e4nger, au\u00dfer der Wurzelknoten, der keinen Vorg\u00e4nger hat. Zwischen der Wurzel und jedem Knoten gibt es genau einen Pfad.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/B%C3%A4ume/#wichtige-begriffe","title":"Wichtige Begriffe","text":"<ul> <li>Wurzelknoten: Der oberste Knoten eines Baumes.</li> <li>Elternknoten: Ein Knoten, der Nachfolgerknoten (Kinderknoten) hat.</li> <li>Kindknoten: Knoten, die von einem Elternknoten abstammen.</li> <li>Blattknoten: Knoten ohne Nachfolger.</li> <li>Innere Knoten: Knoten, die sowohl Vorg\u00e4nger als auch Nachfolger haben.</li> <li>Teilbaum: Ein Teil des gesamten Baumes, der selbst wieder ein Baum ist.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/B%C3%A4ume/#binare-suchbaume-bst","title":"Bin\u00e4re Suchb\u00e4ume (BST)","text":"<p> Ein bin\u00e4rer Suchbaum ist ein bin\u00e4rer Baum, in dem f\u00fcr jeden Knoten gilt:</p> <ul> <li>Die Werte der linken Nachfahren sind kleiner oder gleich dem Wert des Knotens.</li> <li>Die Werte der rechten Nachfahren sind gr\u00f6\u00dfer oder gleich dem Wert des Knotens.</li> </ul> <p>Vorteile:</p> <ul> <li>Suchen: O(log N) im besten Fall</li> <li>Einf\u00fcgen: O(log N) im besten Fall</li> <li>L\u00f6schen: O(log N) im besten Fall</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/B%C3%A4ume/#traversierung-von-binaren-baumen","title":"Traversierung von Bin\u00e4ren B\u00e4umen","text":"<p>Es gibt verschiedene Traversierungsmethoden:</p> <ul> <li>Inorder (L-W-R): Besucht zuerst den linken Teilbaum, dann den Knoten, und zuletzt den rechten Teilbaum.</li> <li>Preorder (W-L-R): Besucht zuerst den Knoten, dann den linken und den rechten Teilbaum.</li> <li>Postorder (L-R-W): Besucht zuerst den linken, dann den rechten Teilbaum und zuletzt den Knoten.</li> <li>Level-order: Besucht alle Knoten auf einer Ebene, bevor zur n\u00e4chsten Ebene \u00fcbergegangen wird.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/B%C3%A4ume/#einfugen-in-binaren-suchbaumen","title":"Einf\u00fcgen in Bin\u00e4ren Suchb\u00e4umen","text":"<p>Das Einf\u00fcgen eines Wertes erfolgt an der Stelle, die den Regeln des bin\u00e4ren Suchbaums entspricht, d.h., im linken Teilbaum, wenn der Wert kleiner ist, und im rechten Teilbaum, wenn der Wert gr\u00f6\u00dfer ist.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/B%C3%A4ume/#loschen-aus-binaren-suchbaumen","title":"L\u00f6schen aus Bin\u00e4ren Suchb\u00e4umen","text":"<p>Beim L\u00f6schen eines Knotens unterscheidet man drei F\u00e4lle:</p> <ul> <li>Der Knoten hat keine Kinder: Einfach l\u00f6schen.</li> <li>Der Knoten hat ein Kind: L\u00f6schen und das Kind an die Stelle des Knotens setzen.</li> <li>Der Knoten hat zwei Kinder: Ersetzen durch den Nachfolgerknoten (der kleinste Knoten im rechten Teilbaum).</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Das%20Sortierte%20Array/","title":"Das Sortierte Array","text":"<p>Der Unterschied zu normalen Arrays ist das Werte nach jeder Operation wieder Sortiert werden m\u00fcssen.</p> <ul> <li>Einf\u00fcgen ist langsamer als bei unsortierten Arrays </li> <li>Lineare Suche ist genauso schnell wie bei unsortierten Arrays </li> <li>Bin\u00e4re Suche ist wesentlich schneller als bei unsortierten Arrays!</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Das%20Sortierte%20Array/#lineare-suche","title":"Lineare Suche","text":"<p>[!faq]- Beispiel</p> <p>```csharp using System;</p> <p>class Program {     static void Main(string[] args)     {         int[] array = { 3, 17, 75, 80, 202 };         int result = LinearSearch(array, array.Length, 202);</p> <pre><code>    if (result != -1)\n    {\n        Console.WriteLine($\"Element gefunden an Position: {result}\");\n    }\n    else\n    {\n        Console.WriteLine(\"Element nicht gefunden\");\n    }\n}\n\nstatic int LinearSearch(int[] array, int size, int searchValue)\n{\n    bool continueLoop = true;\n    int result = -1;\n    for (int i = 0; i &lt; size &amp;&amp; continueLoop; i++)\n    {\n        if (array[i] == searchValue)\n        {\n            // gefunden!\n            continueLoop = false;\n            result = i;\n        }\n        else if (array[i] &gt; searchValue)\n        {\n            // Hier bricht die Suche im sortierten Array u.U. fr\u00fcher ab!\n            continueLoop = false;\n        }\n    }\n\n    return result;\n}\n</code></pre> <p>}</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Das%20Sortierte%20Array/#binare-suche","title":"Bin\u00e4re Suche","text":"<p>[!faq]- Beispiel <pre><code>using System;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        int[] array = { 3, 17, 75, 80, 202 };\n        int result = BinarySearch(array, array.Length, 202);\n\n        if (result != -1)\n        {\n            Console.WriteLine($\"Element gefunden an Position: {result}\");\n        }\n        else\n        {\n            Console.WriteLine(\"Element nicht gefunden\");\n        }\n    }\n\n    static int BinarySearch(int[] array, int size, int searchValue)\n    {\n        // Festlegen der unteren und oberen Schranke\n        int lowerBound = 0;\n        int upperBound = size - 1;\n        int midPoint = 0;\n        int result = -1;\n        bool notFound = true;\n\n        // Schleife zum Durchsuchen der Werte zwischen den Schranken\n        while (lowerBound &lt;= upperBound &amp;&amp; notFound)\n        {\n            // Berechnung des Mittelpunkts\n            midPoint = (upperBound + lowerBound) / 2;\n\n            // \u00dcberpr\u00fcfen des Werts am Mittelpunkt\n            if (array[midPoint] == searchValue)\n            {\n                result = midPoint;\n                notFound = false;\n            }\n            else if (searchValue &gt; array[midPoint])\n            {\n                lowerBound = midPoint + 1;\n            }\n            else if (searchValue &lt; array[midPoint])\n            {\n                upperBound = midPoint - 1;\n            }\n        }\n\n        return result;\n    }\n}\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Das%20Sortierte%20Array/#binare-vs-lineare-suche","title":"Bin\u00e4re vs. Lineare Suche","text":"<p>Lineare Suche (Worst case): 100 Vergleiche (=n) Bin\u00e4re Suche (Worst]case): 7 Vergleiche (=log2 n: Die Verdopplung der L\u00e4nge erh\u00f6ht die Zahl der Schritte um 1)   </p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Datenstrukturen/","title":"Datenstrukturen","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Datenstrukturen/#ziel","title":"\ud83c\udfaf Ziel","text":"<ul> <li>Effizienter, schneller Code   </li> <li>Eleganter Code:<ul> <li>Team Abh\u00e4ngig</li> <li>Nie komplett schlechten Code erstellen</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Datenstrukturen/#die-rolle-der-datenstruktur","title":"\ud83d\uddc2\ufe0f Die Rolle der Datenstruktur","text":"<p>\u21d2 Die Rolle der Datenstruktur bestimmt, wie schnell der Code l\u00e4uft</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Knotenbasierte%20Datenstrukturen/","title":"Knotenbasierte Datenstrukturen","text":"<p>Knotenbasierte Datenstrukturen sind Datenstrukturen, die aus Knoten bestehen. Jeder Knoten speichert in der Regel einen Datenwert und Verweise (Referenzen) auf andere Knoten. Diese Strukturen werden h\u00e4ufig verwendet, um Elemente in einer bestimmten Reihenfolge oder Hierarchie zu organisieren und zu speichern.</p> <p>[!info] Typen von knotenbasierten Datenstrukturen</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Knotenbasierte%20Datenstrukturen/#1-verkettete-listen-linked-lists","title":"1. Verkettete Listen (Linked Lists)","text":"<p>Verkettete Listen bestehen aus Knoten, wobei jeder Knoten einen Datenwert und einen Verweis (Pointer) auf den n\u00e4chsten Knoten enth\u00e4lt. Es gibt verschiedene Arten von verketteten Listen:</p> <ul> <li>Einfach verkettete Liste: Jeder Knoten verweist nur auf den n\u00e4chsten Knoten.</li> <li>Doppelt verkettete Liste: Jeder Knoten verweist auf den vorherigen und den n\u00e4chsten Knoten.</li> <li>Zirkul\u00e4re Liste: Die letzte Knoten verweist auf den ersten Knoten, wodurch eine Schleife entsteht.</li> </ul> <p>[!example] Beispiel einer einfach verketteten Liste in C# <pre><code>public class Node\n{\n    public int Data;\n    public Node Next;\n\n    public Node(int data)\n    {\n        Data = data;\n        Next = null;\n    }\n}\n\npublic class LinkedList\n{\n    private Node head;\n\n    public void Add(int data)\n    {\n        Node newNode = new Node(data);\n        if (head == null)\n        {\n            head = newNode;\n        }\n        else\n        {\n            Node current = head;\n            while (current.Next != null)\n            {\n                current = current.Next;\n            }\n            current.Next = newNode;\n        }\n    }\n\n    public void PrintList()\n    {\n        Node current = head;\n        while (current != null)\n        {\n            Console.WriteLine(current.Data);\n            current = current.Next;\n        }\n    }\n}\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Knotenbasierte%20Datenstrukturen/#2-baume-trees","title":"2. B\u00e4ume (Trees)","text":"<p>B\u00e4ume bestehen aus Knoten, wobei jeder Knoten einen Datenwert und Verweise auf untergeordnete Knoten (Kinder) hat. Ein bekannter Typ ist der Bin\u00e4rbaum, bei dem jeder Knoten maximal zwei Kinder hat: ein linkes und ein rechtes.</p> <p>[!example] Beispiel eines Bin\u00e4rbaums in C# <pre><code>public class TreeNode\n{\n    public int Data;\n    public TreeNode Left;\n    public TreeNode Right;\n\n    public TreeNode(int data)\n    {\n        Data = data;\n        Left = null;\n        Right = null;\n    }\n}\n\npublic class BinaryTree\n{\n    public TreeNode Root;\n\n    public void Insert(int data)\n    {\n        if (Root == null)\n        {\n            Root = new TreeNode(data);\n        }\n        else\n        {\n            InsertRec(Root, new TreeNode(data));\n        }\n    }\n\n    private void InsertRec(TreeNode root, TreeNode newNode)\n    {\n        if (newNode.Data &lt; root.Data)\n        {\n            if (root.Left == null)\n                root.Left = newNode;\n            else\n                InsertRec(root.Left, newNode);\n        }\n        else\n        {\n            if (root.Right == null)\n                root.Right = newNode;\n            else\n                InsertRec(root.Right, newNode);\n        }\n    }\n}\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Knotenbasierte%20Datenstrukturen/#3-graphen-graphs","title":"3. Graphen (Graphs)","text":"<p>Graphen sind allgemeinere Formen von knotenbasierten Strukturen, bei denen Knoten durch Kanten miteinander verbunden sind. Graphen k\u00f6nnen gerichtet oder ungerichtet sowie gewichtet oder ungewichtet sein.</p> <p>[!example] Beispiel eines ungerichteten Graphen in C# <pre><code>public class Graph\n{\n    private int Vertices;\n    private List&lt;int&gt;[] adjList;\n\n    public Graph(int vertices)\n    {\n        Vertices = vertices;\n        adjList = new List&lt;int&gt;[vertices];\n        for (int i = 0; i &lt; vertices; i++)\n        {\n            adjList[i] = new List&lt;int&gt;();\n        }\n    }\n\n    public void AddEdge(int source, int destination)\n    {\n        adjList[source].Add(destination);\n        adjList[destination].Add(source); // F\u00fcr ungerichteten Graph\n    }\n\n    public void PrintGraph()\n    {\n        for (int i = 0; i &lt; Vertices; i++)\n        {\n            Console.Write($\"Knoten {i}:\");\n            foreach (var vertex in adjList[i])\n            {\n                Console.Write($\" -&gt; {vertex}\");\n            }\n            Console.WriteLine();\n        }\n    }\n}\n</code></pre></p> <p>[!tip] Vorteile knotenbasierter Datenstrukturen</p> <ul> <li>Flexibilit\u00e4t: Bieten dynamische Speicherverwaltung und k\u00f6nnen effizient auf Einf\u00fcgungen und L\u00f6schungen reagieren.</li> <li>Effiziente Speicherverwaltung: Speicher wird nur bei Bedarf verwendet.</li> <li>Anwendungsfreundlich f\u00fcr bestimmte Szenarien: Besonders geeignet f\u00fcr hierarchische Datenstrukturen wie Dateisysteme oder f\u00fcr die Darstellung von Netzwerken.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Knotenbasierte%20Datenstrukturen/#komlexitat-suche","title":"Komlexit\u00e4t Suche","text":"<ul> <li>Worst-Case: O(N) -&gt; Arrays O(1) Bei der Suche</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Knotenbasierte%20Datenstrukturen/#komlexitat-einfugen","title":"Komlexit\u00e4t Einf\u00fcgen","text":"<ul> <li>Verkettete Listen ben\u00f6tigen beim einf\u00fcgen \u00dcberall lediglich O(1), da lediglich der Pointer ge\u00e4ndert werden muss</li> <li></li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Knotenbasierte%20Datenstrukturen/#komplexitat-loschen","title":"Komplexit\u00e4t L\u00f6schen","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Priorit%C3%A4ts-Queue/","title":"Priorit\u00e4ts Queue","text":"<p>Eine Priorit\u00e4ts-Queue ist eine spezielle Art von Queue (Warteschlange), in der die Elemente nach ihrer Priorit\u00e4t geordnet sind, anstatt einfach nur in der Reihenfolge ihres Eintreffens. Eine Priorit\u00e4ts-Queue kann mithilfe verschiedener Datenstrukturen implementiert werden, wobei ein Heap besonders effizient ist, wenn es darum geht, das gr\u00f6\u00dfte oder kleinste Element zu verwalten.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Priorit%C3%A4ts-Queue/#eigenschaften-der-prioritats-queue","title":"Eigenschaften der Priorit\u00e4ts-Queue","text":"<ul> <li>Die Queue ist eine Datenstruktur, in der Elemente nach dem FIFO-Prinzip (First In, First Out) bearbeitet werden.</li> <li>In einer Priorit\u00e4ts-Queue erfolgt die Entnahme von Elementen wie in einer klassischen Queue (an der Spitze der Queue), aber das Einf\u00fcgen erfolgt wie in ein sortiertes Array (die Daten bleiben stets sortiert).</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Priorit%C3%A4ts-Queue/#anwendungsbeispiel-notaufnahme-triage","title":"Anwendungsbeispiel: Notaufnahme (Triage)","text":"<p>Ein klassisches Beispiel f\u00fcr eine Priorit\u00e4ts-Queue ist die Triage in einer Notaufnahme. Hier werden Patienten nicht in der Reihenfolge ihrer Aufnahme behandelt, sondern nach Dringlichkeit einsortiert. </p> <ul> <li>Annahme: Der Schweregrad der Erkrankung der Patienten wird auf einer Skala von 1 bis 10 eingeteilt, wobei 10 der schwerste Grad ist.</li> <li>Der Patient mit der h\u00f6chsten Dringlichkeit (z. B. Patient C) steht an der Spitze der Queue.</li> <li>Ein neu eintreffender Patient (z. B. Patient E mit Schweregrad 3) wird entsprechend seiner Dringlichkeit einsortiert. </li> </ul> <p>[!EXAMPLE]- C# Beispiel zur Implementierung einer Priorit\u00e4ts-Queue mit einem Heap: <pre><code>using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main()\n    {\n        // Erstelle eine neue Priorit\u00e4ts-Queue\n        PriorityQueue&lt;Patient&gt; priorityQueue = new PriorityQueue&lt;Patient&gt;();\n\n        // Patienten in die Queue einf\u00fcgen\n        priorityQueue.Enqueue(new Patient(\"Patient A\", 2));\n        priorityQueue.Enqueue(new Patient(\"Patient B\", 5));\n        priorityQueue.Enqueue(new Patient(\"Patient C\", 10));\n        priorityQueue.Enqueue(new Patient(\"Patient D\", 1));\n\n        // Patienten in der Reihenfolge ihrer Priorit\u00e4t behandeln\n        while (priorityQueue.Count &gt; 0)\n        {\n            Patient nextPatient = priorityQueue.Dequeue();\n            Console.WriteLine($\"Behandeln von: {nextPatient.Name} mit Dringlichkeit {nextPatient.Priority}\");\n        }\n    }\n}\n\nclass Patient : IComparable&lt;Patient&gt;\n{\n    public string Name { get; set; }\n    public int Priority { get; set; }\n\n    public Patient(string name, int priority)\n    {\n        Name = name;\n        Priority = priority;\n    }\n\n    // Vergleichsmethode f\u00fcr die Sortierung im Heap\n    public int CompareTo(Patient other)\n    {\n        return Priority.CompareTo(other.Priority);\n    }\n}\n\nclass PriorityQueue&lt;T&gt; where T : IComparable&lt;T&gt;\n{\n    private List&lt;T&gt; data;\n\n    public PriorityQueue()\n    {\n        data = new List&lt;T&gt;();\n    }\n\n    public void Enqueue(T item)\n    {\n        data.Add(item);\n        int childIndex = data.Count - 1;\n        \n        // Bubble up\n        while (childIndex &gt; 0)\n        {\n            int parentIndex = (childIndex - 1) / 2;\n            \n            if (data[childIndex].CompareTo(data[parentIndex]) &gt;= 0)\n            {\n                break;\n            }\n            \n            T tmp = data[childIndex];\n            data[childIndex] = data[parentIndex];\n            data[parentIndex] = tmp;\n            \n            childIndex = parentIndex;\n        }\n    }\n\n    public T Dequeue()\n    {\n        // Get the min item (root of the heap)\n        int lastIndex = data.Count - 1;\n        T frontItem = data[0];\n        data[0] = data[lastIndex];\n        data.RemoveAt(lastIndex);\n        lastIndex--;\n\n        // Bubble down\n        int parentIndex = 0;\n        while (true)\n        {\n            int leftChildIndex = 2 * parentIndex + 1;\n            int rightChildIndex = 2 * parentIndex + 2;\n            int minIndex = parentIndex;\n\n            if (leftChildIndex &lt;= lastIndex &amp;&amp; data[leftChildIndex].CompareTo(data[minIndex]) &lt; 0)\n            {\n                minIndex = leftChildIndex;\n            }\n\n            if (rightChildIndex &lt;= lastIndex &amp;&amp; data[rightChildIndex].CompareTo(data[minIndex]) &lt; 0)\n            {\n                minIndex = rightChildIndex;\n            }\n\n            if (minIndex == parentIndex)\n            {\n                break;\n            }\n\n            T tmp = data[parentIndex];\n            data[parentIndex] = data[minIndex];\n            data[minIndex] = tmp;\n\n            parentIndex = minIndex;\n        }\n\n        return frontItem;\n    }\n\n    public int Count =&gt; data.Count;\n}\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Priorit%C3%A4ts-Queue/#effizienz-analyse-der-prioritats-queue","title":"Effizienz-Analyse der Priorit\u00e4ts-Queue","text":"<p>Es gibt zwei prim\u00e4re Operationen in einer Priorit\u00e4ts-Queue: Entnehmen und Einf\u00fcgen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Priorit%C3%A4ts-Queue/#entnehmen","title":"Entnehmen","text":"<ul> <li>Entnahme am Anfang eines Arrays: O(N), da alle Elemente f\u00fcr das Schlie\u00dfen der L\u00fccke verschoben werden m\u00fcssen.</li> <li>Entnahme am Ende eines Arrays: O(1) \u2013 deshalb wird die Entnahme (maximale Priorit\u00e4t) am Ende durchgef\u00fchrt.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Priorit%C3%A4ts-Queue/#einsortieren","title":"Einsortieren","text":"<ul> <li>Das Einf\u00fcgen in ein sortiertes Array hat die Komplexit\u00e4t O(N), da alle Elemente verglichen werden m\u00fcssen und bei einem fr\u00fchen Einf\u00fcgen alle anderen verschoben werden m\u00fcssen.</li> </ul> <p>In Summe ergibt sich f\u00fcr die Priorit\u00e4ts-Queue mit einem sortierten Array eine Komplexit\u00e4t von O(N), was bei vielen Elementen eine unwillkommene Verz\u00f6gerung bedeutet.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Priorit%C3%A4ts-Queue/#bessere-datenstruktur-heap","title":"Bessere Datenstruktur: HEAP","text":"<p>Ein Heap ist eine effizientere Datenstruktur zur Implementierung einer Priorit\u00e4ts-Queue, da er das Einf\u00fcgen und Entfernen von Elementen in logarithmischer Zeit O(log N) erm\u00f6glicht.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Trie%20oder%20Pr%C3%A4fixbaum%20%28Digitaler%20Suchbaum%29/","title":"Trie oder Pr\u00e4fixbaum (Digitaler Suchbaum)","text":"<p>Ein Trie (auch Pr\u00e4fixbaum oder digitaler Suchbaum genannt) ist eine spezielle Datenstruktur, die h\u00e4ufig in Anwendungen wie Autovervollst\u00e4ndigung, IP-Adress-Lookup und Telefonnummernsuche verwendet wird. Ein Trie erm\u00f6glicht eine effiziente Suche nach Zeichenketten, wobei die Zeitkomplexit\u00e4t unabh\u00e4ngig von der Anzahl der gespeicherten W\u00f6rter ist.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Trie%20oder%20Pr%C3%A4fixbaum%20%28Digitaler%20Suchbaum%29/#funktionsweise-des-autocomplete-autovervollstandigungs-features","title":"Funktionsweise des Autocomplete-/Autovervollst\u00e4ndigungs-Features","text":"<p>Ein Beispiel f\u00fcr die Verwendung von Tries ist das Autovervollst\u00e4ndigungs-Feature. Bei der Eingabe eines Pr\u00e4fixes, wie z.B. \u201eFr\u201c, k\u00f6nnte der Benutzer Vorschl\u00e4ge wie \u201eFrau\u201c und \u201eFreitag\u201c erhalten. Ein Trie kann diese Funktionalit\u00e4t effizient unterst\u00fctzen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Trie%20oder%20Pr%C3%A4fixbaum%20%28Digitaler%20Suchbaum%29/#annahmen-fur-die-implementierung","title":"Annahmen f\u00fcr die Implementierung","text":"<ul> <li>Die Applikation hat Zugriff auf ein vollst\u00e4ndiges W\u00f6rterbuch.</li> <li>Alle W\u00f6rter sind in einem Array gespeichert.</li> </ul> <p>Bei einem unsortierten Array w\u00e4ren die Zugriffskosten O(N), was f\u00fcr gro\u00dfe N (Anzahl der W\u00f6rter im W\u00f6rterbuch) ineffizient w\u00e4re. Eine Hash-Tabelle hilft in diesem Fall auch nicht, da die Hash-Funktion auf das gesamte Wort abzielt. Ein Trie erm\u00f6glicht jedoch eine schnellere Suche, da es eine O(K) Zeitkomplexit\u00e4t hat, wobei K die L\u00e4nge des Suchstrings ist.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Trie%20oder%20Pr%C3%A4fixbaum%20%28Digitaler%20Suchbaum%29/#aufbau-eines-trie-knotens","title":"Aufbau eines Trie-Knotens","text":"<p>Ein Trie besteht aus einer Menge vernetzter Knoten, die keine bin\u00e4re Baumstruktur bilden. Jeder Trie-Knoten kann beliebig viele Kinder haben. In dieser Implementierung besteht jeder Knoten aus einer Hash-Tabelle, deren Keys die Buchstaben des Alphabets sind und deren Werte auf andere Knoten zeigen.</p> <p></p> <p>Die Hash-Tabelle f\u00fcr den Trie k\u00f6nnte so aussehen:</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Trie%20oder%20Pr%C3%A4fixbaum%20%28Digitaler%20Suchbaum%29/#beispiel-in-c","title":"Beispiel in C","text":"<pre><code>// Initialisierung eines Trie-Knotens\nvoid InitNode (trieNode *root)\n{\n    root-&gt;children = NULL;\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Trie%20oder%20Pr%C3%A4fixbaum%20%28Digitaler%20Suchbaum%29/#beispiel-in-c_1","title":"Beispiel in C","text":"<p><pre><code>{\n    'a': &amp;nodeA,\n    'b': &amp;nodeB,\n    'c': &amp;nodeC\n}\n</code></pre> Die Keys sind Zeichen und die Werte sind Zeiger auf andere Hash-Tabellen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Trie%20oder%20Pr%C3%A4fixbaum%20%28Digitaler%20Suchbaum%29/#suche-in-einem-trie","title":"Suche in einem Trie","text":"<p>Die Suche in einem Trie kann zwei Ziele haben: 1. \u00dcberpr\u00fcfen, ob ein String ein vollst\u00e4ndiges Wort ist. 2. \u00dcberpr\u00fcfen, ob ein String das Pr\u00e4fix eines oder mehrerer W\u00f6rter ist.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Trie%20oder%20Pr%C3%A4fixbaum%20%28Digitaler%20Suchbaum%29/#suchalgorithmus","title":"Suchalgorithmus","text":"<ol> <li>Initialisiere die Variable <code>currentNode</code>, die auf den Wurzelknoten zeigt.</li> <li>Iteriere \u00fcber jedes Zeichen des Suchstrings.</li> <li>F\u00fcr jedes Zeichen \u00fcberpr\u00fcfe, ob der <code>currentNode</code> ein Kind mit diesem Zeichen als Key hat.</li> <li>Falls nicht, gib <code>None</code> zur\u00fcck, da der Trie den String nicht enth\u00e4lt.</li> <li>Falls vorhanden, setze <code>currentNode</code> auf dieses Kind und fahre mit dem n\u00e4chsten Zeichen fort.</li> <li>Wird das Ende des Suchstrings erreicht, wurde er gefunden.</li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Trie%20oder%20Pr%C3%A4fixbaum%20%28Digitaler%20Suchbaum%29/#beispiel-in-c_2","title":"Beispiel in C","text":"<pre><code>// Pseudocode f\u00fcr die Suche in einem Trie\nbool SearchInTrie(TrieNode root, string word)\n{\n    TrieNode currentNode = root;\n    foreach (char letter in word)\n    {\n        if (!currentNode.children.ContainsKey(letter))\n        {\n            return false; // String ist nicht im Trie\n        }\n        currentNode = currentNode.children[letter];\n    }\n    return true; // String wurde gefunden\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Trie%20oder%20Pr%C3%A4fixbaum%20%28Digitaler%20Suchbaum%29/#effizienzanalyse","title":"Effizienzanalyse","text":"<p>Die Trie-Suche hat eine Zeitkomplexit\u00e4t von O(K), wobei K die Anzahl der Zeichen im Suchstring ist. Dies ist unabh\u00e4ngig von der Anzahl der W\u00f6rter im Trie und somit effizienter als eine bin\u00e4re Suche in einem sortierten Array (O(log N)).</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Trie%20oder%20Pr%C3%A4fixbaum%20%28Digitaler%20Suchbaum%29/#einfugen-in-einen-trie","title":"Einf\u00fcgen in einen Trie","text":"<p>Das Einf\u00fcgen eines neuen Wortes in einen Trie erfolgt \u00e4hnlich der Suche:</p> <ol> <li>Initialisiere <code>currentNode</code>, der auf den Wurzelknoten zeigt.</li> <li>Iteriere \u00fcber jedes Zeichen des neuen Wortes.</li> <li>Pr\u00fcfe, ob der <code>currentNode</code> ein Kind mit diesem Zeichen als Key hat.</li> <li>Falls ja, setze <code>currentNode</code> auf dieses Kind und fahre mit dem n\u00e4chsten Zeichen fort.</li> <li>Falls nein, erstelle einen neuen Kindknoten und setze <code>currentNode</code> auf diesen.</li> <li>Nach dem letzten Zeichen f\u00fcge ein \u201e*\u201c-Kind zum letzten Knoten hinzu, um das Ende des Wortes zu signalisieren.</li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Trie%20oder%20Pr%C3%A4fixbaum%20%28Digitaler%20Suchbaum%29/#beispiel-in-c_3","title":"Beispiel in C","text":"<pre><code>// Pseudocode f\u00fcr das Einf\u00fcgen in einen Trie\nvoid InsertInTrie(TrieNode root, string word)\n{\n    TrieNode currentNode = root;\n    foreach (char letter in word)\n    {\n        if (!currentNode.children.ContainsKey(letter))\n        {\n            currentNode.children[letter] = new TrieNode();\n        }\n        currentNode = currentNode.children[letter];\n    }\n    currentNode.children['*'] = null; // Ende des Wortes markieren\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Trie%20oder%20Pr%C3%A4fixbaum%20%28Digitaler%20Suchbaum%29/#erweiterung-des-tries-mit-popularitat","title":"Erweiterung des Tries mit Popularit\u00e4t","text":"<p>Um die am h\u00e4ufigsten verwendeten Begriffe als Autovervollst\u00e4ndigung vorzuschlagen, kann die Popularit\u00e4t der Begriffe im Trie gespeichert werden. Das \u201e*\u201c-Zeichen kann dabei verwendet werden, um die Popularit\u00e4t zu speichern und bei der Ausgabe der gefundenen W\u00f6rter zu ber\u00fccksichtigen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Graph/Gewichtete%20Graphen/","title":"Gewichtete Graphen","text":"<p>Gewichtete Graphen f\u00fcgen ihren Kanten weitere Informationen, sogenannte \"Gewichte\", hinzu. Diese Gewichte k\u00f6nnen verschiedene Formen annehmen, wie zum Beispiel Entfernungen, Kosten, Laufzeiten, Bandbreiten, etc., und werden verwendet, um den \"k\u00fcrzesten\", \"billigsten\", \"schnellsten\" oder \"besten\" Weg zu bestimmen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Graph/Gewichtete%20Graphen/#beispiel-routenplanung-zwischen-grostadten","title":"Beispiel: Routenplanung zwischen Gro\u00dfst\u00e4dten","text":"<p>Ein gewichteter Graph kann z.B. verwendet werden, um Routen zwischen Gro\u00dfst\u00e4dten in den USA darzustellen, wobei das Gewicht die Distanz in Meilen zwischen den benachbarten Knoten (St\u00e4dten) darstellt.</p> <p>[!example]- \ud83d\udccc Beispiel in C#: <pre><code>var graph = new Dictionary&lt;string, Dictionary&lt;string, int&gt;&gt;\n{\n    { \"Atlanta\", new Dictionary&lt;string, int&gt; { { \"Denver\", 1200 }, { \"Chicago\", 700 } } },\n    { \"Denver\", new Dictionary&lt;string, int&gt; { { \"El Paso\", 900 } } },\n    { \"Chicago\", new Dictionary&lt;string, int&gt; { { \"El Paso\", 1000 } } }\n};\n</code></pre></p> <p>Gewichtete Graphen k\u00f6nnen sowohl gerichtet als auch ungerichtet sein. In einem gerichteten Graphen kann eine Kante unterschiedliche Gewichte in entgegengesetzten Richtungen haben.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Graph/Gewichtete%20Graphen/#beispiel-flugkosten-zwischen-stadten","title":"Beispiel: Flugkosten zwischen St\u00e4dten","text":"<p>Obwohl ein Flug von Dallas nach Toronto nur 138$ kostet, kostet die andere Richtung 216$.</p> <p></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Graph/Gewichtete%20Graphen/#problem-des-kurzesten-weges-shortest-path-problem","title":"Problem des k\u00fcrzesten Weges (\"Shortest Path Problem\")","text":"<p>Das Problem des k\u00fcrzesten Weges in gewichteten Graphen besteht darin, den Pfad zu finden, der die niedrigsten Gesamtkosten zwischen zwei Knoten hat. Dies kann die geringste Entfernung, die geringsten Kosten, die k\u00fcrzeste Zeit, etc. sein.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Graph/Gewichtete%20Graphen/#beispiel-kosten-fur-fluge-zwischen-5-verschiedenen-stadten","title":"Beispiel: Kosten f\u00fcr Fl\u00fcge zwischen 5 verschiedenen St\u00e4dten","text":"<p>Wir sind in Atlanta und wollen nach El Paso fliegen. Es gibt aber keinen Direktflug. M\u00f6gliche Verbindungen sind:</p> <p> - Atlanta \u2013 Denver - El Paso: 300$ - Atlanta \u2013 Denver \u2013 Chicago \u2013 El Paso: 280$!</p> <p>Um die g\u00fcnstigste Route zu finden, k\u00f6nnte ein Algorithmus verwendet werden, der die billigste Strecke unabh\u00e4ngig von der Anzahl der Zwischenstopps bestimmt.</p> <p>[!example]- \ud83d\udccc Beispiel in C#: <pre><code>// Implementierung des Dijkstra-Algorithmus zur Berechnung der k\u00fcrzesten Wege\npublic Dictionary&lt;string, int&gt; Dijkstra(Dictionary&lt;string, Dictionary&lt;string, int&gt;&gt; graph, string start)\n{\n    var cheapestPrices = new Dictionary&lt;string, int&gt;();\n    var visited = new HashSet&lt;string&gt;();\n    cheapestPrices[start] = 0;\n\n    while (visited.Count &lt; graph.Count)\n    {\n        var currentNode = cheapestPrices\n            .Where(n =&gt; !visited.Contains(n.Key))\n            .OrderBy(n =&gt; n.Value)\n            .First().Key;\n\n        var currentPrice = cheapestPrices[currentNode];\n        foreach (var neighbor in graph[currentNode])\n        {\n            var newPrice = currentPrice + neighbor.Value;\n            if (!cheapestPrices.ContainsKey(neighbor.Key) || newPrice &lt; cheapestPrices[neighbor.Key])\n            {\n                cheapestPrices[neighbor.Key] = newPrice;\n            }\n        }\n        visited.Add(currentNode);\n    }\n\n    return cheapestPrices;\n}\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Graph/Gewichtete%20Graphen/#algorithmus-von-dijkstra","title":"Algorithmus von Dijkstra","text":"<p>Der Dijkstra-Algorithmus, formuliert von Edsger Dijkstra im Jahr 1959, ist einer der bekanntesten Algorithmen zur L\u00f6sung des k\u00fcrzesten Weges in gewichteten Graphen. Der Algorithmus verwendet eine Priorit\u00e4tswarteschlange, um den Knoten mit dem derzeit niedrigsten Preis auszuw\u00e4hlen und iterativ den billigsten Preis zu jedem anderen Knoten zu bestimmen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Graph/Gewichtete%20Graphen/#schritte-des-dijkstra-algorithmus","title":"Schritte des Dijkstra-Algorithmus","text":"<ol> <li>Initialisiere die <code>Cheapest-Price-Table</code> mit dem Startknoten und setze alle anderen auf unendlich (<code>\u221e</code>).</li> <li>Pr\u00fcfe die Preise vom Startknoten zu jedem benachbarten Knoten.</li> <li>Wenn der Preis zu einem Nachbarknoten g\u00fcnstiger ist als der aktuelle Preis in der <code>Cheapest-Price-Table</code> (oder der Nachbar ist noch nicht in der Tabelle enthalten):</li> <li>Aktualisiere die <code>Cheapest-Price-Table</code>, um den g\u00fcnstigeren Preis aufzunehmen.</li> <li>Aktualisiere die <code>Cheapest-Previous-Stopover-City-Table</code>, um die vorhergehende Stadt zu speichern.</li> <li>Besuche dann den noch nicht besuchten Knoten mit dem geringsten Preis zum Startknoten und mache ihn zum \"currentNode\".</li> <li>Wiederhole die Schritte 2-4, bis jeder Knoten besucht wurde.</li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Graph/Gewichtete%20Graphen/#effizienz-des-dijkstra-algorithmus","title":"Effizienz des Dijkstra-Algorithmus","text":"<p>Die Effizienz des Dijkstra-Algorithmus h\u00e4ngt von der verwendeten Datenstruktur ab: - Mit einem einfachen Array f\u00fcr unbesuchte Knoten: O(V^2) im schlimmsten Fall (jeder Knoten ist mit jedem verbunden). - Mit einer Priorit\u00e4tswarteschlange f\u00fcr unbesuchte Knoten: leicht bessere Effizienz.</p> <p>In jeder Implementierung erreicht der Dijkstra-Algorithmus jedoch das gew\u00fcnschte Ziel, den k\u00fcrzesten oder g\u00fcnstigsten Weg zu finden.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Graph/Graph/","title":"Graph","text":"<p>Graphen sind vielseitige Datenstrukturen, die verwendet werden, um Beziehungen zwischen Datenobjekten darzustellen. Sie finden breite Anwendung in Bereichen wie sozialen Netzwerken, Transportnetzwerken, Internet-Routing und vielem mehr.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Graph/Graph/#abbildung-eines-sozialen-netzwerks-mit-graphen","title":"Abbildung eines sozialen Netzwerks mit Graphen","text":"<p>Ein Beispiel f\u00fcr die Anwendung von Graphen ist die Modellierung eines sozialen Netzwerks. In einem sozialen Netzwerk werden Personen als Knoten (Nodes oder Vertices) und Freundschaften als Kanten (Edges) zwischen diesen Knoten dargestellt. Wenn Alice und Bob Freunde sind, gibt es eine ungerichtete Kante zwischen ihren Knoten. Dies bedeutet, dass die Beziehung in beide Richtungen besteht \u2013 wenn Alice mit Bob befreundet ist, ist Bob auch mit Alice befreundet.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Graph/Graph/#ineffiziente-datenstrukturen-fur-soziale-netzwerke","title":"Ineffiziente Datenstrukturen f\u00fcr soziale Netzwerke","text":"<p>Eine naive M\u00f6glichkeit, Freundschaften in einem sozialen Netzwerk zu speichern, w\u00e4re ein zweidimensionales Array der Freundschaftslisten:</p> <p>[!example]- Beispiel einer Freundschaftsliste <pre><code>char *friendships[] = {\n    {\"Alice\", \"Bob\"},\n    {\"Bob\", \"Cynthia\"},\n    {\"Alice\", \"Diana\"},\n    {\"Bob\", \"Diana\"},\n    {\"Elise\", \"Fred\"},\n    {\"Diana\", \"Fred\"},\n    {\"Fred\", \"Alice\"}\n};\n</code></pre></p> <p>Diese Darstellung erm\u00f6glicht es jedoch nicht, schnell alle Freunde einer bestimmten Person wie Alice zu finden, da alle Relationen durchsucht werden m\u00fcssen. Dies f\u00fchrt zu einer Zeitkomplexit\u00e4t von O(N).</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Graph/Graph/#verwendung-von-graphen-zur-modellierung-eines-sozialen-netzwerks","title":"Verwendung von Graphen zur Modellierung eines sozialen Netzwerks","text":"<p>Um dieses Problem zu l\u00f6sen, verwenden wir Graphen, die speziell f\u00fcr die Darstellung von Beziehungen entwickelt wurden. In einem Graphen entspricht jede Person einem Knoten, und jede Freundschaft ist eine Kante zwischen zwei Knoten. Die Suche nach allen Freunden von Alice kann so in konstanter Zeit O(1) erfolgen, wenn die Datenstruktur optimal organisiert ist. </p> <p>[!example]- Beispiel einer Graphenstruktur <pre><code>var friends = new Dictionary&lt;string, List&lt;string&gt;&gt;()\n{\n    { \"Alice\", new List&lt;string&gt; { \"Bob\", \"Diana\", \"Fred\" } },\n    { \"Bob\", new List&lt;string&gt; { \"Alice\", \"Cynthia\", \"Diana\" } },\n    { \"Cynthia\", new List&lt;string&gt; { \"Bob\" } },\n    { \"Diana\", new List&lt;string&gt; { \"Alice\", \"Bob\", \"Fred\" } },\n    { \"Elise\", new List&lt;string&gt; { \"Fred\" } },\n    { \"Fred\", new List&lt;string&gt; { \"Alice\", \"Diana\", \"Elise\" } }\n};\n</code></pre> Mit dieser Struktur kann die Abfrage <code>friends[\"Alice\"]</code> direkt alle Freunde von Alice zur\u00fcckgeben.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Graph/Graph/#eigenschaften-von-graphen","title":"Eigenschaften von Graphen","text":"<p>Graphen haben mehrere Eigenschaften, die sie von anderen Datenstrukturen unterscheiden:</p> <ol> <li>Unterscheidung zwischen Knoten und Kanten: Ein Knoten (vertex) repr\u00e4sentiert ein Datenobjekt (z.B. eine Person), und eine Kante (edge) stellt eine Beziehung zwischen zwei Knoten dar (z.B. Freundschaft).</li> <li>Gerichtet vs. Ungerichtet: In einem ungerichteten Graphen sind die Kanten symmetrisch (z.B. Freundschaften), w\u00e4hrend in einem gerichteten Graphen die Kanten eine Richtung haben (z.B. Follower-Beziehungen in sozialen Medien).     </li> <li>Gewichtet vs. Ungewichtet: Kanten in einem gewichteten Graphen tragen zus\u00e4tzliche Informationen wie Kosten oder Distanzen, w\u00e4hrend in einem ungewichteten Graphen alle Kanten gleich behandelt werden.        </li> <li>Zyklen und Azyklizit\u00e4t: Ein Zyklus in einem Graphen ist ein Pfad, der zu einem Knoten zur\u00fcckkehrt, w\u00e4hrend azyklische Graphen keine solchen R\u00fcckkehrpfade enthalten (z.B. B\u00e4ume).        </li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Graph/Graph/#vergleich-von-baumen-und-graphen","title":"Vergleich von B\u00e4umen und Graphen","text":"<p>B\u00e4ume sind spezielle Graphen. Sie sind zyklenfrei und es gibt genau einen Pfad zwischen zwei Knoten. Im Gegensatz dazu k\u00f6nnen Graphen Zyklen haben und m\u00fcssen nicht unbedingt vollst\u00e4ndig verbunden sein. Ein Beispiel f\u00fcr einen Zyklus ist eine Freundschaftsbeziehung, die von Alice zu Diana, Diana zu Fred und dann Fred zur\u00fcck zu Alice verl\u00e4uft.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Graph/Graph/#reprasentation-von-graphen","title":"Repr\u00e4sentation von Graphen","text":"<p>Graphen k\u00f6nnen auf verschiedene Arten gespeichert werden, abh\u00e4ngig von den Anforderungen und der Struktur der Daten:</p> <ol> <li>Adjazenzliste: Jede Liste speichert die Kantenliste eines Knotens (Nachbarn des Knotens).        </li> <li>Adjazenzmatrix: Eine 2D-Matrix, bei der Zeilen und Spalten die Knoten darstellen und die Eintr\u00e4ge die Existenz von Kanten angeben.        </li> <li>Inzidenzmatrix: Zeilen repr\u00e4sentieren Knoten und Spalten repr\u00e4sentieren Kanten.     </li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Graph/Graph/#graphensuche","title":"Graphensuche","text":"<p>Die Suche in einem Graphen ist eine h\u00e4ufige Operation, die in verschiedenen Formen durchgef\u00fchrt werden kann:</p> <ol> <li>Tiefensuche (DFS - Depth-First Search): Diese rekursive Suche beginnt bei einem Startknoten und erkundet so tief wie m\u00f6glich entlang jeder Verzweigung, bevor sie zur\u00fcckkehrt. Sie verwendet einen Stack zur R\u00fcckverfolgung.</li> </ol> <p>[!example]- Algorithmus f\u00fcr Tiefensuche <pre><code>void DepthFirstSearch(Dictionary&lt;string, List&lt;string&gt;&gt; graph, string start, HashSet&lt;string&gt; visited)\n{\n    if (visited.Contains(start)) return;\n    visited.Add(start);\n    Console.WriteLine(start);\n    foreach (var neighbor in graph[start])\n    {\n        DepthFirstSearch(graph, neighbor, visited);\n    }\n}\n</code></pre></p> <ol> <li>Breitensuche (BFS - Breadth-First Search): Diese Suche durchl\u00e4uft den Graphen in der Breite und verwendet eine Queue zur Verwaltung der Knoten. Sie eignet sich besonders gut zur Ermittlung der k\u00fcrzesten Pfade in ungewichteten Graphen.</li> </ol> <p>[!example]- Algorithmus f\u00fcr Breitensuche <pre><code>void BreadthFirstSearch(Dictionary&lt;string, List&lt;string&gt;&gt; graph, string start)\n{\n    var visited = new HashSet&lt;string&gt;();\n    var queue = new Queue&lt;string&gt;();\n    visited.Add(start);\n    queue.Enqueue(start);\n\n    while (queue.Count &gt; 0)\n    {\n        var current = queue.Dequeue();\n        Console.WriteLine(current);\n        foreach (var neighbor in graph[current])\n        {\n            if (!visited.Contains(neighbor))\n            {\n                visited.Add(neighbor);\n                queue.Enqueue(neighbor);\n            }\n        }\n    }\n}\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Graph/Graph/#komplexitat-der-graphensuche","title":"Komplexit\u00e4t der Graphensuche","text":"<p>Die Effizienz von Suchalgorithmen in Graphen h\u00e4ngt von der Anzahl der Knoten (V - Vertices) und der Kanten (E - Edges) ab. Die Big-O-Notation f\u00fcr die Suche in einem Graphen lautet O(V + E), was bedeutet, dass sowohl alle Knoten als auch alle Kanten im schlimmsten Fall untersucht werden m\u00fcssen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Datenstrukturen/Graph/Graph/#anwendungen-und-graph-datenbanken","title":"Anwendungen und Graph-Datenbanken","text":"<p>Graphen sind besonders n\u00fctzlich in Szenarien, die starke Beziehungen oder Verbindungen zwischen Datenobjekten erfordern. Dazu geh\u00f6ren soziale Netzwerke, Verkehrswege und Netzwerk-Routing. Graph-Datenbanken wie Neo4j, ArangoDB und Apache Giraph sind optimierte Datenbanken, die speziell f\u00fcr die Arbeit mit Graphen entwickelt wurden und effiziente Abfragen sowie Modifikationen von Graphdaten erm\u00f6glichen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Dynamische%20Programmierung/Bottom%20Up%20Rekursion/","title":"Bottom Up Rekursion","text":"<p>Bottom-Up-Rekursion ist eine Technik, die oft in der dynamischen Programmierung verwendet wird. Im Gegensatz zur klassischen Top-Down-Rekursion, bei der ein gro\u00dfes Problem rekursiv in kleinere Teilprobleme zerlegt wird, beginnt die Bottom-Up-Rekursion mit den einfachsten Teilproblemen und arbeitet sich iterativ zu gr\u00f6\u00dferen Problemen vor.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Dynamische%20Programmierung/Bottom%20Up%20Rekursion/#was-ist-der-unterschied-zur-top-down-rekursion","title":"Was ist der Unterschied zur Top-Down-Rekursion?","text":"<p>Bei der Top-Down-Rekursion wird ein gro\u00dfes Problem in kleinere Teilprobleme zerlegt, und diese Teilprobleme werden rekursiv gel\u00f6st. Dies f\u00fchrt oft dazu, dass dieselben Teilprobleme mehrfach gel\u00f6st werden, was zu ineffizienter Laufzeit und hohem Speicherverbrauch f\u00fchren kann.</p> <p>In der Bottom-Up-Rekursion hingegen l\u00f6sen wir das Problem iterativ, beginnend mit den einfachsten Teilproblemen und verwenden die Ergebnisse, um gr\u00f6\u00dfere Probleme zu l\u00f6sen. Dies reduziert die Anzahl der Berechnungen und spart Speicherplatz.</p> <p>[!warning] Hinweis  Bottom-Up-Ans\u00e4tze sind oft effizienter als rekursive Top-Down-Ans\u00e4tze, da sie die Berechnung von bereits gel\u00f6sten Teilproblemen vermeiden.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Dynamische%20Programmierung/Bottom%20Up%20Rekursion/#beispiel-fibonacci-zahlen","title":"Beispiel: Fibonacci-Zahlen","text":"<p>Die Fibonacci-Sequenz ist ein klassisches Beispiel, das sowohl rekursiv als auch iterativ gel\u00f6st werden kann.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Dynamische%20Programmierung/Bottom%20Up%20Rekursion/#fibonacci-mit-top-down-rekursion","title":"Fibonacci mit Top-Down-Rekursion","text":"<p>Bei der klassischen rekursiven Definition der Fibonacci-Zahlen werden viele Berechnungen mehrfach durchgef\u00fchrt:</p> <p>$$ \\text{Fib}(n) =  \\begin{cases}  0 &amp; \\text{wenn } n = 0 \\ 1 &amp; \\text{wenn } n = 1 \\ \\text{Fib}(n-1) + \\text{Fib}(n-2) &amp; \\text{wenn } n &gt; 1  \\end{cases} $$ Dies f\u00fchrt zu einer exponentiellen Zeitkomplexit\u00e4t von O(2^n), da viele Teilprobleme mehrfach berechnet werden.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Dynamische%20Programmierung/Bottom%20Up%20Rekursion/#fibonacci-mit-bottom-up-ansatz-in-c","title":"Fibonacci mit Bottom-Up-Ansatz in C","text":"<p>Im Bottom-Up-Ansatz verwenden wir eine iterative Methode, um die Fibonacci-Zahlen effizient zu berechnen:</p> <p>[!example]- <pre><code>public int FibBottomUp(int n)\n{\n    if (n == 0) return 0;\n    if (n == 1) return 1;\n    \n    int[] fib = new int[n + 1];\n    fib[0] = 0;\n    fib[1] = 1;\n\n    for (int i = 2; i &lt;= n; i++)\n    {\n        fib[i] = fib[i - 1] + fib[i - 2];\n    }\n\n    return fib[n];\n}\n</code></pre></p> <p>Erkl\u00e4rung:</p> <ol> <li>Initialisierung: Die ersten beiden Werte der Fibonacci-Sequenz werden initialisiert: <code>fib[0] = 0</code> und <code>fib[1] = 1</code>.</li> <li>Iterative Berechnung: Eine Schleife berechnet die Werte von <code>fib[2]</code> bis <code>fib[n]</code> schrittweise.</li> <li>Verwendung von Zwischenergebnissen: Jedes neue Fibonacci-Zahlenpaar wird durch Addition der beiden vorhergehenden Werte berechnet.</li> <li>Effizienz: Dieser Ansatz hat eine Zeitkomplexit\u00e4t von O(n) und eine Speicherkomplexit\u00e4t von O(n). </li> </ol> <p>[!info] \ud83d\udca1 Tipp:  Man kann den Speicherbedarf auf O(1) reduzieren, indem man nur die letzten beiden berechneten Werte speichert und diese bei jedem Schritt aktualisiert.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Dynamische%20Programmierung/Bottom%20Up%20Rekursion/#wann-sollte-bottom-up-rekursion-verwendet-werden","title":"Wann sollte Bottom-Up-Rekursion verwendet werden?","text":"<p>Bottom-Up-Rekursion ist besonders n\u00fctzlich, wenn:</p> <ul> <li>Das Problem durch die Zerlegung in kleinere Teilprobleme effizienter gel\u00f6st werden kann.</li> <li>Die Teilprobleme \u00fcberlappen und mehrfach berechnet werden, wie im Fall des klassischen rekursiven Ansatzes.</li> <li>Iterative L\u00f6sungen bevorzugt werden, um Stack-Overflows zu vermeiden und den Speicher effizienter zu nutzen.</li> </ul> <p>Typische Probleme, bei denen der Bottom-Up-Ansatz bevorzugt wird, umfassen dynamische Programmierungsprobleme wie das Rucksackproblem, die Berechnung von Pfaden in Gittern oder die Berechnung der l\u00e4ngsten gemeinsamen Teilfolge.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Dynamische%20Programmierung/Dynamische%20Programmierung/","title":"Dynamische Programmierung","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Dynamische%20Programmierung/Dynamische%20Programmierung/#definition","title":"Definition","text":"<p>Dynamische Programmierung (DP) ist eine Optimierungstechnik f\u00fcr rekursive Probleme, bei denen sich Teilprobleme \u00fcberlappen. Durch das Speichern von Zwischenergebnissen (Memoisation) oder das schrittweise Aufbauen einer L\u00f6sung (Bottom-Up-Ansatz) kann die Laufzeit eines Algorithmus erheblich verbessert werden.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Dynamische%20Programmierung/Dynamische%20Programmierung/#rekursive-probleme-und-ineffizienz","title":"Rekursive Probleme und Ineffizienz","text":"<p>Rekursive Algorithmen k\u00f6nnen ineffizient sein, wenn sie identische Teilprobleme mehrfach berechnen. Ein klassisches Beispiel ist die naive Berechnung der Fibonacci-Folge, bei der dieselben Werte mehrfach berechnet werden, was zu einer exponentiellen Laufzeit (O(2^n)) f\u00fchrt.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Dynamische%20Programmierung/Dynamische%20Programmierung/#geschwindigkeitsfallen-in-rekursivem-code","title":"Geschwindigkeitsfallen in rekursivem Code","text":"<ul> <li>Unn\u00f6tige rekursive Aufrufe: Bei einem rekursiven Ansatz, der dieselben Berechnungen mehrfach durchf\u00fchrt, entstehen unn\u00f6tige Aufrufe, die vermieden werden sollten.</li> <li>Beispiel: Die naive Berechnung der gr\u00f6\u00dften Zahl in einem Array f\u00fchrt zu einer exponentiellen Anzahl von Aufrufen, wenn jedes Element mit allen anderen rekursiv verglichen wird.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Dynamische%20Programmierung/Dynamische%20Programmierung/#optimierung-durch-dynamische-programmierung","title":"Optimierung durch dynamische Programmierung","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Dynamische%20Programmierung/Dynamische%20Programmierung/#memoisation-top-down-ansatz","title":"Memoisation (Top-Down-Ansatz)","text":"<p>Memoisation speichert die Ergebnisse von Funktionen in einer Datenstruktur wie einem Dictionary, sodass wiederholte Berechnungen vermieden werden. Bei der Berechnung der Fibonacci-Folge beispielsweise wird jedes Teilergebnis in einem Dictionary gespeichert und bei Bedarf wiederverwendet.</p> <p>[!example] C# Beispiel: Fibonacci-Berechnung mit Memoisation <pre><code>using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static Dictionary&lt;int, int&gt; memo = new Dictionary&lt;int, int&gt;();\n\n    static int Fibonacci(int n)\n    {\n        if (memo.ContainsKey(n))\n            return memo[n];\n\n        if (n &lt;= 2)\n            return 1;\n\n        memo[n] = Fibonacci(n - 1) + Fibonacci(n - 2);\n        return memo[n];\n    }\n\n    static void Main()\n    {\n        Console.WriteLine(Fibonacci(10)); // Output: 55\n    }\n}\n</code></pre></p> <ul> <li>Vorteil: Reduziert die Laufzeit von O(2^n) auf O(n), da jedes Teilproblem nur einmal berechnet wird.</li> <li>Nachteil: Zus\u00e4tzlicher Speicherbedarf f\u00fcr das Dictionary.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/1.%20Klausur/","title":"1. Klausur","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/1.%20Klausur/#1-algorithmenanalyse","title":"1. Algorithmenanalyse","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/1.%20Klausur/#big-o","title":"Big O","text":"<pre><code>for i in range(n): \n    for j in range(i): \n        # Konstante Anzahl an Operationen\n</code></pre> <p>Bestimme die genaue Laufzeit in Abh\u00e4ngigkeit von n und gib die asymptotische Laufzeit in O-Notation an.</p> <p>[!example]- L\u00f6sung Der Algoryhtmus hat eine Zeit Komplexit\u00e4t von O(n\u00b2)</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/1.%20Klausur/#vergleich-buggle-sort-und-selection-sort","title":"Vergleich Buggle Sort und Selection Sort","text":"<p>Vergleiche Bubble Sort und Selection Sort hinsichtlich ihrer Best-, Worst- und Average-Case Laufzeit. Unter welchen Bedingungen ist welcher Algorithmus vorzuziehen?</p> <p>[!example]- L\u00f6sung |              | Bubble Sort | Selection Sort | | ------------ | ----------- | -------------- | | Worst Case   | O(n\u00b2)       | O(n\u00b2)          | | Average Case | O(n\u00b2)       | O(n\u00b2)          | | Best Case    | O(n)       | O(n\u00b2)                  | Einfach nicht benutzen, da immer schlecht. Au\u00dfer bei Einstig zu Sortier Algorythmen. Sehr hilfreich</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/1.%20Klausur/#2-datenstrukturen","title":"2. Datenstrukturen","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/1.%20Klausur/#stack-vs-heap","title":"Stack vs Heap","text":"<p>Erkl\u00e4re den Unterschied zwischen einem Stack und einer Queue anhand von Anwendungsbeispielen.</p> <p>[!example]- L\u00f6sung</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/1.%20Klausur/#stacks","title":"Stacks","text":"<p>Stacks = Last In, First Out Sie k\u00f6nnen benutzt werden, um Beispielswei\u00dfe einen String umzudrehen und das relativ performant</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/1.%20Klausur/#queues","title":"Queues","text":"<p>Queues hei\u00dft First In, First Out Sie k\u00f6nnen sehr praktisch f\u00fcr Warteschlangen im Call Center Verwendet werden</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/1.%20Klausur/#heaps","title":"Heaps","text":"<p>Beschreibe die Funktionsweise eines Min-Heaps. Wie kann man ein Element in einen Min-Heap einf\u00fcgen und l\u00f6schen?</p> <p>[!example]- L\u00f6sung Ein Min-Heap hat in der Wurzel immer die Kleinste Zahl stehen und die Knoten weiter unten, werden dann st\u00fcck f\u00fcr St\u00fcck gr\u00f6\u00dfer. </p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/1.%20Klausur/#einfugen","title":"Einf\u00fcgen","text":"<p>Um ein Element in den Min-Heap einzuf\u00fcgen wird das Element zuerst im n\u00e4chsten Freien Knoten eingef\u00fcgt. (Von Links nach Rechts)  Als n\u00e4chstes wird das Eingef\u00fcgte Element mit seinem Eltern Knoten Verglichen. Falls das Element kleiner ist als der Eltern Knoten wird getauscht. Dies geht solange bis es einen Eltern Knoten gibt. welcher kleiner ist als das eingef\u00fcgte Element oder das Element selbst zur Wurzel wird</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/1.%20Klausur/#loschen","title":"L\u00f6schen","text":"<p>Im Min-Heap kann nur die Wurzel gel\u00f6scht werden. Sobald die Wurzel gel\u00f6scht ist, wird der Letzte Knoten, der Wurzel Knoten. Dann wird getestet ob ein Kindknoten kleiner ist, falls ja wird getauscht und so weiter</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/1.%20Klausur/#graphen","title":"Graphen","text":"<p>Was ist eine Adjazenzmatrix und was eine Adjazenzliste? Welche Vorteile und Nachteile haben beide Darstellungsformen von Graphen?</p> <p>[!example]- L\u00f6sung Eine Adjazenzmatrix ist ein 2 Dimensionales Array, welches einen Graphen abbildet bzw die Beziehungen innerhalb des Graphen. Eine Adjazenzliste macht das gleiche wie die Adjazenzmatrix jedoch wird hier kein Array verwendet, sondern die Bezihungen werden \u00fcber Verketete Listen dargestellt | Adjazenzliste              | Adjazenzmatrix             | | -------------------------- | -------------------------- | | Leichter zu Implementieren | Performanter               | |      Geringer Speicherbedarf                      | Schwerer zu Implementieren |</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/1.%20Klausur/#3algorithmen","title":"3.Algorithmen:","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/1.%20Klausur/#quicksort","title":"Quicksort","text":"<p>Erkl\u00e4re das Prinzip von Quicksort und analysiere seine durchschnittliche Laufzeit.</p> <p>[!example]- L\u00f6sung Quicksort setzt auf Divide and Conquer. Das hei\u00dft zuerst wird der Array \"aufgespalten\" nach dem sogennatne Pivot Element. Alles was kleiner ist als es kommt links der rest Rechts. Das geht so lange bis nur noch eins \u00fcbrig ist. Dann geht es zur\u00fcck wieder hoch indem der array sortiert zusammengesetzt wird. Die Durchschnittliche Laufzeit ist O(n log n)</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/1.%20Klausur/#prim","title":"Prim","text":"<p>Wie funktioniert der Algorithmus von Prim zur Bestimmung eines minimal spannenden Baums?</p> <p>[!example]- L\u00f6sung Der Algorithmus funktioniert, idem erst ein Startpunkt ausgew\u00e4hlt wird, dies kann man selbst bestimmen. Dann wird die Kante mit dem geringsten Gewicht ausgew\u00e4hlt zum n\u00e4chsten Knoten. Dann wird wieder die Kante mit dem geringsten Gewicht gesucht und ausgew\u00e4hlt. Dies geht soweit, bis alle Knoten verbunden sind.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/1.%20Klausur/#huffman-codierung","title":"Huffman-Codierung","text":"<p>Beschreibe die Huffman-Codierung und ihre Anwendung in der Datenkompression.</p> <p>[!example]- L\u00f6sung Absolut gar keine Ahnung</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/1.%20Klausur/#4-problemlosen","title":"4 Probleml\u00f6sen:","text":"<p>Wie kann man einen Trie effizient implementieren, um W\u00f6rter in einem gro\u00dfen Text zu suchen?</p> <p>[!example]- L\u00f6sung Am besten Implementiert man ein Trie mit Hash Tabellen. Da hier der Zugriff und die Suche sehr schnell geht.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/1.%20Klausur/#praktische-aufgaben-programmierung","title":"Praktische Aufgaben (Programmierung):","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/1.%20Klausur/#implementierung","title":"Implementierung","text":"<p>Schreibe eine rekursive Funktion zur Berechnung der Fibonacci-Zahlen.</p> <p>[!example]- L\u00f6sung <pre><code>public static int Fibonacci(int n)\n    if(n &lt;= 1)\n        return n;\n    else\n        return Fibonacci(n -1) + Fibonacchi(n-2);\n</code></pre></p> <p>Implementiere einen Merge Sort Algorithmus.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/1.%20Klausur/#problemlosung","title":"Probleml\u00f6sung","text":"<p>Implementiere eine Funktion, die pr\u00fcft, ob ein gegebener String ein Palindrom ist.</p> <p>[!example]- L\u00f6sung <pre><code>public static bool is StringPlaindrom(string idk)\n{\n    var reverseString = string.Empty;\n    for(int i = idk.Length-1; i &lt;= 0; i--)\n    {\n        reverseString += idk[i];\n    }\n    if(reverseString == idk)\n        return true;\n    else\n        return false;\n}\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/2.%20Klausur/","title":"2. Klausur","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/2.%20Klausur/#1-big-o-notation","title":"1. Big O Notation","text":"<p>Frage: Bestimmen Sie die Zeitkomplexit\u00e4t der folgenden Algorithmen. Geben Sie die Big-O-Notation an.</p> <ul> <li>a) Eine Schleife, die \u00fcber ein Array der Gr\u00f6\u00dfe \\(n\\) l\u00e4uft und f\u00fcr jedes Element eine konstante Zeitoperation durchf\u00fchrt.</li> <li>b) Eine Schleife in einer Schleife, beide laufen von 1 bis \\(n\\), die innere Schleife f\u00fchrt ebenfalls konstante Zeitoperationen durch.</li> </ul> <p>[!example]- L\u00f6sung O(N) O(N\u00b2)</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/2.%20Klausur/#2-bubble-sort-und-selection-sort","title":"2. Bubble Sort und Selection Sort","text":"<p>Frage: Implementieren Sie den Bubble-Sort-Algorithmus in Pseudocode und erl\u00e4utern Sie, warum seine Zeitkomplexit\u00e4t im schlechtesten Fall O(n\u00b2) betr\u00e4gt.</p> <p>[!example]- L\u00f6sung <pre><code>public static void BubbleSort(int[] array)\n{\n   for(int i = 0; i &lt; array.Length-1; i++)\n   {\n       for(int j = i; j &lt; array.Length -1; j++)\n       {\n           if(array[i] &lt; array[j])\n           {\n               var temp = array[j];\n               array[j] = array[i];\n               array[i] = temp;\n           }\n       }\n   }\nreturn array;\n}\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/2.%20Klausur/#3-hashen-und-optimieren","title":"3. Hashen und Optimieren","text":"<p>Frage: Erl\u00e4utern Sie das Prinzip einer Hashtabelle</p> <p>[!example]- L\u00f6sung Hashtabellen haben einen Key und ein Value. Der Key wird immer gehasht. Der Vorteil der Tabellen ist, das man sehr schnell nach Keys suchen kann (O(1)). Wodruch einige Operationen wie Cashing, Memoistation oder auch Algorythmen eine geringere Komplexit\u00e4t aufweisen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/2.%20Klausur/#6-suchbaume-und-heaps","title":"6. Suchb\u00e4ume und Heaps","text":"<p>Frage: Was ist der Unterschied zwischen einem Bin\u00e4ren Suchbaum (BST) und einem Heap? Erkl\u00e4ren Sie, wann man einen Heap gegen\u00fcber einem BST bevorzugen sollte.</p> <p>[!example]- L\u00f6sung</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/2.%20Klausur/#binarer-suchbaum","title":"Bin\u00e4rer Suchbaum:","text":"<ul> <li>Stark Sortiert, also man kann gut suchen</li> <li>linke Seite kleiner als Wurzel, Rechte Seite Gr\u00f6\u00dfer</li> <li>Kann bei \u00f6terem Suchen sehr hilfreich und N\u00fctzlich sein</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/2.%20Klausur/#heap","title":"Heap","text":"<ul> <li>Schwache Sortierung</li> <li>Kleinstes/ Gr\u00f6\u00dfte Zahl als Wurzel</li> <li>Sehr gut, wenn man immer nur das kleinste odr Gr\u00f6\u00dfte Zahl haben will</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/3.%20Klausur/","title":"3. Klausur","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/3.%20Klausur/#1-big-o-notation","title":"1. Big O-Notation","text":"<p>Gegeben sei die folgende Funktion: <pre><code>void exampleFunction(int n) {\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = 0; j &lt; n; j++) {\n            Console.WriteLine(i + j);\n        }\n    }\n}\n</code></pre> Aufgabe: Bestimme die Laufzeitkomplexit\u00e4t dieser Funktion in Big O-Notation und erkl\u00e4re dein Vorgehen.</p> <p>[!example]- L\u00f6sung Die Funktion hat eine Komlexit\u00e4t von O(N\u00b2) -&gt; Sie hat zwei For Schleifen, welche jeweils zweil mal bis n laufen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/3.%20Klausur/#2-bubble-und-selection-sort","title":"2. Bubble und Selection Sort","text":"<p>a) Implementiere den Bubble-Sort-Algorithmus in C#. b) Implementiere den Selection-Sort-Algorithmus in C#. c) Vergleiche die beiden Algorithmen bez\u00fcglich ihrer Laufzeitkomplexit\u00e4t im besten, durchschnittlichen und schlechtesten Fall.</p> <p>[!example]- L\u00f6sung</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/3.%20Klausur/#bubble-sort","title":"Bubble-Sort","text":"<pre><code>public static void BubbleSort(int[] array)\n{\nfor(int i = 0; i &lt; array.Length-1; i++)\n{\nfor(int j = 0; j &lt; array.Length - i -2; j++)\n{\nif(array[j] &gt; array[j+1])\n{\nvar temp = array[j];\narray[j] = array[j+1];\narray[j+1] = temp;\n}\n}\n}\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/3.%20Klausur/#selection-sort","title":"Selection Sort","text":"<p><pre><code>public static void SelectionSort(int[] array)\n{\nfor(int i = 0; i &lt; array.Length-1; i++)\n{\nint smallestNumberIndex = i;\nfor(int j = i; j &lt; array-Length -1; j++ )\n {\n if(array[smallestNumberIndex] &gt; array[j])\n smallestNumberIndex = j;\n }\n var temp = array[smallestNumberIndex];\n array[smallestNumberIndex] = array[i];\n array[i] = array[smallestNumberIndex];\n}\n}\n</code></pre> Beide Algorithmen haben im schlechtesten Fall O(n\u00b2)</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/3.%20Klausur/#3-hashing","title":"3. Hashing","text":"<p>a) Erkl\u00e4re, wie Hashing funktioniert.  b) Welche Kollisionstechniken gibt es und wie funktionieren sie? Beschreibe mindestens zwei Methoden.</p> <p>[!example]- L\u00f6sung</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/3.%20Klausur/#a","title":"a","text":"<p>Hashing Verwendet Mathematische Operationen um gro\u00dfe Zahlen in kleinere Zahlen umzuwandeln -&gt; Es k\u00f6nnen dadurch sehr einfach Schl\u00fcssel zum Suchen erzeugt werden.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/3.%20Klausur/#b","title":"b","text":"<p>Entweder Verkettung -&gt; also in einem Key, wird dann eine neue Hashtabelle erstellt um dann auf die gleichen Werte zuzugreifen, oder inplace also man verschiebt den Wert um 1</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Klausur%20Aufgaben/Prompt/","title":"Prompt","text":"<p>Hey, ich bin aktuell an der DHBW Heidenheim und Studiere Allgemeine Informatik im 2. Semester. Aktuell bereite ich mich auf die Theoretisch Informatik 2 Klausur.</p> <p>Die Themen sind:</p> <ul> <li> <p>Big O</p> </li> <li> <p>Bubble und Selection Sort</p> </li> <li> <p>Hashen und Optimieren</p> </li> <li> <p>Stacks, Queues und Rekursion</p> </li> <li> <p>Dynamisches Programmieren, Quicksort</p> </li> <li> <p>Suchb\u00e4ume und Heaps</p> </li> <li> <p>Tries und Graphen</p> </li> <li> <p>Prim, Kruskal</p> </li> <li> <p>Huffman Codierung</p> </li> <li> <p>Merge und Counting Sort</p> </li> <li> <p>Editierdistanz</p> </li> <li> <p>Externe Datenmegen</p> </li> </ul> <p>Es kann zudem dran kommen, das ein Algorithmus prgrammiert werden muss.</p> <p>Kannst du mir bitte Klausur Aufgaben generieren, die angemessen sind?</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Spannb%C3%A4ume/Algorithmus%20von%20Kruskal/","title":"Algorithmus von Kruskal","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Spannb%C3%A4ume/Algorithmus%20von%20Kruskal/#einfuhrung","title":"Einf\u00fchrung","text":"<p>Der Algorithmus von Kruskal ist ein gieriger Algorithmus, der 1956 von Joseph Kruskal in der Zeitschrift \"Proceedings of the American Mathematical Society\" ver\u00f6ffentlicht wurde. Er wird verwendet, um den minimalen Spannbaum (MST) eines ungerichteten, kantengewichteten und zusammenh\u00e4ngenden Graphen zu finden. Ein minimaler Spannbaum ist ein Teilgraph, der alle Knoten des Graphen umfasst und die Summe der Kantenkosten minimiert, ohne dabei Zyklen zu bilden.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Spannb%C3%A4ume/Algorithmus%20von%20Kruskal/#funktionsweise-des-algorithmus-von-kruskal","title":"Funktionsweise des Algorithmus von Kruskal","text":"<p>Der Algorithmus von Kruskal arbeitet nach dem gierigen Prinzip und folgt diesen Schritten:</p> <ol> <li>Sortieren der Kanten: Alle Kanten des Graphen werden nach ihren Gewichten in aufsteigender Reihenfolge sortiert.</li> <li>Initialisierung: Beginnen Sie mit einem leeren Teilgraphen, der keine Kanten enth\u00e4lt.</li> <li>Kantenauswahl: Durchlaufen Sie die sortierten Kanten und f\u00fcgen Sie jede Kante hinzu, die zwei verschiedene Komponenten verbindet, ohne dabei einen Zyklus zu bilden.</li> <li>Abbruchbedingung: Der Prozess endet, wenn der Teilgraph genau \\(V-1\\) Kanten enth\u00e4lt (wobei \\(V\\) die Anzahl der Knoten im Graphen ist).</li> </ol> <p></p> <p>[!EXAMPLE]- Beispiel in C# <pre><code>using System;\nusing System.Collections.Generic;\n\nclass KruskalAlgorithm\n{\n    // Repr\u00e4sentiert eine Kante mit ihren beiden Enden (u, v) und dem Gewicht\n    public class Edge : IComparable&lt;Edge&gt;\n    {\n        public int U, V, Weight;\n        public Edge(int u, int v, int weight)\n        {\n            U = u;\n            V = v;\n            Weight = weight;\n        }\n        \n        // Zum Sortieren der Kanten nach Gewicht\n        public int CompareTo(Edge compareEdge)\n        {\n            return this.Weight.CompareTo(compareEdge.Weight);\n        }\n    }\n\n    // Finden des Wurzelknotens des Knotens u\n    static int Find(int[] parent, int u)\n    {\n        if (parent[u] != u)\n            parent[u] = Find(parent, parent[u]);\n        return parent[u];\n    }\n\n    // Vereinigung zweier Teilb\u00e4ume\n    static void Union(int[] parent, int[] rank, int u, int v)\n    {\n        int rootU = Find(parent, u);\n        int rootV = Find(parent, v);\n\n        if (rank[rootU] &lt; rank[rootV])\n            parent[rootU] = rootV;\n        else if (rank[rootU] &gt; rank[rootV])\n            parent[rootV] = rootU;\n        else\n        {\n            parent[rootV] = rootU;\n            rank[rootU]++;\n        }\n    }\n\n    // Anwendung des Kruskal-Algorithmus\n    public static void KruskalMST(int nodes, List&lt;Edge&gt; edges)\n    {\n        List&lt;Edge&gt; result = new List&lt;Edge&gt;();\n        int[] parent = new int[nodes];\n        int[] rank = new int[nodes];\n\n        // Initialisieren der Teilb\u00e4ume\n        for (int i = 0; i &lt; nodes; i++)\n        {\n            parent[i] = i;\n            rank[i] = 0;\n        }\n\n        // Sortieren der Kanten nach Gewicht\n        edges.Sort();\n\n        foreach (Edge edge in edges)\n        {\n            int u = Find(parent, edge.U);\n            int v = Find(parent, edge.V);\n\n            if (u != v) // Kein Zyklus gebildet\n            {\n                result.Add(edge);\n                Union(parent, rank, u, v);\n            }\n        }\n\n        // Ausgabe der minimalen Spannbaumkanten\n        Console.WriteLine(\"Kanten im minimalen Spannbaum:\");\n        foreach (Edge edge in result)\n            Console.WriteLine($\"{edge.U} -- {edge.V} == {edge.Weight}\");\n    }\n}\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Spannb%C3%A4ume/Algorithmus%20von%20Kruskal/#unterschiede-zwischen-kruskal-und-prim","title":"Unterschiede zwischen Kruskal und Prim","text":"Kriterium Algorithmus von Prim Algorithmus von Kruskal Startpunkt Beliebiger Startknoten Startkante durch minimale Kosten gegeben Kreisvermeidung Durch Konstruktion von m\u00f6glichen Kanten Muss aktiv gepr\u00fcft und vermieden werden Kostenakkumulation Kosten statistisch gleichverteilt Sp\u00e4testm\u00f6gliche Budgetbindung Parallelisierbarkeit H\u00f6here Parallelisierbarkeit Wenig M\u00f6glichkeiten zur Parallelisierung"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Spannb%C3%A4ume/Algorithmus%20von%20Kruskal/#anwendungsgebiete","title":"Anwendungsgebiete","text":"<ul> <li>Netzwerkdesign: Minimale Verkabelungskosten beim Aufbau von Netzwerken.</li> <li>Stra\u00dfen- und Bahnnetze: Planung von kosteneffizienten Verbindungswegen.</li> <li>Vermeidung von Zyklen in Computernetzwerken: Umleitung von Datenpaketen ohne Schleifen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Spannb%C3%A4ume/Algorithmus%20von%20Kruskal/#fazit","title":"Fazit","text":"<p>Der Algorithmus von Kruskal ist ideal f\u00fcr Graphen mit wenigen Kanten (sparsame Graphen) und bietet eine effiziente M\u00f6glichkeit, minimale Spannb\u00e4ume zu berechnen, insbesondere wenn die Kanten bereits sortiert oder mit einer Datenstruktur wie einer Priorit\u00e4tswarteschlange organisiert sind.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Spannb%C3%A4ume/Algorythmus%20von%20Prim/","title":"Algorythmus von Prim","text":"<p>Der Algorithmus von Prim ist ein Gierige Algorithmen, der darauf abzielt, den minimalen Spannbaum eines Graphen zu finden, indem er immer die Kante mit dem kleinsten Gewicht ausw\u00e4hlt, die zu einem neuen Knoten f\u00fchrt. </p> <ul> <li>Der Algorithmus startet an einem beliebigen Knoten und f\u00fcgt sukzessive die kleinste Kante hinzu, die zu einem noch nicht besuchten Knoten f\u00fchrt.</li> <li>Dies wird so lange wiederholt, bis alle Knoten besucht wurden und der MST gebildet ist.</li> </ul> <p></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Spannb%C3%A4ume/Algorythmus%20von%20Prim/#eigenschaften-des-algorithmus","title":"Eigenschaften des Algorithmus:","text":"<ul> <li>Effizient: Die Effizienz h\u00e4ngt von der effizienten Verwaltung der m\u00f6glichen Kanten ab (z.B. durch Verwendung eines bin\u00e4ren Min-Heaps).</li> <li>Laufzeit: Die Laufzeit betr\u00e4gt <code>(Kanten + Knoten) * log(Knoten)</code>, was in der Praxis effizient ist f\u00fcr gro\u00dfe Graphen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Spannb%C3%A4ume/Algorythmus%20von%20Prim/#anwendungsgebiete","title":"Anwendungsgebiete","text":"<ul> <li>Netzwerkdesign: Aufbau von Netzwerken ohne Schleifen.</li> <li>Transportplanung: Effiziente Verbindungen wie Pipeline-Netzwerke oder Bew\u00e4sserungssysteme.</li> <li>Labyrinth-Erstellung: Minimaler Spannbaum hilft bei der Konstruktion endlicher Labyrinthe.</li> <li>Routenoptimierung: Basis f\u00fcr L\u00f6sungen des \"Travelling Salesman Problems\".</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Spannb%C3%A4ume/Algorythmus%20von%20Prim/#ablauf","title":"Ablauf","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Spannb%C3%A4ume/Gierige%20Algorithmen/","title":"Gierige Algorithmen","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Spannb%C3%A4ume/Gierige%20Algorithmen/#was-sind-gierige-algorithmen","title":"Was sind gierige Algorithmen?","text":"<p>Ein gieriger Algorithmus ist ein algorithmisches Paradigma, das bei der L\u00f6sung eines Problems schrittweise Entscheidungen trifft. Bei jedem Schritt w\u00e4hlt der Algorithmus die Option, die in diesem Moment am besten erscheint, ohne R\u00fccksicht auf die global optimale L\u00f6sung. Die Idee hinter gierigen Algorithmen ist, dass eine Reihe von lokalen Optima zu einer global optimalen L\u00f6sung f\u00fchren k\u00f6nnte.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Spannb%C3%A4ume/Gierige%20Algorithmen/#funktionsweise","title":"Funktionsweise","text":"<p>Gierige Algorithmen arbeiten in der Regel nach folgendem Muster:</p> <ol> <li>Initialisierung: Starten Sie mit einer leeren L\u00f6sung.</li> <li>Schrittweise Auswahl: W\u00e4hlen Sie in jedem Schritt die beste verf\u00fcgbare Option aus, die den gr\u00f6\u00dften unmittelbaren Nutzen bringt.</li> <li>Pr\u00fcfung: \u00dcberpr\u00fcfen Sie, ob die aktuelle Auswahl zu einer g\u00fcltigen L\u00f6sung f\u00fchrt.</li> <li>Wiederholung: Wiederholen Sie die Auswahl und Pr\u00fcfung, bis eine vollst\u00e4ndige L\u00f6sung gefunden ist.</li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Spannb%C3%A4ume/Gierige%20Algorithmen/#eigenschaften-von-gierigen-algorithmen","title":"Eigenschaften von gierigen Algorithmen","text":"<ul> <li>Gierige Auswahl: Treffen Sie immer die Entscheidung, die in diesem Moment am vorteilhaftesten erscheint.</li> <li>Optimalit\u00e4tsprinzip: Lokale Optimierung in jedem Schritt k\u00f6nnte zur globalen Optimierung f\u00fchren.</li> <li>Keine R\u00fcckverfolgung: Einmal getroffene Entscheidungen werden nicht ge\u00e4ndert.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Spannb%C3%A4ume/Gierige%20Algorithmen/#vorteile-gieriger-algorithmen","title":"Vorteile gieriger Algorithmen","text":"<ul> <li>Einfachheit: Gierige Algorithmen sind in der Regel einfach zu implementieren und zu verstehen.</li> <li>Effizienz: Sie sind oft sehr schnell, da sie nur einmal durch die Daten gehen (h\u00e4ufig mit einer Zeitkomplexit\u00e4t von O(n log n) oder besser).</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Spannb%C3%A4ume/Gierige%20Algorithmen/#nachteile-gieriger-algorithmen","title":"Nachteile gieriger Algorithmen","text":"<ul> <li>Keine Garantie f\u00fcr die optimale L\u00f6sung: Da gierige Algorithmen nur lokale Optima ber\u00fccksichtigen, ist es m\u00f6glich, dass sie keine global optimale L\u00f6sung finden.</li> <li>Problemabh\u00e4ngigkeit: Die Effektivit\u00e4t eines gierigen Algorithmus h\u00e4ngt stark vom Problem ab. F\u00fcr einige Probleme liefern sie sehr gute Ergebnisse, f\u00fcr andere jedoch nicht.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Spannb%C3%A4ume/Gierige%20Algorithmen/#anwendungsgebiete","title":"Anwendungsgebiete","text":"<p>Gierige Algorithmen sind in vielen Bereichen der Informatik und Mathematik anwendbar, einschlie\u00dflich:</p> <ul> <li>Routenplanung und Netzwerkdesign: Optimierung von Wegen und Netzwerken, um Kosten oder Entfernungen zu minimieren.</li> <li>Datenkomprimierung: Effektive Kodierungsmethoden wie Huffman-Codierung verwenden gierige Ans\u00e4tze.</li> <li>Optimierungsprobleme: Viele Probleme der Optimierung k\u00f6nnen mit gierigen Algorithmen effizient gel\u00f6st werden, z. B. das M\u00fcnzwechselproblem.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Spannb%C3%A4ume/Minimale%20Spannb%C3%A4ume/","title":"Minimale Spannb\u00e4ume","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Spannb%C3%A4ume/Minimale%20Spannb%C3%A4ume/#definitionen","title":"Definitionen","text":"<p>Ein vollst\u00e4ndiger Graph ist ein ungerichteter, zusammenh\u00e4ngender Graph ohne Mehrfachkanten, in dem jeder Knoten mit jedem anderen Knoten durch eine Kante verbunden ist.</p> <p>Ein Spannbaum (Spanning Tree) ist ein Teilgraph eines ungerichteten, zusammenh\u00e4ngenden Graphen, der ein Baum ist (zyklenfrei) und alle Knoten des Graphen enth\u00e4lt.</p> <p>Ein minimaler Spannbaum (Minimal Spanning Tree, MST) ist ein Spannbaum eines kantengewichteten Graphen, der so gew\u00e4hlt ist, dass die Summe der Kantengewichte minimal ist. Es gibt keinen anderen Spannbaum im gleichen Graphen mit einem geringeren Gesamtgewicht.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Spannb%C3%A4ume/Minimale%20Spannb%C3%A4ume/#formale-beschreibung","title":"Formale Beschreibung","text":"<ul> <li>Ein \"Minimal Spanning Tree\" (MST) ist ein Teilgraph eines kantengewichteten Graphen, bei dem die Gesamtl\u00e4nge der Kanten, die alle Knoten verbinden, minimal ist.</li> <li>Gesucht wird ein Baum <code>T = (K, V')</code>, wobei <code>V'</code> die minimalen Verbindungen sind und <code>V' \u2286 V</code>.</li> <li>Gewichtsfunktion: <code>W(T) = \u2211w(v)</code>, wobei <code>w</code> die Gewichte der Kanten sind.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Spannb%C3%A4ume/Minimale%20Spannb%C3%A4ume/#beispiel-eines-minimalen-spannbaums","title":"Beispiel eines minimalen Spannbaums","text":"<p>[!EXAMPLE]- C# Beispiel f\u00fcr die Darstellung eines minimalen Spannbaums: <pre><code>using System;\nusing System.Collections.Generic;\n\nclass Graph\n{\n    public int Vertices { get; }\n    public List&lt;(int, int, int)&gt; Edges { get; } = new List&lt;(int, int, int)&gt;();\n\n    public Graph(int vertices)\n    {\n        Vertices = vertices;\n    }\n\n    public void AddEdge(int u, int v, int weight)\n    {\n        Edges.Add((u, v, weight));\n    }\n\n    public void PrimMST()\n    {\n        var mstSet = new bool[Vertices];\n        var parent = new int[Vertices];\n        var key = new int[Vertices];\n\n        for (int i = 0; i &lt; Vertices; i++)\n        {\n            key[i] = int.MaxValue;\n            mstSet[i] = false;\n        }\n\n        key[0] = 0;\n        parent[0] = -1;\n\n        for (int count = 0; count &lt; Vertices - 1; count++)\n        {\n            int u = MinKey(key, mstSet);\n            mstSet[u] = true;\n\n            foreach (var (v1, v2, weight) in Edges)\n            {\n                if (v1 == u || v2 == u)\n                {\n                    int v = v1 == u ? v2 : v1;\n                    if (!mstSet[v] &amp;&amp; weight &lt; key[v])\n                    {\n                        parent[v] = u;\n                        key[v] = weight;\n                    }\n                }\n            }\n        }\n\n        PrintMST(parent);\n    }\n\n    private int MinKey(int[] key, bool[] mstSet)\n    {\n        int min = int.MaxValue, minIndex = -1;\n\n        for (int v = 0; v &lt; Vertices; v++)\n        {\n            if (!mstSet[v] &amp;&amp; key[v] &lt; min)\n            {\n                min = key[v];\n                minIndex = v;\n            }\n        }\n\n        return minIndex;\n    }\n\n    private void PrintMST(int[] parent)\n    {\n        Console.WriteLine(\"Kante \\t Gewicht\");\n        for (int i = 1; i &lt; Vertices; i++)\n            Console.WriteLine($\"{parent[i]} - {i} \\t {Edges.Find(e =&gt; (e.Item1 == i &amp;&amp; e.Item2 == parent[i]) || (e.Item2 == i &amp;&amp; e.Item1 == parent[i])).Item3}\");\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        var graph = new Graph(4);\n        graph.AddEdge(0, 1, 10);\n        graph.AddEdge(0, 2, 6);\n        graph.AddEdge(0, 3, 5);\n        graph.AddEdge(1, 3, 15);\n        graph.AddEdge(2, 3, 4);\n\n        graph.PrimMST();\n    }\n}\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Querries/","title":"Querries","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Querries/#queue-als-abstrakter-datentyp","title":"Queue als Abstrakter Datentyp","text":"<p>Eine Queue ist eine Datenstruktur zur Verwaltung tempor\u00e4rer Daten und folgt dem FIFO-Prinzip (First In, First Out). Das bedeutet, dass das zuerst eingef\u00fcgte Element auch als erstes wieder entnommen wird. Dies unterscheidet sich grundlegend vom LIFO-Prinzip (Last In, First Out) des Stacks.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Querries/#eigenschaften-einer-queue","title":"Eigenschaften einer Queue","text":"<ul> <li>FIFO-Prinzip: Das erste Element, das hinzugef\u00fcgt wird, wird als erstes entfernt.</li> <li>Abstrakter Datentyp: Die Queue bietet eine bestimmte Menge an Operationen, die auf einer anderen Datenstruktur basieren k\u00f6nnen.</li> <li>Anwendungsbeispiel: Eine Schlange von Menschen an einer Kinokasse.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Querries/#operationen-einer-queue","title":"Operationen einer Queue","text":"<ol> <li>Enqueue: Einf\u00fcgen eines Elements am Ende der Queue.</li> <li>Dequeue: Entfernen eines Elements vom Anfang der Queue.</li> <li>Peek: Lesen des ersten Elements, ohne es zu entfernen.</li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Querries/#implementierung-einer-queue-in-c","title":"Implementierung einer Queue in C","text":"<p>In C# l\u00e4sst sich eine Queue mit der <code>Queue&lt;T&gt;</code>-Klasse aus dem <code>System.Collections.Generic</code>-Namespace realisieren.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Querries/#beispiel-implementierung-einer-queue","title":"Beispiel: Implementierung einer Queue","text":"<p>[!example]- Beispiel <pre><code>using System;\nusing System.Collections.Generic;\n\nclass Program\n{\n    static void Main()\n    {\n        Queue&lt;int&gt; queue = new Queue&lt;int&gt;();\n\n        // Elemente in die Queue einf\u00fcgen (Enqueue)\n        queue.Enqueue(1);\n        queue.Enqueue(2);\n        queue.Enqueue(3);\n\n        Console.WriteLine(\"Queue nach Enqueue-Operationen:\");\n        foreach (var item in queue)\n        {\n            Console.WriteLine(item);\n        }\n\n        // Erstes Element entfernen und zur\u00fcckgeben (Dequeue)\n        int dequeuedElement = queue.Dequeue();\n        Console.WriteLine($\"\\nEntferntes Element: {dequeuedElement}\");\n\n        Console.WriteLine(\"\\nQueue nach Dequeue-Operation:\");\n        foreach (var item in queue)\n        {\n            Console.WriteLine(item);\n        }\n\n        // Erstes Element lesen, ohne es zu entfernen (Peek)\n        int peekElement = queue.Peek();\n        Console.WriteLine($\"\\nErstes Element mit Peek: {peekElement}\");\n\n        Console.WriteLine(\"\\nQueue nach Peek-Operation:\");\n        foreach (var item in queue)\n        {\n            Console.WriteLine(item);\n        }\n    }\n}\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Querries/#erklarung","title":"Erkl\u00e4rung","text":"<ol> <li>Enqueue: F\u00fcgt Elemente 1, 2 und 3 in die Queue ein.</li> <li>Dequeue: Entfernt das erste Element (1) aus der Queue.</li> <li>Peek: Liest das erste Element (2), ohne es zu entfernen.</li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Querries/#weitere-anwendungen-von-queues","title":"Weitere Anwendungen von Queues","text":"<ul> <li>Druckjobs: Verwaltung von Druckauftr\u00e4gen in der Reihenfolge ihres Eingangs.</li> <li>Zwischenpuffer bei Kommunikationsprotokollen: Zwischenspeicherung von Datenpaketen zur Verarbeitung in der Reihenfolge ihres Eingangs.</li> <li>Modellierung realer Szenarien: </li> <li>Verkehr an Ampelkreuzungen</li> <li>Startfreigabe f\u00fcr Flugzeuge</li> <li>Allgemeine Warteschlangenmodelle</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Rekursion%20selbst%20erstellen/","title":"Rekursion selbst erstellen","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Rekursion%20selbst%20erstellen/#kategorien-geeigneter-probleme","title":"Kategorien geeigneter Probleme","text":"<p>Rekursion eignet sich gut f\u00fcr Probleme, bei denen Aufgaben wiederholt ausgef\u00fchrt werden m\u00fcssen, z.B. beim Countdown-Algorithmus der NASA. Die letzte Zeile der Funktion ist oft ein erneuter Aufruf der Funktion selbst.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Rekursion%20selbst%20erstellen/#rekursiver-trick-ubergabe-zusatzlicher-parameter","title":"Rekursiver Trick: \u00dcbergabe zus\u00e4tzlicher Parameter","text":"<p>Ein Beispiel f\u00fcr eine wiederholte Ausf\u00fchrung ist ein Algorithmus, der ein Array von Zahlen verdoppelt. Um dies rekursiv zu implementieren, k\u00f6nnen zus\u00e4tzliche Parameter \u00fcbergeben werden:</p> <p>[!example]- Code: Array verdoppeln</p> <pre><code>void DoubleArray(int[] arr, int index) {\n    if (index &gt;= arr.Length) return;\n    arr[index] *= 2;\n    DoubleArray(arr, index + 1);\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Rekursion%20selbst%20erstellen/#rekursive-kategorien","title":"Rekursive Kategorien","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Rekursion%20selbst%20erstellen/#1-berechnungen","title":"1. Berechnungen","text":"<p>Rekursive Funktionen k\u00f6nnen zur Berechnung von Werten verwendet werden, indem sie auf Teilprobleme angewendet werden. Zum Beispiel:</p> <ul> <li>Fakult\u00e4t: Die Fakult\u00e4t von 6 ist <code>6 * 5 * 4 * 3 * 2 * 1</code>. Die rekursive Berechnung lautet:</li> </ul> <p>[!example]- Code: Fakult\u00e4t berechnen</p> <pre><code>int Factorial(int number) {\n    if (number &lt;= 1) return 1;\n    return number * Factorial(number - 1);\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Rekursion%20selbst%20erstellen/#2-bottom-up-vs-top-down","title":"2. Bottom-Up vs. Top-Down","text":"<ul> <li>Bottom-Up: Beginnt mit den einfachsten Problemen und baut auf ihnen auf.</li> <li>Top-Down: Zerlegt das Problem in kleinere Teilprobleme.</li> </ul> <p>Beispiel f\u00fcr Bottom-Up-Rekursion:</p> <p>[!example]- Code: Bottom-Up Fakult\u00e4t</p> <pre><code>int Factorial(int number, int result = 1, int index = 1) {\n    if (index &gt; number) return result;\n    return Factorial(number, result * index, index + 1);\n}\n</code></pre> <p>Beispiel f\u00fcr Top-Down-Rekursion (berechnet Fakult\u00e4t):</p> <p>[!example]- Code: Top-Down Fakult\u00e4t</p> <pre><code>int Factorial(int number) {\n    if (number &lt;= 1) return 1;\n    return number * Factorial(number - 1);\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Rekursion%20selbst%20erstellen/#top-down-rekursion-losung-von-teilproblemen","title":"Top-Down-Rekursion: L\u00f6sung von Teilproblemen","text":"<p>Beim Top-Down-Ansatz stellt man sich vor, dass die Funktion bereits implementiert ist. Beispiele:</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Rekursion%20selbst%20erstellen/#summe-von-array-elementen","title":"Summe von Array-Elementen","text":"<p>[!example]- Code: Array-Summe berechnen</p> <pre><code>int Sum(int[] arr, int size) {\n    if (size == 0) return 0;\n    return arr[0] + Sum(arr[1..], size - 1);\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Rekursion%20selbst%20erstellen/#umkehren-eines-strings","title":"Umkehren eines Strings","text":"<p>[!example]- Code: String umkehren <pre><code>void Reverse(char[] str, int start, int end) {\n    if (start &gt;= end) return;\n    (str[start], str[end]) = (str[end], str[start]);\n    Reverse(str, start + 1, end - 1);\n}\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Rekursion%20selbst%20erstellen/#zahlen-von-x-in-einem-string","title":"Z\u00e4hlen von 'x' in einem String","text":"<p>[!example]- Code: Anzahl der 'x' z\u00e4hlen <pre><code>int CountX(string str) {\n    if (string.IsNullOrEmpty(str)) return 0;\n    return (str[0] == 'x' ? 1 : 0) + CountX(str[1..]);\n}\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Rekursion%20selbst%20erstellen/#schone-rekursionsprobleme","title":"Sch\u00f6ne Rekursionsprobleme","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Rekursion%20selbst%20erstellen/#treppenproblem","title":"Treppenproblem","text":"<p>Anzahl der Wege, um eine Treppe mit <code>n</code> Stufen zu erklimmen:</p> <p>[!example]- Code: Anzahl der Wege z\u00e4hlen</p> <pre><code>int CountWays(int n) {\n    if (n == 0) return 1;\n    if (n &lt; 0) return 0;\n    return CountWays(n - 1) + CountWays(n - 2) + CountWays(n - 3);\n}\n</code></pre> <p>Abbruchkriterien:</p> <ul> <li><code>CountWays(0)</code> gibt 1 zur\u00fcck.</li> <li><code>CountWays(-1)</code> gibt 0 zur\u00fcck.</li> </ul> <p>Zusammenfassend: Die Rekursion ist ein m\u00e4chtiges Werkzeug zur Probleml\u00f6sung, besonders wenn Probleme in kleinere, handhabbare Teilprobleme zerlegt werden k\u00f6nnen. Es ist wichtig, sowohl die Abbruchkriterien als auch die richtige Strategie (Bottom-Up oder Top-Down) zu verstehen und anzuwenden.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Rekursion/","title":"Rekursion","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Rekursion/#einfuhrung-in-die-rekursion","title":"Einf\u00fchrung in die Rekursion","text":"<p>Rekursion ist ein Konzept in der Programmierung, bei dem eine Funktion sich selbst aufruft, um ein Problem zu l\u00f6sen. Dies kann oft anstelle von Schleifen verwendet werden. Stellen Sie sich vor, Sie arbeiten f\u00fcr die NASA und m\u00fcssen einen Countdown f\u00fcr den Start eines Raumschiffs programmieren. Die Funktion soll eine Zahl als Input erhalten und die Zahlen von dieser Zahl bis 0 anzeigen. Zum Beispiel:</p> <p>[!code-csharp]-  <pre><code>using System;\n\nclass Program\n{\n    static void Main()\n    {\n        countdown(10);\n    }\n\n    static void countdown(int number)\n    {\n        if (number &lt; 0)\n        {\n            return;\n        }\n        Console.WriteLine(number);\n        countdown(number - 1);\n    }\n}\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Rekursion/#erster-versuch-mit-rekursion-","title":"Erster Versuch mit Rekursion-","text":"<p>Der erste naive Versuch k\u00f6nnte so aussehen:</p> <p>[!code-csharp]- <pre><code>using System;\n\nclass Program\n{\n    static void Main()\n    {\n        countdown(10);\n    }\n\n    static void countdown(int number)\n    {\n        Console.WriteLine(number);\n        countdown(number - 1);\n    }\n}\n</code></pre></p> <p>Dies f\u00fchrt jedoch zu einem Problem: Die Funktion wird endlos weiterlaufen und immer negativere Zahlen ausgeben. Nur weil man Rekursion verwenden kann, hei\u00dft das nicht, dass man sie unbedingt verwenden sollte.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Rekursion/#korrektur-mit-abbruchbedingung","title":"Korrektur mit Abbruchbedingung","text":"<p>Um den Countdown korrekt zu implementieren, ben\u00f6tigen wir eine Abbruchbedingung, die die Rekursion stoppt, sobald 0 erreicht wird:</p> <p>[!code-csharp]- <pre><code>using System;\n\nclass Program\n{\n    static void Main()\n    {\n        countdown(10);\n    }\n\n    static void countdown(int number)\n    {\n        if (number &lt; 0)\n        {\n            return;\n        }\n        Console.WriteLine(number);\n        countdown(number - 1);\n    }\n}\n</code></pre></p> <p>In dieser Version \u00fcberpr\u00fcft die Funktion zuerst, ob die Zahl kleiner als 0 ist. Wenn ja, beendet sie die Rekursion.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Rekursion/#beispiel-berechnung-der-fakultat","title":"Beispiel: Berechnung der Fakult\u00e4t","text":"<p>Ein klassisches Beispiel f\u00fcr rekursive Funktionen ist die Berechnung der Fakult\u00e4t einer Zahl \\( n! \\):</p> <p>[!code-csharp]- <pre><code>using System;\n\nclass Program\n{\n    static void Main()\n    {\n        int result = factorial(5);\n        Console.WriteLine(result); // Ausgabe: 120\n    }\n\n    static int factorial(int n)\n    {\n        if (n == 1)\n        {\n            return 1;\n        }\n        return n * factorial(n - 1);\n    }\n}\n</code></pre></p> <p>F\u00fcr die Berechnung der Fakult\u00e4t von 5 w\u00fcrde der rekursive Aufruf wie folgt aussehen: - factorial(5) -&gt; 5 * factorial(4) - factorial(4) -&gt; 4 * factorial(3) - factorial(3) -&gt; 3 * factorial(2) - factorial(2) -&gt; 2 * factorial(1) - factorial(1) -&gt; 1</p> <p>Die R\u00fcckkehrwerte werden dann multipliziert: - 1 (von factorial(1)) - 2 * 1 = 2 - 3 * 2 = 6 - 4 * 6 = 24 - 5 * 24 = 120</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Rekursion/#rekursion-verstehen","title":"Rekursion verstehen","text":"<p>Zum Verstehen von rekursivem Code sind zwei F\u00e4higkeiten erforderlich: 1. Rekursiven Code lesen: Identifizieren des Abbruchkriteriums und Nachverfolgen der Aufrufe. 2. Rekursiven Code schreiben: Erstellen von Funktionen mit einer klaren Abbruchbedingung und einer Rekursionsregel.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Rekursion/#rekursion-aus-sicht-des-computers","title":"Rekursion aus Sicht des Computers","text":"<p>Rekursive Aufrufe werden im Callstack des Computers gespeichert. Jeder Aufruf legt eine neue Ebene auf den Stack, die die R\u00fcckkehradresse und die aktuellen Parameter enth\u00e4lt. Bei endloser Rekursion kann der Stack \u00fcberlaufen, was zu einem \"Stack Overflow\" f\u00fchrt.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Rekursion/#anwendungsbeispiele-der-rekursion","title":"Anwendungsbeispiele der Rekursion","text":"<p>Rekursion eignet sich besonders f\u00fcr Probleme, die in verschachtelte Ebenen unterteilt sind, deren Anzahl vorher nicht bekannt ist. Ein typisches Beispiel ist die Traversierung eines Dateisystems:</p> <p>[!code-csharp]- ```csharp using System; using System.IO;</p> <p>class Program {     static void Main()     {         Traverse</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Stacks/","title":"Stacks","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Stacks/#stack-als-abstrakter-datentyp","title":"Stack als Abstrakter Datentyp","text":"<p>Ein Stack ist eine besondere Datenstruktur, die im Wesentlichen zwei Hauptoperationen unterst\u00fctzt: - Push: Ein Element wird oben auf den Stack gelegt. - Pop: Das oberste Element wird vom Stack entfernt.</p> <p>Im Gegensatz zu Arrays erm\u00f6glicht ein Stack keinen Direktzugriff \u00fcber Indizes. Stattdessen arbeitet man nur mit dem obersten Element. Dadurch unterscheidet sich die Datenstruktur Stack wesentlich von einem Array, obwohl ein Stack intern oft auf einem Array oder einer verketteten Liste basiert.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Stacks/#einsatz-von-stacks-in-der-lexikalanalyse","title":"Einsatz von Stacks in der Lexikalanalyse","text":"<p>Ein praktisches Anwendungsbeispiel f\u00fcr Stacks ist die lexikale Analyse bei der \u00dcberpr\u00fcfung der syntaktischen Korrektheit von Programmcode. Ein solcher \"Lint\"-Prozess pr\u00fcft z.B. JavaScript-Programmzeilen auf korrekte \u00f6ffnende und schlie\u00dfende Klammern <code>()</code>, <code>{}</code> und <code>[]</code>.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Stacks/#fehlerhafte-situationen","title":"Fehlerhafte Situationen","text":"<p>Es k\u00f6nnen drei Hauptfehler auftreten:</p> <p>[!example] Syntax Error Typ #1: Eine \u00f6ffnende Klammer ohne entsprechende schlie\u00dfende Klammer. <pre><code>var x = 2;\n</code></pre> Syntax Error Typ #2: Eine schlie\u00dfende Klammer ohne vorhergehende \u00f6ffnende Klammer. <pre><code>var x = 2;)\n</code></pre> Syntax Error Typ #3: Eine schlie\u00dfende Klammer, die nicht zum Typ der letzten \u00f6ffnenden Klammer passt. <pre><code>var x = [1, 2, 3)];\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Stacks/#regeln-der-analyse","title":"Regeln der Analyse","text":"<p>Die Analyse folgt einer festen Reihe von Regeln, um die Korrektheit der Klammerung zu \u00fcberpr\u00fcfen:</p> <ol> <li>Nicht-Klammer-Zeichen: Werden ignoriert.</li> <li>\u00d6ffnende Klammer: Wird auf den Stack gelegt (Push).</li> <li>Schlie\u00dfende Klammer: Wird gepr\u00fcft:</li> <li>Wenn der Stack leer ist: Syntax Error Typ #2.</li> <li>Wenn das oberste Element des Stacks nicht passt: Syntax Error Typ #3.</li> <li>Wenn das oberste Element des Stacks passt: Pop vom Stack.</li> <li>Zeilenende:</li> <li>Wenn der Stack nicht leer ist: Syntax Error Typ #1.</li> <li>Wenn der Stack leer ist: Kein Fehler.</li> </ol>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Stacks/#beispiel","title":"Beispiel","text":"<p>F\u00fcr die Zeile <code>(var x = {y: [1, 2, 3]})</code> w\u00fcrde die Analyse wie folgt ablaufen:</p> <p>[!example] 1. Die erste \u00f6ffnende Klammer <code>(</code> wird auf den Stack gelegt. 2. Die Zeichen <code>var x =</code> werden ignoriert. 3. Die \u00f6ffnende geschweifte Klammer <code>{</code> wird auf den Stack gelegt. 4. Das Zeichen <code>y:</code> wird ignoriert. 5. Die \u00f6ffnende eckige Klammer <code>[</code> wird auf den Stack gelegt. 6. Die Zeichen <code>1, 2, 3</code> werden ignoriert. 7. Die schlie\u00dfende eckige Klammer <code>]</code> wird gepr\u00fcft und passt zur letzten \u00f6ffnenden Klammer, also wird sie vom Stack entfernt. 8. Die schlie\u00dfende geschweifte Klammer <code>}</code> wird gepr\u00fcft und passt zur letzten \u00f6ffnenden Klammer, also wird sie vom Stack entfernt. 9. Die schlie\u00dfende runde Klammer <code>)</code> wird gepr\u00fcft und passt zur letzten \u00f6ffnenden Klammer, also wird sie vom Stack entfernt. 10. Am Zeilenende ist der Stack leer, daher gibt es keinen Fehler.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Theoretische%20Informatik/Stacks%2CQuerris%2C%20Rekursion/Stacks/#fehlerhafte-zeilen","title":"Fehlerhafte Zeilen","text":"<p>[!bug] Die Zeile <code>( var x = { y: [1, 2, 3] ) }</code> w\u00fcrde den Fehler \u201cUng\u00fcltige schlie\u00dfende Klammer <code>)</code> an Position 25\u201d erzeugen.</p> <p>Die Zeile <code>( var x = { y: [1, 2, 3] }</code> w\u00fcrde den Fehler \u201c<code>(</code> hat keine schlie\u00dfende Klammer\u201c erzeugen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP%20vs%20Node.js/","title":"PHP vs Node.js","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP%20vs%20Node.js/#php","title":"PHP","text":"<ul> <li>Dynamische Webseite: PHP erm\u00f6glicht die Erstellung dynamischer Webseiten.</li> <li>HTML enth\u00e4lt Code: In PHP ist der Code oft in HTML eingebettet.</li> <li>Weit verbreitet: PHP ist weit verbreitet und hat eine gro\u00dfe Nutzerbasis.</li> <li>Interpreter auf Server notwendig: Zur Ausf\u00fchrung von PHP-Code ist ein PHP-Interpreter auf dem Server erforderlich.</li> <li>CMS (WordPress, etc.): Viele Content Management Systeme wie WordPress basieren auf PHP.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP%20vs%20Node.js/#nodejs","title":"Node.js","text":"<ul> <li>Runtime: Node.js ist eine JavaScript-Laufzeitumgebung.</li> <li>Code erzeugt HTML: In Node.js wird der HTML-Code durch JavaScript erzeugt.</li> <li>Weniger verbreitet, Verbreitung steigt aber: Node.js ist weniger verbreitet als PHP, gewinnt jedoch zunehmend an Popularit\u00e4t.</li> <li>Installation auf Server notwendig: Zur Ausf\u00fchrung von Node.js-Anwendungen muss Node.js auf dem Server installiert sein.</li> <li>Webanwendungen aller Art: Node.js eignet sich f\u00fcr die Erstellung verschiedenster Webanwendungen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/Web%20Engineering/","title":"Web Engineering","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/Web%20Engineering/#allgemeine-informationen","title":"Allgemeine Informationen","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/Web%20Engineering/#klausur-themen","title":"Klausur Themen","text":"<p>Klausur \u00fcber PHP und Node.js 50 % node.js Syntax muss geschrieben werden Gro\u00dfteil Folien</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/Web%20Engineering/#termine","title":"Termine","text":"<p>30.09.2024 \u2192 Klausur</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/Klausur/1.%20Klausur%20%28Rene%29/","title":"1. Klausur (Rene)","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/Klausur/1.%20Klausur%20%28Rene%29/#teil-1-php-60-punkte","title":"Teil 1 PHP (60 Punkte)","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/Klausur/1.%20Klausur%20%28Rene%29/#1-php-grundlagen-10-punkte","title":"1. PHP Grundlagen (10 Punkte)","text":"<ul> <li>Erkl\u00e4ren Sie kurz den Unterschied zwischen include und require:<ul> <li>require wirft einen Fehler, falls die entsprechende Datei nicht gefunden wir, welche ben\u00f6tigt wird</li> <li>include wirft lediglich eine Warnung</li> </ul> </li> <li>Was sind Superglobals in PHP und nennen Sie drei Beispiele? <ul> <li>Superglobals sind Arrays, welche bestimmte globale Informationen enthalten</li> <li>$Cookie -&gt; Zeigt alle gesetzten Cookies</li> <li>$Post -&gt; Informationen zu Post</li> <li>$Server -&gt; Enth\u00e4lt Informationen zur Ausf\u00fchrungsumgebung</li> </ul> </li> <li>Schreiben Sie ein PHP-Skript, das eine Zufallszahl zwischen 1 und 100 generiert und ausgibt?     <pre><code>&lt;?php function GenerateRandom(){\n$rand = rand(1, 100)\necho $rand$\n}\n?&gt;\n</code></pre></li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/Klausur/1.%20Klausur%20%28Rene%29/#2-formulare-und-datenverarbeitung15-punkte","title":"2. Formulare und Datenverarbeitung(15 Punkte)","text":"<p>\u00b7 Erstellen Sie ein einfaches HTML-Formular mit zwei Eingabefeldern (Name und E-Mail) und einem Submit-Button. \u00b7 Schreiben Sie das zugeh\u00f6rige PHP-Skript, das die Formulardaten empf\u00e4ngt und in einer Datei speichert. \u00b7 Implementieren Sie eine einfache Validierung, um sicherzustellen, dass beide Felder ausgef\u00fcllt sind.</p> <pre><code>&lt;form&gt;\n&lt;label for=\"name\"&gt; Bitte Name eingeben&lt;/label&gt;\n&lt;input type=\"text\" id=\"name\" name=\"name\" required&gt;\n\n&lt;label for=\"mail\"&gt; Bitte Email eingeben&lt;/label&gt;\n&lt;input type=\"email\" id=\"mail\" name=\"mail\" required&gt;\n\n&lt;button type=\"submit\"&gt; Submit PLS &lt;/button&gt;\n\n&lt;?php \nif($SERVER[\"REQUEST_METHOD\"] == \"POST\")\n{\n    if(isset($_POST[\"name\"]) )\n    {\n        $data = $_POST[\"name\"] + $_POST[\"mail\"];\n    $file = output.txt;\n    }\n\n\n    file_put_contents($file, $data);\n}\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/Klausur/1.%20Klausur%20%28Rene%29/#3-datenbankanbindung","title":"3. Datenbankanbindung","text":"<p>Schreiben Sie eine SQL-Abfrage, um alle Datens\u00e4tze aus einer Tabelle namens \"kunden\" auszuw\u00e4hlen.</p> <pre><code>Select * from Kunden\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/Klausur/1.%20Klausur%20%28Rene%29/#4-fortgeschrittene-php-konzepte-15-punkte","title":"4. Fortgeschrittene PHP-Konzepte (15 Punkte)","text":"<ul> <li> <p>Erkl\u00e4ren Sie den Zweck von Sessions in PHP und wie sie verwendet werden.</p> <ul> <li>Sessionms werden in PHP daf\u00fcr verwendet, sodass bestimmte Daten global innerhalb der webseite zur Verf\u00fcgung stehen, wie der Einkaufswagen</li> </ul> </li> <li> <p>Schreiben Sie eine PHP-Funktion, die ein Array von Zahlen als Eingabe nimmt und die Summe der Zahlen zur\u00fcckgibt.</p> </li> </ul> <pre><code>&lt;?php function Count($array)\n{\n    $amount = 0;\n    for($i =0; $i&lt; count($array); $i++)\n    {\n        $amount = $amount + $array[$i];\n    }\n    return $amount;\n}\n?&gt;\n</code></pre> <ul> <li>Was ist der Unterschied zwischen $ GET und $ POST ?<ul> <li>Get \u00fcbertr\u00e4gt die Informationen an den Server \u00fcber URL Parameter was unsicher ist, bei Passw\u00f6rtern</li> <li>Post hingegen \u00fcbertr\u00e4gt die daten \u00fcber den HTTP Request Body wodurch man sie schwerer sehen kann</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/Klausur/1.%20Klausur%20%28Rene%29/#teil-2-nodejs-40-punkte","title":"Teil 2: Node.js (40 Punkte)","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/Klausur/1.%20Klausur%20%28Rene%29/#1-nodejs-grundlagen-10-punkte","title":"1. Node.js Grundlagen (10 Punkte)","text":"<ul> <li>Was ist der Event Loop in Node.js und warum ist er wichtig?</li> <li>Erkl\u00e4ren Sie den Unterschied zwischen synchronen und asynchronen Operationen in Node.js.</li> </ul> <p>Der Event Loop besteht aus zwei Teilen, zum einen dem Call Stack, dieser ist f\u00fcr synchrone Operationen und der Event Queue diese ist f\u00fcr asynchrone Operationen gedacht. Sobald der Event Loop keine Events mehr hat, wird das programm beendet. Er ist Single Threaded. Falls gr\u00f6\u00dfere Operationen anstehen, sollten diese in andere Threads ausgeleagert werden.</p> <ul> <li>Schreiben Sie ein Node.js-Skript, das den Inhalt einer Datei namens \"text.txt\" liest und in der Konsole ausgibt.</li> </ul> <pre><code>const fs = require(\"node:fs\");\n\nasync function ReadFile(){\n    const data = await fs.promise.readFile(\"text.txt\");\n    return data\n}\n\n\n(async () =&gt; {\n    try{\n    var data = await ReadFile();\n    console.log(data);\n    }\n    catch(e)\n    {\n    console.error(e);\n    }\n})();\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Datentypen/","title":"PHP Datentypen","text":"Datentyp Bezeichnung Beispiel <code>int</code> Ganzzahl <code>123</code>, <code>-456</code>, <code>0</code> <code>float</code> Gleitkommazahl <code>1.23</code>, <code>-4.56</code>, <code>0.0</code> <code>string</code> Zeichenkette <code>\"Hallo Welt\"</code>, <code>'PHP'</code>, <code>\"\"</code> <code>bool</code> Boolean <code>true</code>, <code>false</code> <code>array</code> Array <code>[1, 2, 3]</code>, <code>[\"a\", \"b\", \"c\"]</code> <code>object</code> Objekt <code>$obj = new Klasse()</code> <code>NULL</code> Null-Wert <code>NULL</code> <code>resource</code> Ressource <code>fopen(\"datei.txt\", \"r\")</code> <code>callable</code> Aufrufbar <code>function() { return true; }</code> <code>iterable</code> Iterierbar <code>array</code>, <code>Traversable</code>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Datentypen/#beispiele","title":"Beispiele","text":"<p>[!example]- Ganzzahl (<code>int</code>) <pre><code>&lt;?php\n$zahl = 123;\necho $zahl; // Ausgabe: 123\n?&gt;\n</code></pre></p> <p>[!example]- Gleitkommazahl (<code>float</code>) <pre><code>&lt;?php\n$kommazahl = 1.23;\necho $kommazahl; // Ausgabe: 1.23\n?&gt;\n</code></pre></p> <p>[!example]- Zeichenkette (<code>string</code>) <pre><code>&lt;?php\n$text = \"Hallo Welt\";\necho $text; // Ausgabe: Hallo Welt\n?&gt;\n</code></pre></p> <p>[!example]- Boolean (<code>bool</code>) <pre><code>&lt;?php\n$wahr = true;\necho $wahr; // Ausgabe: 1\n?&gt;\n</code></pre></p> <p>[!example]- Array (<code>array</code>) <pre><code>&lt;?php\n$liste = array(1, 2, 3);\nprint_r($liste); // Ausgabe: Array ( [0] =&gt; 1 [1] =&gt; 2 [2] =&gt; 3 )\n?&gt;\n</code></pre></p> <p>[!example]- Objekt (<code>object</code>) <pre><code>&lt;?php\nclass Klasse {\n    public $eigenschaft = \"Wert\";\n}\n$obj = new Klasse();\necho $obj-&gt;eigenschaft; // Ausgabe: Wert\n?&gt;\n</code></pre></p> <p>[!example]- Null-Wert (<code>NULL</code>) <pre><code>&lt;?php\n$leer = NULL;\nvar_dump($leer); // Ausgabe: NULL\n?&gt;\n</code></pre></p> <p>[!example]- Ressource (<code>resource</code>) <pre><code>&lt;?php\n$datei = fopen(\"datei.txt\", \"r\");\nvar_dump($datei); // Ausgabe: resource(3) of type (stream)\n?&gt;\n</code></pre></p> <p>[!example]- Aufrufbar (<code>callable</code>) <pre><code>&lt;?php\nfunction meineFunktion() {\n    return true;\n}\n$aufrufbar = 'meineFunktion';\necho $aufrufbar(); // Ausgabe: 1\n?&gt;\n</code></pre></p> <p>[!example]- Iterierbar (<code>iterable</code>) <pre><code>&lt;?php\nfunction generator() {\n    yield 1;\n    yield 2;\n    yield 3;\n}\n$iterierbar = generator();\nforeach ($iterierbar as $wert) {\n    echo $wert; // Ausgabe: 1 2 3\n}\n?&gt;\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Funktionen%20von%20PHP/","title":"Funktionen von PHP","text":"<p>PHP ist eine vielseitige serverseitige Skriptsprache, die sich durch zahlreiche n\u00fctzliche Funktionen auszeichnet:</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Funktionen%20von%20PHP/#einfache-datenbankanbindung","title":"Einfache Datenbankanbindung","text":"<p>PHP bietet eine unkomplizierte Integration mit verschiedenen Datenbanken, was die Entwicklung datenbankgest\u00fctzter Anwendungen erleichtert.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Funktionen%20von%20PHP/#breite-verfugbarkeit-von-anwendungen-und-frameworks","title":"Breite Verf\u00fcgbarkeit von Anwendungen und Frameworks","text":"<ul> <li>Content Management Systeme (CMS): Bekannte CMS wie WordPress, Joomla und TYPO3 basieren auf PHP und erm\u00f6glichen die einfache Erstellung und Verwaltung von Webseiten.</li> <li>Frameworks: Beliebte PHP-Frameworks wie Laravel, CakePHP und Symfony unterst\u00fctzen Entwickler dabei, robuste und skalierbare Anwendungen zu erstellen.</li> <li>Foren: Mit PHP lassen sich leistungsf\u00e4hige Foren wie MyBB, phpBB und vBulletin erstellen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Funktionen%20von%20PHP/#formularverarbeitung","title":"Formularverarbeitung","text":"<p>PHP erm\u00f6glicht die effiziente Verarbeitung von Formularen, was f\u00fcr viele Webanwendungen unerl\u00e4sslich ist.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Funktionen%20von%20PHP/#session-handling","title":"Session Handling","text":"<p>Mit PHP k\u00f6nnen Entwickler Benutzersitzungen verwalten, um Daten \u00fcber mehrere Seitenaufrufe hinweg zu speichern und wiederzuverwenden.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Funktionen%20von%20PHP/#nutzerinteraktion","title":"Nutzerinteraktion","text":"<p>PHP unterst\u00fctzt verschiedene Methoden der Nutzerinteraktion, was die Erstellung dynamischer und interaktiver Webseiten erleichtert.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Funktionen/","title":"Funktionen","text":"<p>In PHP sind Funktionen ein zentrales Konzept, das dir erlaubt, wiederverwendbaren Code zu schreiben. Funktionen helfen dabei, den Code zu organisieren, die Lesbarkeit zu verbessern und die Wartung zu erleichtern. Hier ist eine \u00dcbersicht \u00fcber die wichtigsten Aspekte von Funktionen in PHP.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Funktionen/#definition-einer-funktion","title":"Definition einer Funktion","text":"<p>Eine Funktion in PHP wird mit dem Schl\u00fcsselwort <code>function</code> definiert, gefolgt von einem Namen, einer Parameterliste in runden Klammern und einem Block von Code in geschweiften Klammern.</p> <p>[!example]- ** Definition einer Funktion** <pre><code>function greet($name) {\n    echo \"Hallo, $name!\";\n}\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Funktionen/#aufruf-einer-funktion","title":"Aufruf einer Funktion","text":"<p>Um eine Funktion aufzurufen, verwende einfach den Namen der Funktion und \u00fcbergebe die ben\u00f6tigten Argumente.</p> <p>[!example]- Beispiel: Aufruf einer Funktion <pre><code>greet(\"Max\"); // Ausgabe: Hallo, Max!\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Funktionen/#ruckgabewert-einer-funktion","title":"R\u00fcckgabewert einer Funktion","text":"<p>Eine Funktion kann einen Wert zur\u00fcckgeben, der mit dem Schl\u00fcsselwort <code>return</code> spezifiziert wird. Wenn kein R\u00fcckgabewert angegeben ist, gibt die Funktion <code>NULL</code> zur\u00fcck.</p> <p>[!example]- Beispiel: R\u00fcckgabewert einer Funktion <pre><code>function add($a, $b) {\n    return $a + $b;\n}\n\n$result = add(3, 4); // $result ist 7\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Funktionen/#parameter-und-argumente","title":"Parameter und Argumente","text":"<p>Funktionen k\u00f6nnen Parameter haben, die als Platzhalter f\u00fcr die \u00fcbergebenen Argumente dienen. PHP erlaubt sowohl normale Parameter als auch optionale Parameter mit Standardwerten.</p> <p>[!example]- Beispiel: Parameter und Argumente <pre><code>function multiply($a, $b = 1) {\n    return $a * $b;\n}\n\necho multiply(5);    // Ausgabe: 5 (weil $b den Standardwert 1 hat)\necho multiply(5, 3); // Ausgabe: 15\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Funktionen/#variable-funktionen","title":"Variable Funktionen","text":"<p>In PHP k\u00f6nnen Funktionen auch als Variablen gespeichert und aufgerufen werden. Dies wird als \"variable Funktionen\" bezeichnet.</p> <p>[!example]- Beispiel: Variable Funktionen <pre><code>function sayHello() {\n    echo \"Hallo!\";\n}\n\n$functionName = 'sayHello';\n$functionName(); // Ausgabe: Hallo!\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Funktionen/#anonyme-funktionen","title":"Anonyme Funktionen","text":"<p>Anonyme Funktionen (auch als \"Closure\" bekannt) sind Funktionen ohne Namen und k\u00f6nnen direkt als Variablen zugewiesen werden.</p> <p>[!example]- Beispiel: Anonyme Funktionen <pre><code>$square = function($n) {\n    return $n * $n;\n};\n\necho $square(4); // Ausgabe: 16\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Funktionen/#funktionen-als-ruckgabewerte","title":"Funktionen als R\u00fcckgabewerte","text":"<p>Funktionen k\u00f6nnen auch andere Funktionen zur\u00fcckgeben.</p> <p>[!example]- Beispiel: Funktionen als R\u00fcckgabewerte <pre><code>function createMultiplier($factor) {\n    return function($number) use ($factor) {\n        return $number * $factor;\n    };\n}\n\n$double = createMultiplier(2);\necho $double(5); // Ausgabe: 10\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Funktionen/#rekursive-funktionen","title":"Rekursive Funktionen","text":"<p>Funktionen k\u00f6nnen sich selbst aufrufen. Dies nennt man Rekursion. Es ist wichtig, eine Abbruchbedingung zu definieren, um eine unendliche Schleife zu vermeiden.</p> <p>[!example]- Beispiel: Rekursive Funktionen <pre><code>function factorial($n) {\n    if ($n &lt;= 1) {\n        return 1;\n    }\n    return $n * factorial($n - 1);\n}\n\necho factorial(5); // Ausgabe: 120\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Funktionsweise/","title":"Funktionsweise","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Funktionsweise/#anfrage-vom-client","title":"Anfrage vom Client:","text":"<p>Der Client, typischerweise ein Webbrowser, sendet eine Anfrage f\u00fcr eine PHP-Datei (z.B. <code>beispiel.php</code>) an den Webserver. Dies wird durch den ersten Schritt im Bild dargestellt.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Funktionsweise/#webserver-ladt-datei-von-der-server-festplatte","title":"Webserver l\u00e4dt Datei von der Server-Festplatte:","text":"<p>Der Webserver empf\u00e4ngt die Anfrage und l\u00e4dt die angeforderte PHP-Datei von der Festplatte des Servers. Dieser Vorgang ist im Bild als Schritt 2 markiert.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Funktionsweise/#ubergabe-der-datei","title":"\u00dcbergabe der Datei:","text":"<p>Die geladene PHP-Datei wird an den PHP-Interpreter \u00fcbergeben, der f\u00fcr die Ausf\u00fchrung von PHP-Skripten verantwortlich ist. Dies ist Schritt 3 im Bild.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Funktionsweise/#php-interpreter-erzeugt-datei","title":"PHP-Interpreter erzeugt Datei:","text":"<p>Der PHP-Interpreter f\u00fchrt das PHP-Skript aus. Dabei wird je nach Skript eine Ausgabe generiert, die meist im HTML-Format vorliegt, aber auch andere Formate wie PDF sein k\u00f6nnen. Dies ist Schritt 4 im Bild.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Funktionsweise/#ruckgabe-des-erzeugten-codes","title":"R\u00fcckgabe des erzeugten Codes:","text":"<p>Der vom PHP-Interpreter erzeugte Code wird zur\u00fcck an den Webserver gegeben. Dies ist Schritt 5 im Bild.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Funktionsweise/#antwort-an-den-client","title":"Antwort an den Client:","text":"<p>Der Webserver sendet die erzeugte Ausgabe (z.B. HTML, PDF) \u00fcber das Internet zur\u00fcck an den Client. Dies ist Schritt 6 im Bild.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Schleifen/","title":"Schleifen","text":"<p>Schleifen sind ein grundlegendes Konzept in der Programmierung, das es dir erm\u00f6glicht, Code wiederholt auszuf\u00fchren, bis eine bestimmte Bedingung erf\u00fcllt ist. PHP bietet mehrere Arten von Schleifen, die dir helfen k\u00f6nnen, verschiedene Aufgaben effizient zu bew\u00e4ltigen. Hier ist eine \u00dcbersicht der wichtigsten Schleifenarten in PHP.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Schleifen/#for-schleife","title":"<code>for</code> Schleife","text":"<p>Die <code>for</code>-Schleife wird verwendet, wenn du genau wei\u00dft, wie oft der Code innerhalb der Schleife ausgef\u00fchrt werden soll. Sie besteht aus drei Teilen: Initialisierung, Bedingung und Inkrement/Decrement.</p> <p>[!example]- Beispiel: <code>for</code>-Schleife <pre><code>for ($i = 0; $i &lt; 5; $i++) {\n    echo \"Z\u00e4hler: $i\\n\";\n}\n// Ausgabe:\n// Z\u00e4hler: 0\n// Z\u00e4hler: 1\n// Z\u00e4hler: 2\n// Z\u00e4hler: 3\n// Z\u00e4hler: 4\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Schleifen/#while-schleife","title":"<code>while</code> Schleife","text":"<p>Die <code>while</code>-Schleife f\u00fchrt ihren Codeblock aus, solange die angegebene Bedingung <code>true</code> ist. Die Bedingung wird vor jedem Schleifendurchlauf \u00fcberpr\u00fcft.</p> <p>[!example]- Beispiel: <code>while</code>-Schleife <pre><code>$i = 0;\nwhile ($i &lt; 5) {\n    echo \"Z\u00e4hler: $i\\n\";\n    $i++;\n}\n// Ausgabe:\n// Z\u00e4hler: 0\n// Z\u00e4hler: 1\n// Z\u00e4hler: 2\n// Z\u00e4hler: 3\n// Z\u00e4hler: 4\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Schleifen/#dowhile-schleife","title":"<code>do...while</code> Schleife","text":"<p>Die <code>do...while</code>-Schleife \u00e4hnelt der <code>while</code>-Schleife, aber der Codeblock wird mindestens einmal ausgef\u00fchrt, bevor die Bedingung \u00fcberpr\u00fcft wird.</p> <p>[!example]- Beispiel: <code>do...while</code>-Schleife <pre><code>$i = 0;\ndo {\n    echo \"Z\u00e4hler: $i\\n\";\n    $i++;\n} while ($i &lt; 5);\n// Ausgabe:\n// Z\u00e4hler: 0\n// Z\u00e4hler: 1\n// Z\u00e4hler: 2\n// Z\u00e4hler: 3\n// Z\u00e4hler: 4\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Schleifen/#foreach-schleife","title":"<code>foreach</code> Schleife","text":"<p>Die <code>foreach</code>-Schleife wird verwendet, um durch die Elemente eines Arrays zu iterieren. Sie ist besonders n\u00fctzlich, wenn du alle Elemente eines Arrays durchlaufen m\u00f6chtest.</p> <p>[!example]- Beispiel: <code>foreach</code>-Schleife <pre><code>$fruits = array(\"Apfel\", \"Banane\", \"Kirsche\");\nforeach ($fruits as $fruit) {\n    echo \"Frucht: $fruit\\n\";\n}\n// Ausgabe:\n// Frucht: Apfel\n// Frucht: Banane\n// Frucht: Kirsche\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Schleifen/#schleifensteuerung","title":"Schleifensteuerung","text":"<p>In PHP gibt es spezielle Anweisungen, um die Schleifensteuerung zu beeinflussen:</p> <ul> <li><code>break</code>: Beendet die Schleife vorzeitig.</li> <li><code>continue</code>: \u00dcberspringt den aktuellen Schleifendurchlauf und f\u00e4hrt mit dem n\u00e4chsten fort.</li> </ul> <p>[!example]- Beispiel: Verwendung von <code>break</code> und <code>continue</code> <pre><code>for ($i = 0; $i &lt; 10; $i++) {\n    if ($i == 3) {\n        continue; // \u00dcberspringt den Rest des Schleifendurchlaufs\n    }\n    if ($i == 7) {\n        break; // Beendet die Schleife\n    }\n    echo \"Z\u00e4hler: $i\\n\";\n}\n// Ausgabe:\n// Z\u00e4hler: 0\n// Z\u00e4hler: 1\n// Z\u00e4hler: 2\n// Z\u00e4hler: 4\n// Z\u00e4hler: 5\n// Z\u00e4hler: 6\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Superglobals/","title":"Superglobals","text":"<p>Superglobals in PHP sind spezielle globale Variablen, die in allen G\u00fcltigkeitsbereichen eines Skripts verf\u00fcgbar sind. Sie bieten Zugriff auf verschiedene Arten von Daten, die oft im Kontext von Webanwendungen verwendet werden. Hier ist eine \u00dcbersicht der wichtigsten Superglobals in PHP:</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Superglobals/#globals","title":"$GLOBALS","text":"<p><code>$GLOBALS</code> ist ein Array, das alle Variablen im globalen G\u00fcltigkeitsbereich referenziert. Seit PHP 8.1.0 ist <code>$GLOBALS</code> schreibgesch\u00fctzt.</p> <p>[!example]- Verwendung von <code>$GLOBALS</code>** <pre><code>$foo = \"123\";\nfunction f() {\n    $bar = \"456\";\n}\nprint_r($GLOBALS);\n// Ausgabe enth\u00e4lt $foo, aber nicht $bar\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Superglobals/#_server","title":"$_SERVER","text":"<p><code>$_SERVER</code> enth\u00e4lt Informationen \u00fcber den Server und die Ausf\u00fchrungsumgebung. Diese Eintr\u00e4ge werden vom Webserver erstellt und enthalten Details wie Header, Pfade und mehr.</p> <p>[!example]- Verwendung von <code>$_SERVER</code>** <pre><code>// Beispiel-URL: http://example.com/seite.php?foo=bar\necho $_SERVER[\"QUERY_STRING\"]; // Ausgabe: foo=bar\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Superglobals/#_get","title":"$_GET","text":"<p><code>$_GET</code> ist ein Array, das alle GET-Parameter enth\u00e4lt. Du kannst auf die Werte mit <code>$_GET[\"parameter\"]</code> zugreifen und \u00fcberpr\u00fcfen, ob ein Parameter gesetzt ist, indem du <code>isset($_GET[\"parameter\"])</code> verwendest.</p> <p>[!example]- Verwendung von <code>$_GET</code> <pre><code>if (isset($_GET[\"foo\"])) {\n    echo \"foo = \" . $_GET[\"foo\"];\n}\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Superglobals/#_post","title":"$_POST","text":"<p><code>$_POST</code> enth\u00e4lt Variablen, die per POST-Methode an den Server gesendet wurden. Diese Methode wird h\u00e4ufig f\u00fcr Formulare verwendet, bei denen Daten entweder als <code>application/x-www-form-urlencoded</code> oder <code>multipart/form-data</code> gesendet werden.</p> <p>[!example]- Verwendung von <code>$_POST</code>** <pre><code>// Beispiel-Formular zur Datei-Upload\n// &lt;form action=\"upload.php\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n// Select image to upload:\n// &lt;input type=\"file\" name=\"fileToUpload\" id=\"fileToUpload\"&gt;\n// &lt;input type=\"submit\" value=\"Upload Image\" name=\"submit\"&gt;\n// &lt;/form&gt;\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Superglobals/#_cookie","title":"$_COOKIE","text":"<p><code>$_COOKIE</code> enth\u00e4lt die gesetzten Cookies. Cookies sind kleine Dateien, die vom Client gespeichert werden und bei jedem Besuch der Webseite wieder mitgeschickt werden. Sie werden oft zur Identifikation von Nutzern verwendet.</p> <p>[!example]- Verwendung von <code>$_COOKIE</code>** <pre><code>// Setzen eines Cookies\nsetcookie(\"user\", \"John Doe\", time() + 3600); // Cookie l\u00e4uft in 1 Stunde ab\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Superglobals/#_request","title":"$_REQUEST","text":"<p><code>$_REQUEST</code> enth\u00e4lt alle Daten von <code>$_GET</code>, <code>$_POST</code> und <code>$_COOKIE</code>. Es vereinfacht den Zugriff auf alle Anfragedaten.</p> <p>[!example]- Verwendung von <code>$_REQUEST</code>** <pre><code>echo $_REQUEST[\"user\"]; // Gibt den Wert des Parameters \"user\" aus, egal ob er \u00fcber GET, POST oder COOKIE gesendet wurde\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Superglobals/#_session","title":"$_SESSION","text":"<p><code>$_SESSION</code> enth\u00e4lt alle Session-Variablen, die w\u00e4hrend der Sitzung des Nutzers verf\u00fcgbar sind. Sessions speichern Daten auf dem Server und sind n\u00fctzlich, um Informationen wie den Inhalt eines Warenkorbs oder Login-Status zu verwalten.</p> <p>[!example]- Verwendung von <code>$_SESSION</code>** <pre><code>session_start();\n$_SESSION[\"cart\"] = array(\"item1\", \"item2\");\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Superglobals/#_files","title":"$_FILES","text":"<p><code>$_FILES</code> enth\u00e4lt Informationen \u00fcber Dateien, die per POST-Methoden hochgeladen wurden. Die Datei-Uploads m\u00fcssen in der <code>php.ini</code> aktiviert sein.</p> <p>[!example]- Verwendung von <code>$_FILES</code>** <pre><code>// Beispiel-HTML-Formular f\u00fcr Datei-Upload\n&lt;form action=\"upload.php\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n// Select image to upload:\n &lt;input type=\"file\" name=\"fileToUpload\" id=\"fileToUpload\"&gt;\n&lt;input type=\"submit\" value=\"Upload Image\" name=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre></p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Syntax/","title":"Syntax","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Syntax/#integration-in-html","title":"Integration in HTML","text":"<p>PHP-Code kann an jeder Stelle innerhalb einer HTML-Seite eingef\u00fcgt werden. Dies erm\u00f6glicht eine nahtlose Mischung von HTML und PHP, wodurch dynamische Inhalte direkt in statische Webseiten eingebettet werden k\u00f6nnen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Syntax/#spezielle-tags","title":"Spezielle Tags","text":"<p>PHP verwendet spezielle Tags, um PHP-Code von regul\u00e4rem HTML-Code zu unterscheiden. Diese Tags werden vom PHP-Interpreter erkannt und der darin enthaltene Code wird ausgef\u00fchrt. Die Ergebnisse der Ausf\u00fchrung werden in Text oder HTML umgewandelt und an den Browser gesendet.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Syntax/#beispiele-fur-php-tags","title":"Beispiele f\u00fcr PHP-Tags","text":"<ul> <li><code>&lt;?php ... ?&gt;</code>: Dies ist der am h\u00e4ufigsten verwendete Tag f\u00fcr PHP-Code.</li> <li><code>&lt;? ... ?&gt;</code>: Eine k\u00fcrzere Schreibweise f\u00fcr PHP-Code.</li> <li><code>&lt;% ... %&gt;</code>: Eine alternative Schreibweise, die jedoch weniger verbreitet ist.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Syntax/#beispiel","title":"Beispiel:","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"de\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Beispielseite&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Willkommen auf meiner Webseite!&lt;/h1&gt;\n    &lt;?php\n        echo \"&lt;p&gt;Dies ist ein dynamisch erzeugter Absatz.&lt;/p&gt;\";\n    ?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Beispiele/Hello%20World/","title":"Hello World","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Hello World&lt;/title&gt;\n    &lt;head&gt;\n&lt;body&gt;\n    &lt;h1&gt;This is PHP:&lt;/h1&gt;\n    &lt;?php echo \"Hello World!\"; ?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Web%20Engineering/PHP/Beispiele/Random%20Age/","title":"Random Age","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Hello World&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;?php\n    $randomAge = rand(0,40);  // Generiert eine Zufallszahl zwischen 0 und 40\n    echo \"Zufallsalter: $randomAge &lt;br&gt;\";  // Gibt das Zufallsalter aus\n    if($randomAge==1) {\n        echo \"Baby\";  // Wenn das Alter 1 ist, wird \"Baby\" ausgegeben\n    }\n    elseif ($randomAge&lt;10) {\n        echo \"Kind\";  // Wenn das Alter kleiner als 10 ist, wird \"Kind\" ausgegeben\n    }\n    elseif ($randomAge&lt;=20) {\n        echo \"Teenager\";  // Wenn das Alter kleiner oder gleich 20 ist, wird \"Teenager\" ausgegeben\n    }\n    else {\n        echo \"Erwachsener\";  // F\u00fcr alle anderen F\u00e4lle wird \"Erwachsener\" ausgegeben\n    }\n    ?&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Wissenschaftliches%20Arbeiten/","title":"Wissenschaftliches Arbeiten","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Wissenschaftliches%20Arbeiten/#allgemeine-informationen","title":"Allgemeine Informationen","text":"<ul> <li>Anwesenheit</li> <li>Wenn Krank/Verhindert Email an ihn</li> <li>Kornmeier buch wird von ihm empfohlen</li> <li></li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Wissenschaftliches%20Arbeiten/#klausur-themen","title":"Klausur Themen","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Wissenschaftliches%20Arbeiten/#termine","title":"Termine","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Anforderungen%20an%20eine%20wissenschaftliche%20Arbeit/","title":"Anforderungen an eine wissenschaftliche Arbeit","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Anforderungen%20an%20eine%20wissenschaftliche%20Arbeit/#klare-definition-und-abgrenzung-eines-themas","title":"\ud83d\udcdd Klare Definition und Abgrenzung eines Themas","text":"<p>Klare Definition und Abgrenzung eines Themas bedeutet, dass das Forschungsthema pr\u00e4zise formuliert und von verwandten Themenbereichen abgegrenzt wird. Dies schafft Klarheit und Fokus f\u00fcr die Untersuchung und verhindert, dass die Forschung zu breit oder un\u00fcbersichtlich wird.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Anforderungen%20an%20eine%20wissenschaftliche%20Arbeit/#merkmale","title":"Merkmale:","text":"<ul> <li>Pr\u00e4zision: Das Thema sollte spezifisch und klar formuliert sein.</li> <li>Abgrenzung: Verwandte Themen und Aspekte sollten identifiziert und abgegrenzt werden, um den Fokus zu bewahren.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Anforderungen%20an%20eine%20wissenschaftliche%20Arbeit/#berucksichtigung-des-aktuellen-wissensstands-und-der-aktuellen-wissenschaftlichen-diskussion","title":"\ud83d\udd0d Ber\u00fccksichtigung des aktuellen Wissensstands und der aktuellen wissenschaftlichen Diskussion","text":"<p>Ber\u00fccksichtigung des aktuellen Wissensstands bedeutet, dass bestehende Forschung und wissenschaftliche Diskussionen zum Thema ber\u00fccksichtigt werden. Dies hilft, das Forschungsvorhaben im Kontext des aktuellen Wissensstands zu verorten und relevante Theorien und Modelle zu integrieren.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Anforderungen%20an%20eine%20wissenschaftliche%20Arbeit/#merkmale_1","title":"Merkmale:","text":"<ul> <li>Literaturrecherche: Umfangreiche Recherche aktueller Studien, Artikel und B\u00fccher.</li> <li>Diskursanalyse: Analyse der aktuellen wissenschaftlichen Diskussionen und Kontroversen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Anforderungen%20an%20eine%20wissenschaftliche%20Arbeit/#anwendung-von-wissenschaftlichen-methoden-und-erkenntnissen","title":"\ud83e\udde0 Anwendung von wissenschaftlichen Methoden und Erkenntnissen","text":"<p>Anwendung von wissenschaftlichen Methoden beinhaltet die Nutzung etablierter Methoden und Techniken zur Datenerhebung und -analyse. Dies umfasst auch das korrekte Zitieren von Quellen und die Abgrenzung von eigenen und fremden Erkenntnissen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Anforderungen%20an%20eine%20wissenschaftliche%20Arbeit/#merkmale_2","title":"Merkmale:","text":"<ul> <li>Korrektes Zitieren: Alle verwendeten Quellen m\u00fcssen korrekt zitiert werden.</li> <li>Quellennachweis: Alle Daten und Informationen m\u00fcssen durch Quellen belegt werden.</li> <li>Abgrenzung von Urspr\u00fcngen: Deutlich machen, welche Teile der Arbeit auf eigenen Erkenntnissen und welche auf externen Quellen basieren.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Anforderungen%20an%20eine%20wissenschaftliche%20Arbeit/#eigenleistung-muss-erkennbar-sein","title":"\ud83d\udca1 Eigenleistung muss erkennbar sein","text":"<p>Eigenleistung bedeutet, dass die eigenen Beitr\u00e4ge und Erkenntnisse klar erkennbar sind. Dies kann durch eigene Analysen, L\u00f6sungsvorschl\u00e4ge oder innovative Ans\u00e4tze erfolgen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Anforderungen%20an%20eine%20wissenschaftliche%20Arbeit/#merkmale_3","title":"Merkmale:","text":"<ul> <li>L\u00f6sungsvorschl\u00e4ge: Entwicklung und Pr\u00e4sentation eigener L\u00f6sungsvorschl\u00e4ge.</li> <li>Begr\u00fcndung: Erkl\u00e4ren, warum andere Unternehmen oder Organisationen diese L\u00f6sungen nutzen sollten, auch \u00fcber den eigenen betrieblichen Kontext hinaus.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Anforderungen%20an%20eine%20wissenschaftliche%20Arbeit/#systematisches-vorgehen","title":"\ud83d\udd04 Systematisches Vorgehen","text":"<p>Systematisches Vorgehen bezieht sich auf ein methodisches und strukturiertes Vorgehen, das sich durch die gesamte Untersuchung zieht. Ein klarer roter Faden sollte erkennbar sein.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Anforderungen%20an%20eine%20wissenschaftliche%20Arbeit/#merkmale_4","title":"Merkmale:","text":"<ul> <li>Struktur: Eine logische und koh\u00e4rente Struktur der Arbeit.</li> <li>Roter Faden: Ein durchg\u00e4ngiger, nachvollziehbarer Argumentationsstrang.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Anforderungen%20an%20eine%20wissenschaftliche%20Arbeit/#objektiver-und-sachlicher-schreibstil","title":"\ud83d\udd8b\ufe0f Objektiver und sachlicher Schreibstil","text":"<p>Objektiver und sachlicher Schreibstil bedeutet, dass die Sprache neutral und faktenbasiert ist. Pers\u00f6nliche Meinungen und Emotionen sollten vermieden werden.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Anforderungen%20an%20eine%20wissenschaftliche%20Arbeit/#merkmale_5","title":"Merkmale:","text":"<ul> <li>Neutralit\u00e4t: Vermeidung von subjektiven Aussagen.</li> <li>Faktenbasiert: St\u00fctzung der Aussagen auf \u00fcberpr\u00fcfbare Daten und Fakten.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Anforderungen%20an%20eine%20wissenschaftliche%20Arbeit/#aus-aktuellem-kenntnisstand-heraus-recherchieren","title":"\ud83d\udcd6 Aus aktuellem Kenntnisstand heraus recherchieren","text":"<p>Aktueller Kenntnisstand bedeutet, dass die Recherche und Analyse auf dem neuesten Stand des Wissens basiert. Dies erfordert kontinuierliche Aktualisierung und \u00dcberpr\u00fcfung der verwendeten Quellen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Anforderungen%20an%20eine%20wissenschaftliche%20Arbeit/#merkmale_6","title":"Merkmale:","text":"<ul> <li>Aktualit\u00e4t: Nutzung aktueller und relevanter Quellen.</li> <li>Relevanz: Auswahl von Quellen, die direkt zum Thema beitragen und den aktuellen Stand der Forschung widerspiegeln.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Definition%20Wissenschaftliches%20Arbeiten/","title":"Definition Wissenschaftliches Arbeiten","text":"<p>Wissenschaftliches Arbeiten bedeutet, systematisch und methodisch vorzugehen, um Wissen zu erlangen und zu erweitern. Es umfasst mehrere wichtige Prinzipien und F\u00e4higkeiten:</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Definition%20Wissenschaftliches%20Arbeiten/#eigene-gedanken-machen","title":"\ud83e\udde0 Eigene Gedanken machen","text":"<ul> <li>Kreativit\u00e4t und Eigenst\u00e4ndigkeit: Wissenschaftliches Arbeiten erfordert, sich eigene Gedanken zu machen und nicht nur vorhandenes Wissen zu reproduzieren. Es geht darum, neue Ideen zu entwickeln und bestehende Konzepte kritisch zu hinterfragen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Definition%20Wissenschaftliches%20Arbeiten/#nicht-blind-zitieren","title":"\ud83d\udd17 Nicht blind zitieren","text":"<ul> <li>Quellenkritik: Beim Zitieren von Quellen ist es wichtig, kritisch zu pr\u00fcfen, ob die Informationen verl\u00e4sslich und relevant sind. Blindes Zitieren kann zu einer unkritischen \u00dcbernahme von Fehlern oder Missverst\u00e4ndnissen f\u00fchren.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Definition%20Wissenschaftliches%20Arbeiten/#objektivitat-wahren","title":"\u2696\ufe0f Objektivit\u00e4t wahren","text":"<ul> <li>Neutralit\u00e4t: Wissenschaftler m\u00fcssen versuchen, objektiv und unparteiisch zu bleiben. Pers\u00f6nliche Meinungen und Vorurteile sollten nicht die Ergebnisse und Interpretationen beeinflussen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Definition%20Wissenschaftliches%20Arbeiten/#eigene-theoriebildung-entwickeln","title":"\ud83d\udca1 Eigene Theoriebildung entwickeln","text":"<ul> <li>Theoriebildung: Wissenschaftliches Arbeiten beinhaltet die F\u00e4higkeit, eigene Theorien und Hypothesen zu entwickeln. Diese Theorien sollten auf empirischen Daten und logischen Schlussfolgerungen basieren.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Definition%20Wissenschaftliches%20Arbeiten/#verstandliche-darstellung","title":"\ud83d\udce2 Verst\u00e4ndliche Darstellung","text":"<ul> <li>Kommunikation: Die Resultate von Nachforschungen und eigener wissenschaftlicher Arbeit m\u00fcssen klar und verst\u00e4ndlich dargestellt werden. Dies umfasst sowohl schriftliche Berichte als auch m\u00fcndliche Pr\u00e4sentationen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Definition%20Wissenschaftliches%20Arbeiten/#trennung-von-eigenarbeit-und-fremdarbeit","title":"\ud83d\udd0d Trennung von Eigenarbeit und Fremdarbeit","text":"<ul> <li>Originalit\u00e4t und Ehrlichkeit: Es ist wichtig, klar zu trennen, welche Teile der Arbeit auf eigener Forschung und welche auf den Arbeiten anderer basieren. Plagiate und unsaubere Zitationspraktiken sind in der Wissenschaft inakzeptabel.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Definitionen%20und%20Ziele%20der%20Wissenschaften/","title":"Definitionen und Ziele der Wissenschaften","text":"<ul> <li>Argumentativ gest\u00fctztes Wissen durch logische Schlussfolgerung Wissen erarbeiten </li> <li>Dient der Erforschung unterschiedlicher Fachgebiete wie_<ul> <li>Natur</li> <li>Ethik</li> <li>Technik</li> </ul> </li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Definitionen%20und%20Ziele%20der%20Wissenschaften/#ziele","title":"Ziele","text":"<ul> <li>Neue Erkenntnisse /Wissen</li> <li>Besser Verstehen</li> <li>Verbreiten</li> <li>Falsifizieren (Wiederlegen) \u2194 Verifikation (Weiter st\u00fctzen)</li> <li>Vertiefen (Eigentlich besser Verstehen)</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Falsifizieren/","title":"Falsifizieren","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Falsifizieren/#was-ist-falsifizieren","title":"\ud83d\udccc Was ist Falsifizieren?","text":"<p>Falsifizieren ist ein wissenschaftliches Konzept, das von dem Philosophen Karl Popper eingef\u00fchrt wurde. Es bezieht sich auf die M\u00f6glichkeit, eine Hypothese oder Theorie durch empirische Beobachtungen oder Experimente zu widerlegen. Ein zentrales Prinzip der Wissenschaftstheorie ist, dass eine Hypothese nur dann wissenschaftlich wertvoll ist, wenn sie falsifizierbar ist, das hei\u00dft, wenn es m\u00f6glich ist, durch Beobachtungen oder Experimente zu zeigen, dass sie falsch ist.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Falsifizieren/#merkmale-des-falsifizierens","title":"\ud83d\udd70\ufe0f Merkmale des Falsifizierens","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Falsifizieren/#widerlegbarkeit","title":"Widerlegbarkeit","text":"<ul> <li>Widerlegbarkeit: Eine Hypothese muss so formuliert sein, dass es prinzipiell m\u00f6glich ist, sie durch empirische Daten zu widerlegen.</li> <li>Beispiel: Die Hypothese \u201eAlle Schw\u00e4ne sind wei\u00df\u201c kann durch die Beobachtung eines schwarzen Schwans falsifiziert werden.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Falsifizieren/#empirische-tests","title":"Empirische Tests","text":"<ul> <li>Empirische Tests: Falsifizieren erfordert, dass Hypothesen durch Beobachtungen und Experimente getestet werden.</li> <li>Prozess: Wissenschaftler formulieren Hypothesen und f\u00fchren Experimente durch, um zu pr\u00fcfen, ob die Ergebnisse die Hypothese unterst\u00fctzen oder widerlegen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Falsifizieren/#bedeutung-fur-den-wissenschaftlichen-fortschritt","title":"Bedeutung f\u00fcr den wissenschaftlichen Fortschritt","text":"<ul> <li>Wissenschaftlicher Fortschritt: Das Prinzip des Falsifizierens f\u00f6rdert den wissenschaftlichen Fortschritt, indem es sicherstellt, dass nur Hypothesen, die den Test der Empirie bestehen, akzeptiert werden.</li> <li>Verbesserung: Falsifizierte Hypothesen werden verworfen oder modifiziert, was zu einer besseren und genaueren wissenschaftlichen Erkenntnis f\u00fchrt.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Falsifizieren/#beispiele-und-anwendungen-des-falsifizierens","title":"\u2696\ufe0f Beispiele und Anwendungen des Falsifizierens","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Falsifizieren/#beispiel-aus-der-biologie","title":"Beispiel aus der Biologie","text":"<ul> <li>Biologie: Die Hypothese \u201eAlle V\u00f6gel k\u00f6nnen fliegen\u201c kann durch die Beobachtung von Pinguinen, die nicht fliegen k\u00f6nnen, falsifiziert werden.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Falsifizieren/#beispiel-aus-der-physik","title":"Beispiel aus der Physik","text":"<ul> <li>Physik: Die Hypothese \u201eLicht bewegt sich immer in geraden Linien\u201c kann durch das Experiment, das die Lichtbrechung zeigt, falsifiziert werden.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Falsifizieren/#anwendung-in-der-medizin","title":"Anwendung in der Medizin","text":"<ul> <li>Medizin: Eine neue medizinische Behandlung wird durch klinische Studien getestet, um zu pr\u00fcfen, ob sie wirksam ist. Wenn die Behandlung in einer kontrollierten Studie nicht besser als ein Placebo wirkt, wird die Hypothese ihrer Wirksamkeit falsifiziert.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Falsifizieren/#falsifizieren-im-vergleich-zu-verifizieren","title":"\ud83d\udd04 Falsifizieren im Vergleich zu Verifizieren","text":"<ul> <li>Verifizieren: Bezieht sich auf das Best\u00e4tigen einer Hypothese durch positive Ergebnisse. Eine Hypothese zu verifizieren bedeutet, Beweise zu finden, die sie unterst\u00fctzen.</li> <li>Falsifizieren: Bezieht sich auf das Widerlegen einer Hypothese durch negative Ergebnisse. Eine Hypothese zu falsifizieren bedeutet, Beweise zu finden, die sie widerlegen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Formale%20Grunds%C3%A4tze%20des%20wissenschaftlichen%20Arbeitens/","title":"Formale Grunds\u00e4tze des wissenschaftlichen Arbeitens","text":"<ul> <li> <p>Verst\u00e4ndlichkeit des Ausdrucks</p> </li> <li> <p>Keine Ich-Form \u21d2 Formale Sprache</p> </li> <li> <p>Leserfreundliche Darstellung</p> </li> <li> <p>Fachterminologie verwenden!</p> </li> <li> <p>Orientierung an der \u00fcblichen Fachsprache \u21d2 Deutsch &amp; Englisch</p> </li> <li> <p>Vollst\u00e4ndigkeit und Korrektheit der Quellenangaben</p> </li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Methoden/","title":"Methoden","text":"<p>Methoden sind Werkzeuge, um Wissen zu beschaffen. Jede Methode hat ihre eigenen Grenzen und muss daher korrekt erlernt und angewendet werden. Die Wahl und der Einsatz der richtigen Methode sind entscheidend, um valide und zuverl\u00e4ssige Ergebnisse zu erzielen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Methoden/#grenzen-der-methoden","title":"Grenzen der Methoden","text":"<ul> <li>Begrenzungen: Jedes Werkzeug hat Grenzen. Die Genauigkeit und Aussagekraft der Ergebnisse h\u00e4ngen stark von der korrekten Anwendung der Methode ab.</li> <li>Lernprozess: Die richtige Verwendung der Methoden muss gelernt werden, um Fehler zu vermeiden und die Qualit\u00e4t der Forschung sicherzustellen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Methoden/#beispiel-umfrage-mit-ordinaler-skala","title":"Beispiel: Umfrage mit Ordinaler Skala","text":"<ul> <li>Ordinalskala: Bei Umfragen, die eine ordinale Skala verwenden (z.B. \"stimme \u00fcberhaupt nicht zu\" bis \"stimme v\u00f6llig zu\"), sollten die einzelnen Skalenpunkte nicht beschriftet werden. Beschriftete Punkte k\u00f6nnten die Interpretation und Antworten der Teilnehmer beeinflussen und somit die Validit\u00e4t der Ergebnisse beeintr\u00e4chtigen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Prozess%20des%20wissenschaftlichen%20Arbeitens/","title":"Prozess des wissenschaftlichen Arbeitens","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Sozialforschung%20und%20Sozialwissenschaften/","title":"Sozialforschung und Sozialwissenschaften","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Sozialforschung%20und%20Sozialwissenschaften/#sozialforschung","title":"\ud83d\udccc Sozialforschung","text":"<p>Sozialforschung besch\u00e4ftigt sich haupts\u00e4chlich mit der Untersuchung und Analyse von Ph\u00e4nomenen des menschlichen Verhaltens und sozialen Interaktionen. Ziel ist es, Muster und Gesetzm\u00e4\u00dfigkeiten im Verhalten von Individuen und Gruppen zu identifizieren und zu verstehen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Sozialforschung%20und%20Sozialwissenschaften/#sozialwissenschaften","title":"\ud83d\udcca Sozialwissenschaften","text":"<p>Sozialwissenschaften umfassen eine Vielzahl von Techniken und Methoden, um die Komplexit\u00e4t sozialer Ph\u00e4nomene zu untersuchen. Hier sind einige der wichtigsten Methoden:</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Sozialforschung%20und%20Sozialwissenschaften/#interviews","title":"\ud83d\udccb Interviews","text":"<ul> <li>Interviews: Diese Methode beinhaltet direkte Gespr\u00e4che mit Teilnehmern, um tiefere Einblicke in ihre Meinungen, Erfahrungen und Einstellungen zu erhalten.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Sozialforschung%20und%20Sozialwissenschaften/#qualitative-befragung","title":"\ud83d\udde3\ufe0f Qualitative Befragung","text":"<ul> <li>Qualitative Befragung: </li> <li>Merkmale: Wenige Personen, aber viele detaillierte Fragen.</li> <li>Vorteile: Bietet tiefe Einblicke und detaillierte Informationen.</li> <li>Nachteile: Ergebnisse sind nicht repr\u00e4sentativ f\u00fcr die gesamte Population.</li> <li>Beispiel: Tiefeninterviews und Fokusgruppen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Sozialforschung%20und%20Sozialwissenschaften/#quantitative-befragung","title":"\ud83d\udcc8 Quantitative Befragung","text":"<ul> <li>Quantitative Befragung:</li> <li>Merkmale: Viele Personen, aber weniger detaillierte Fragen.</li> <li>Vorteile: Ergebnisse sind repr\u00e4sentativ und k\u00f6nnen auf die gesamte Population verallgemeinert werden.</li> <li>Nachteile: Weniger Tiefe und Detailtiefe in den Antworten.</li> <li>Beispiel: Umfragen und Frageb\u00f6gen mit geschlossenen Fragen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Sozialforschung%20und%20Sozialwissenschaften/#experimentelle-und-quasi-experimentelle-untersuchungen","title":"\ud83d\udd2c Experimentelle und quasi-experimentelle Untersuchungen","text":"<ul> <li>Experimentelle Untersuchungen: </li> <li>Merkmale: Kontrollierte Bedingungen, um Ursache-Wirkungs-Beziehungen zu identifizieren.</li> <li>Beispiel: Laborexperimente, in denen Variablen systematisch manipuliert werden.</li> <li>Quasi-experimentelle Untersuchungen:</li> <li>Merkmale: \u00c4hnlich wie Experimente, aber ohne zuf\u00e4llige Zuweisung von Teilnehmern zu Gruppen.</li> <li>Beispiel: Feldstudien, bei denen bestehende Gruppen verglichen werden.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Sozialforschung%20und%20Sozialwissenschaften/#quer-und-langsschnittuntersuchungen","title":"\ud83d\udd52 Quer- und L\u00e4ngsschnittuntersuchungen","text":"<ul> <li>Querschnittuntersuchungen:</li> <li>Merkmale: Daten werden zu einem einzigen Zeitpunkt erhoben.</li> <li>Vorteile: Schnell und kosteneffizient.</li> <li>Nachteile: Keine Informationen \u00fcber zeitliche Entwicklungen.</li> <li>Beispiel: Bev\u00f6lkerungsumfragen zu einem bestimmten Zeitpunkt.</li> <li>L\u00e4ngsschnittuntersuchungen:</li> <li>Merkmale: Daten werden \u00fcber einen l\u00e4ngeren Zeitraum hinweg erhoben.</li> <li>Vorteile: Erm\u00f6glicht die Analyse von Ver\u00e4nderungen und Entwicklungen \u00fcber die Zeit.</li> <li>Nachteile: Zeitaufw\u00e4ndig und teuer.</li> <li>Beispiel: Panelstudien, bei denen dieselben Teilnehmer \u00fcber mehrere Jahre hinweg befragt werden.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Sozialforschung%20und%20Sozialwissenschaften/#werkzeuge-der-sozialwissenschaft","title":"\ud83d\udd27 Werkzeuge der Sozialwissenschaft","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Sozialforschung%20und%20Sozialwissenschaften/#quantitative-befragung_1","title":"Quantitative Befragung","text":"<ul> <li>Mit Skalierung: Quantitative Befragungen, die eine bestimmte Skalierung verwenden (z.B. Likert-Skalen), bieten pr\u00e4zisere und vergleichbare Daten als qualitative Befragungen.</li> <li>Bedeutung: Diese Methoden sind besonders n\u00fctzlich, um generalisierbare Erkenntnisse \u00fcber gro\u00dfe Populationen zu gewinnen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Sozialforschung%20und%20Sozialwissenschaften/#qualitative-befragung_1","title":"Qualitative Befragung","text":"<ul> <li>Mit Text: Qualitative Befragungen bieten tiefergehende Einblicke und erm\u00f6glichen es, komplexe Ph\u00e4nomene detailliert zu beschreiben.</li> <li>Bedeutung: Sie sind wertvolle Werkzeuge, um neue Hypothesen zu generieren und ein tiefes Verst\u00e4ndnis spezifischer Themen zu entwickeln.</li> <li>Vorsicht! Sie sind nicht repr\u00e4sentativ</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Sozialforschung%20und%20Sozialwissenschaften/#fazit","title":"Fazit","text":"<p>Quantitative Befragung ist mit gewisser Skalierung immer besser als Qualitative Abstimmung </p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Verifikation/","title":"Verifikation","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Verifikation/#was-ist-verifikation","title":"\ud83d\udccc Was ist Verifikation?","text":"<p>Verifikation ist der Prozess, durch den eine Hypothese oder Theorie durch empirische Beobachtungen, Experimente oder logische Argumente best\u00e4tigt wird. Ziel der Verifikation ist es, Belege zu finden, die die G\u00fcltigkeit einer wissenschaftlichen Aussage unterst\u00fctzen. Im Gegensatz zur Falsifikation, die darauf abzielt, Hypothesen zu widerlegen, strebt die Verifikation danach, positive Beweise f\u00fcr die Richtigkeit einer Hypothese zu liefern.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Verifikation/#merkmale-der-verifikation","title":"\ud83d\udd70\ufe0f Merkmale der Verifikation","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Verifikation/#bestatigung","title":"Best\u00e4tigung","text":"<ul> <li>Best\u00e4tigung: Verifikation bedeutet, Beweise zu finden, die eine Hypothese st\u00fctzen und ihre G\u00fcltigkeit best\u00e4tigen.</li> <li>Beispiel: Die Hypothese \u201eWasser kocht bei 100\u00b0C auf Meeresh\u00f6he\u201c wird verifiziert, wenn wiederholt gezeigt wird, dass Wasser bei dieser Temperatur und diesen Bedingungen zu kochen beginnt.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Verifikation/#empirische-daten","title":"Empirische Daten","text":"<ul> <li>Empirische Daten: Verifikation basiert auf der Sammlung und Analyse von Daten durch Beobachtungen und Experimente.</li> <li>Methode: Wissenschaftler f\u00fchren Experimente durch und sammeln Daten, um zu pr\u00fcfen, ob die Ergebnisse mit der Hypothese \u00fcbereinstimmen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Verifikation/#bedeutung-fur-die-wissenschaft","title":"Bedeutung f\u00fcr die Wissenschaft","text":"<ul> <li>Wissenschaftliche Grundlage: Verifikation hilft, die wissenschaftliche Grundlage zu st\u00e4rken, indem sie zeigt, dass eine Hypothese mit den beobachteten Fakten \u00fcbereinstimmt.</li> <li>Vertrauen: Best\u00e4tigte Hypothesen erh\u00f6hen das Vertrauen in wissenschaftliche Theorien und Modelle.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Verifikation/#beispiele-und-anwendungen-der-verifikation","title":"\ud83d\ude80 Beispiele und Anwendungen der Verifikation","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Verifikation/#beispiel-aus-der-chemie","title":"Beispiel aus der Chemie","text":"<ul> <li>Chemie: Die Hypothese \u201eSalz l\u00f6st sich in Wasser\u201c wird verifiziert, indem wiederholt gezeigt wird, dass Salz tats\u00e4chlich in Wasser l\u00f6slich ist.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Verifikation/#beispiel-aus-der-physik","title":"Beispiel aus der Physik","text":"<ul> <li>Physik: Die Hypothese \u201eObjekte fallen mit einer Beschleunigung von 9,8 m/s\u00b2 zur Erde\u201c wird durch zahlreiche Experimente, die die Erdanziehungskraft messen, verifiziert.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Verifikation/#anwendung-in-der-informatik","title":"Anwendung in der Informatik","text":"<ul> <li>Informatik: Ein Programm oder Algorithmus wird verifiziert, indem Tests durchgef\u00fchrt werden, um sicherzustellen, dass es wie erwartet funktioniert und die gew\u00fcnschten Ergebnisse liefert.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Verifikation/#vorteile-und-herausforderungen-der-verifikation","title":"\u2696\ufe0f Vorteile und Herausforderungen der Verifikation","text":""},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Verifikation/#vorteile","title":"Vorteile","text":"<ul> <li>Best\u00e4tigung des Wissens: Verifikation st\u00e4rkt das Vertrauen in wissenschaftliche Theorien und Hypothesen.</li> <li>Erweiterung der Wissenschaft: Verifizierte Hypothesen tragen zur Erweiterung des wissenschaftlichen Wissens bei und dienen als Grundlage f\u00fcr weitere Forschung.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Verifikation/#herausforderungen","title":"Herausforderungen","text":"<ul> <li>Unvollst\u00e4ndigkeit: Es ist oft nicht m\u00f6glich, eine Hypothese endg\u00fcltig zu verifizieren, da es immer noch unbeobachtete F\u00e4lle geben k\u00f6nnte, die sie widerlegen.</li> <li>Falsche Best\u00e4tigung: Fehlerhafte Experimente oder voreingenommene Dateninterpretationen k\u00f6nnen zu falschen Best\u00e4tigungen f\u00fchren.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Verifikation/#verifikation-im-vergleich-zu-falsifikation","title":"\ud83d\udd04 Verifikation im Vergleich zu Falsifikation","text":"<ul> <li>Verifikation: Bezieht sich auf das Best\u00e4tigen einer Hypothese durch positive Ergebnisse und Beweise, die ihre G\u00fcltigkeit unterst\u00fctzen.</li> <li>Falsifikation: Bezieht sich auf das Widerlegen einer Hypothese durch negative Ergebnisse und Beweise, die zeigen, dass sie falsch ist.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/","title":"Wissenschaftliche Qualit\u00e4tskriterien","text":"<p>Klare Definition und Abgrenzung eines Themas bedeutet, dass das Forschungsthema pr\u00e4zise formuliert und von verwandten Themenbereichen abgegrenzt wird. Dies schafft Klarheit und Fokus f\u00fcr die Untersuchung und verhindert, dass die Forschung zu breit oder un\u00fcbersichtlich wird.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#merkmale","title":"Merkmale:","text":"<ul> <li>Pr\u00e4zision: Das Thema sollte spezifisch und klar formuliert sein.</li> <li>Abgrenzung: Verwandte Themen und Aspekte sollten identifiziert und abgegrenzt werden, um den Fokus zu bewahren.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#berucksichtigung-des-aktuellen-wissensstands-und-der-aktuellen-wissenschaftlichen-diskussion","title":"\ud83d\udd0d Ber\u00fccksichtigung des aktuellen Wissensstands und der aktuellen wissenschaftlichen Diskussion","text":"<p>Ber\u00fccksichtigung des aktuellen Wissensstands bedeutet, dass bestehende Forschung und wissenschaftliche Diskussionen zum Thema ber\u00fccksichtigt werden. Dies hilft, das Forschungsvorhaben im Kontext des aktuellen Wissensstands zu verorten und relevante Theorien und Modelle zu integrieren.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#merkmale_1","title":"Merkmale:","text":"<ul> <li>Literaturrecherche: Umfangreiche Recherche aktueller Studien, Artikel und B\u00fccher.</li> <li>Diskursanalyse: Analyse der aktuellen wissenschaftlichen Diskussionen und Kontroversen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#anwendung-von-wissenschaftlichen-methoden-und-erkenntnissen","title":"\ud83e\udde0 Anwendung von wissenschaftlichen Methoden und Erkenntnissen","text":"<p>Anwendung von wissenschaftlichen Methoden beinhaltet die Nutzung etablierter Methoden und Techniken zur Datenerhebung und -analyse. Dies umfasst auch das korrekte Zitieren von Quellen und die Abgrenzung von eigenen und fremden Erkenntnissen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#merkmale_2","title":"Merkmale:","text":"<ul> <li>Korrektes Zitieren: Alle verwendeten Quellen m\u00fcssen korrekt zitiert werden.</li> <li>Quellennachweis: Alle Daten und Informationen m\u00fcssen durch Quellen belegt werden.</li> <li>Abgrenzung von Urspr\u00fcngen: Deutlich machen, welche Teile der Arbeit auf eigenen Erkenntnissen und welche auf externen Quellen basieren.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#eigenleistung-muss-erkennbar-sein","title":"\ud83d\udca1 Eigenleistung muss erkennbar sein","text":"<p>Eigenleistung bedeutet, dass die eigenen Beitr\u00e4ge und Erkenntnisse klar erkennbar sind. Dies kann durch eigene Analysen, L\u00f6sungsvorschl\u00e4ge oder innovative Ans\u00e4tze erfolgen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#merkmale_3","title":"Merkmale:","text":"<ul> <li>L\u00f6sungsvorschl\u00e4ge: Entwicklung und Pr\u00e4sentation eigener L\u00f6sungsvorschl\u00e4ge.</li> <li>Begr\u00fcndung: Erkl\u00e4ren, warum andere Unternehmen oder Organisationen diese L\u00f6sungen nutzen sollten, auch \u00fcber den eigenen betrieblichen Kontext hinaus.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#systematisches-vorgehen","title":"\ud83d\udd04 Systematisches Vorgehen","text":"<p>Systematisches Vorgehen bezieht sich auf ein methodisches und strukturiertes Vorgehen, das sich durch die gesamte Untersuchung zieht. Ein klarer roter Faden sollte erkennbar sein.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#merkmale_4","title":"Merkmale:","text":"<ul> <li>Struktur: Eine logische und koh\u00e4rente Struktur der Arbeit.</li> <li>Roter Faden: Ein durchg\u00e4ngiger, nachvollziehbarer Argumentationsstrang.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#objektiver-und-sachlicher-schreibstil","title":"\ud83d\udd8b\ufe0f Objektiver und sachlicher Schreibstil","text":"<p>Objektiver und sachlicher Schreibstil bedeutet, dass die Sprache neutral und faktenbasiert ist. Pers\u00f6nliche Meinungen und Emotionen sollten vermieden werden.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#merkmale_5","title":"Merkmale:","text":"<ul> <li>Neutralit\u00e4t: Vermeidung von subjektiven Aussagen.</li> <li>Faktenbasiert: St\u00fctzung der Aussagen auf \u00fcberpr\u00fcfbare Daten und Fakten.</li> <li>Formale Sprache: Vermeidung der Ich-Form und Nutzung einer formalen, professionellen Sprache.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#aus-aktuellem-kenntnisstand-heraus-recherchieren","title":"\ud83d\udcd6 Aus aktuellem Kenntnisstand heraus recherchieren","text":"<p>Aktueller Kenntnisstand bedeutet, dass die Recherche und Analyse auf dem neuesten Stand des Wissens basiert. Dies erfordert kontinuierliche Aktualisierung und \u00dcberpr\u00fcfung der verwendeten Quellen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#merkmale_6","title":"Merkmale:","text":"<ul> <li>Aktualit\u00e4t: Nutzung aktueller und relevanter Quellen.</li> <li>Relevanz: Auswahl von Quellen, die direkt zum Thema beitragen und den aktuellen Stand der Forschung widerspiegeln.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#verstandlichkeit-des-ausdrucks","title":"\ud83d\udd8a\ufe0f Verst\u00e4ndlichkeit des Ausdrucks","text":"<p>Verst\u00e4ndlichkeit des Ausdrucks bedeutet, dass die wissenschaftliche Arbeit klar und pr\u00e4zise formuliert ist, sodass sie f\u00fcr den Leser leicht verst\u00e4ndlich ist.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#merkmale_7","title":"Merkmale:","text":"<ul> <li>Klare Sprache: Vermeidung unn\u00f6tig komplizierter S\u00e4tze und Begriffe.</li> <li>Strukturierte Darstellung: Logischer Aufbau und klare Gliederung der Inhalte.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#fachterminologie-verwenden","title":"\ud83d\udcda Fachterminologie verwenden","text":"<p>Fachterminologie bedeutet, dass spezifische Begriffe und Konzepte aus dem Fachgebiet korrekt und konsistent verwendet werden.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#merkmale_8","title":"Merkmale:","text":"<ul> <li>Fachsprache: Nutzung der im Fachbereich \u00fcblichen Terminologie, sowohl in Deutsch als auch in Englisch, falls erforderlich.</li> <li>Pr\u00e4zision: Genauigkeit und Klarheit in der Verwendung technischer Begriffe.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#vollstandigkeit-und-korrektheit-der-quellenangaben","title":"\ud83d\udcc4 Vollst\u00e4ndigkeit und Korrektheit der Quellenangaben","text":"<p>Vollst\u00e4ndigkeit und Korrektheit der Quellenangaben bedeutet, dass alle verwendeten Quellen vollst\u00e4ndig und korrekt zitiert werden. Dies gew\u00e4hrleistet Transparenz und Nachvollziehbarkeit der Forschung.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#merkmale_9","title":"Merkmale:","text":"<ul> <li>Vollst\u00e4ndige Zitation: Alle verwendeten Quellen m\u00fcssen vollst\u00e4ndig zitiert werden.</li> <li>Korrektheit: Quellenangaben m\u00fcssen korrekt und nach den geltenden Zitierstandards formatiert sein.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#objektivitat","title":"\ud83c\udf1f Objektivit\u00e4t","text":"<p>Objektivit\u00e4t bedeutet, dass die Forschung neutral und unvoreingenommen durchgef\u00fchrt wird. Es ist wichtig, dass die eigenen Vorurteile und Meinungen nicht die Ergebnisse beeinflussen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#merkmale_10","title":"Merkmale:","text":"<ul> <li>Ehrlichkeit: Aussagen und Ergebnisse d\u00fcrfen nicht bewusst verzerrt dargestellt werden.</li> <li>\u00dcberpr\u00fcfbarkeit: Alle Zitate und Quellenangaben m\u00fcssen angegeben werden, damit andere die Forschung nachvollziehen und \u00fcberpr\u00fcfen k\u00f6nnen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#reliabilitat","title":"\ud83d\udd04 Reliabilit\u00e4t","text":"<p>Reliabilit\u00e4t bezieht sich auf die Zuverl\u00e4ssigkeit der Ergebnisse. Eine Forschung ist reliabel, wenn sie bei Wiederholung unter den gleichen Bedingungen zu denselben Ergebnissen f\u00fchrt.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#merkmale_11","title":"Merkmale:","text":"<ul> <li>Reproduzierbarkeit: Bei identischen Bedingungen m\u00fcssen die Forschungsergebnisse wiederholt werden k\u00f6nnen.</li> <li>Konsistenz: Die Ergebnisse sollten konsistent und stabil \u00fcber die Zeit hinweg sein.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#validitat","title":"\u2705 Validit\u00e4t","text":"<p>Validit\u00e4t bedeutet, dass die Forschung tats\u00e4chlich misst, was sie zu messen vorgibt. Die Ergebnisse sollten frei von systematischen Fehlern sein, die die Wahrheit verf\u00e4lschen k\u00f6nnten.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#merkmale_12","title":"Merkmale:","text":"<ul> <li>G\u00fcltigkeit: Die Forschungsergebnisse m\u00fcssen korrekt und repr\u00e4sentativ sein.</li> <li>Fehlerfreiheit: Es d\u00fcrfen keine Fehler begangen werden, die die Ergebnisse verzerren k\u00f6nnten.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#verstandlichkeit","title":"\ud83d\udcda Verst\u00e4ndlichkeit","text":"<p>Verst\u00e4ndlichkeit bedeutet, dass die wissenschaftliche Arbeit so formuliert ist, dass sie f\u00fcr den Leser leicht nachvollziehbar und verst\u00e4ndlich ist.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#merkmale_13","title":"Merkmale:","text":"<ul> <li>Klarheit: Die Argumentation und Darstellung m\u00fcssen klar und pr\u00e4zise sein.</li> <li>Einfachheit: Komplexe Zusammenh\u00e4nge sollten so einfach wie m\u00f6glich erkl\u00e4rt werden.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#relevanz","title":"\ud83c\udfaf Relevanz","text":"<p>Relevanz bezieht sich darauf, dass die Forschung eine bestehende L\u00fccke in der wissenschaftlichen Literatur schlie\u00dft oder einen wichtigen Beitrag zur Weiterentwicklung des Wissens leistet.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#merkmale_14","title":"Merkmale:","text":"<ul> <li>Bedeutung: Die Forschung sollte begr\u00fcnden, warum das Thema wichtig ist und welche L\u00fccke es schlie\u00dft.</li> <li>Aktualit\u00e4t: Die Forschung muss einen aktuellen und relevanten Bezug haben.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#logische-argumentation","title":"\ud83d\udd17 Logische Argumentation","text":"<p>Logische Argumentation bedeutet, dass die wissenschaftliche Arbeit einem klaren und nachvollziehbaren Argumentationsstrang folgt.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#merkmale_15","title":"Merkmale:","text":"<ul> <li>Roter Faden: Ein durchg\u00e4ngiger, nachvollziehbarer Argumentationsstrang sollte erkennbar sein.</li> <li>Koh\u00e4renz: Die Argumente m\u00fcssen logisch aufeinander aufbauen und zusammenpassen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#originalitat","title":"\ud83c\udf1f Originalit\u00e4t","text":"<p>Originalit\u00e4t bedeutet, dass die Forschung neue und innovative Beitr\u00e4ge leistet und einen Bezug zur heutigen Realit\u00e4t hat.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#merkmale_16","title":"Merkmale:","text":"<ul> <li>Innovation: Die Forschung sollte neue Ideen und Ans\u00e4tze enthalten.</li> <li>Relevanz zur heutigen Realit\u00e4t: Die Ergebnisse und Schlussfolgerungen sollten f\u00fcr aktuelle Probleme und Fragestellungen relevant sein.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#nachvollziehbarkeit","title":"\ud83d\udd0d Nachvollziehbarkeit","text":"<p>Nachvollziehbarkeit bedeutet, dass die gesamte Forschung so dokumentiert ist, dass andere Forscher sie nachvollziehen und replizieren k\u00f6nnen.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#merkmale_17","title":"Merkmale:","text":"<ul> <li>Transparenz: Alle Methoden und Ergebnisse m\u00fcssen klar und detailliert dokumentiert sein.</li> <li>Reproduzierbarkeit: Andere Forscher sollten in der Lage sein, die Forschung unter den gleichen Bedingungen zu wiederholen.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#fairness","title":"\u2696\ufe0f Fairness","text":"<p>Fairness bedeutet, dass die Forschung ethisch und moralisch korrekt durchgef\u00fchrt wird. Dies schlie\u00dft auch den fairen Umgang mit den Ideen und Arbeiten anderer ein.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#merkmale_18","title":"Merkmale:","text":"<ul> <li>Ethische Standards: Die Forschung muss ethische Standards einhalten.</li> <li>Vermeidung von Ideenklau: Es ist wichtig, die Ideen und Arbeiten anderer korrekt zu zitieren und nicht als eigene auszugeben.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#verantwortung","title":"\ud83c\udf0d Verantwortung","text":"<p>Verantwortung bezieht sich auf die Verantwortung gegen\u00fcber der wissenschaftlichen Gemeinschaft und der Gesellschaft. Forscher m\u00fcssen sicherstellen, dass ihre Arbeit zuverl\u00e4ssig und vertrauensw\u00fcrdig ist.</p>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Wissenschaftliche%20Qualit%C3%A4tskriterien/#merkmale_19","title":"Merkmale:","text":"<ul> <li>Integrit\u00e4t: Die Forschung muss ehrlich und transparent durchgef\u00fchrt werden.</li> <li>Beitrag zur Wissenschaft: Die Ergebnisse sollten der wissenschaftlichen Gemeinschaft und der Gesellschaft n\u00fctzen.</li> <li>Verantwortungsbewusstsein: Forscher sollten sich der Auswirkungen und Implikationen ihrer Arbeit bewusst sein.</li> </ul>"},{"location":"DHBW%20Heidenheim/2024%20SoSe/Wissenschaftliches%20Arbeiten/Grundlagen/Ziele%20wissenschaftlicher%20Arbeiten/","title":"Ziele wissenschaftlicher Arbeiten","text":"<ul> <li>Eigenst\u00e4ndiger Beitrag</li> <li>Profilierung</li> <li>Tiefes Verst\u00e4ndnis (Expertenwissen) aufbauen</li> </ul>"},{"location":"DHBW%20Heidenheim/2025%20WiSe/Datenbanken/Datenbanken/","title":"Datenbanken","text":""},{"location":"DHBW%20Heidenheim/2025%20WiSe/Datenbanken/Datenbanken/#allgemeine-informationen","title":"Allgemeine Informationen","text":"<p>Lehrer: H\u00e4nisch</p>"},{"location":"DHBW%20Heidenheim/2025%20WiSe/Datenbanken/Datenbanken/#klausur-themen","title":"Klausur Themen","text":""},{"location":"DHBW%20Heidenheim/2025%20WiSe/Datenbanken/Datenbanken/#termine","title":"Termine","text":"<p>17.03.2025 \u2192 Klausur </p>"},{"location":"DHBW%20Heidenheim/2025%20WiSe/Mathematik%20II/Mathematik%20II/","title":"Mathematik II","text":""},{"location":"DHBW%20Heidenheim/2025%20WiSe/Mathematik%20II/Mathematik%20II/#allgemeine-informationen","title":"Allgemeine Informationen","text":"<p>Lehrer: H\u00e4nisch, Neuner</p>"},{"location":"DHBW%20Heidenheim/2025%20WiSe/Mathematik%20II/Mathematik%20II/#klausur-themen","title":"Klausur Themen","text":""},{"location":"DHBW%20Heidenheim/2025%20WiSe/Mathematik%20II/Mathematik%20II/#termine","title":"Termine","text":"<p>20.03.2025 \u2192 Klausur </p>"},{"location":"DHBW%20Heidenheim/2025%20WiSe/Netzwerktechnik/Netzwerktechnik/","title":"Netzwerktechnik","text":""},{"location":"DHBW%20Heidenheim/2025%20WiSe/Netzwerktechnik/Netzwerktechnik/#allgemeine-informationen","title":"Allgemeine Informationen","text":"<p>Lehrer: Schneider</p>"},{"location":"DHBW%20Heidenheim/2025%20WiSe/Netzwerktechnik/Netzwerktechnik/#klausur-themen","title":"Klausur Themen","text":""},{"location":"DHBW%20Heidenheim/2025%20WiSe/Netzwerktechnik/Netzwerktechnik/#termine","title":"Termine","text":"<p>14.03.2025 \u2192 Klausur </p>"},{"location":"DHBW%20Heidenheim/2025%20WiSe/Technische%20Informatik%20II/Technische%20Informatik%20II/","title":"Technische Informatik II","text":""},{"location":"DHBW%20Heidenheim/2025%20WiSe/Technische%20Informatik%20II/Technische%20Informatik%20II/#allgemeine-informationen","title":"Allgemeine Informationen","text":"<p>Lehrer: Berninger</p>"},{"location":"DHBW%20Heidenheim/2025%20WiSe/Technische%20Informatik%20II/Technische%20Informatik%20II/#klausur-themen","title":"Klausur Themen","text":""},{"location":"DHBW%20Heidenheim/2025%20WiSe/Technische%20Informatik%20II/Technische%20Informatik%20II/#termine","title":"Termine","text":"<p>28.02.2025\u2192 Klausur </p>"},{"location":"DHBW%20Heidenheim/2025%20WiSe/Theoretische%20Informatik%20III/Theoretische%20Informatik%20III/","title":"Theoretische Informatik III","text":""},{"location":"DHBW%20Heidenheim/2025%20WiSe/Theoretische%20Informatik%20III/Theoretische%20Informatik%20III/#allgemeine-informationen","title":"Allgemeine Informationen","text":"<p>Lehrer: Berninger/ Birk</p>"},{"location":"DHBW%20Heidenheim/2025%20WiSe/Theoretische%20Informatik%20III/Theoretische%20Informatik%20III/#klausur-themen","title":"Klausur Themen","text":""},{"location":"DHBW%20Heidenheim/2025%20WiSe/Theoretische%20Informatik%20III/Theoretische%20Informatik%20III/#termine","title":"Termine","text":"<p>03.03.2025 \u2192 Klausur </p>"}]}