{"path":"DHBW Heidenheim/2025 WiSe/Datenbanken/Skript/Datenbanken (Englisch)/LESSON 07.pdf","text":"LESSON 7 Stored Procedures in MySQL Ihor Liutak Content 1. Understand the concept and purpose of stored procedures. 2. Learn how to create, execute, and manage stored procedures in MySQL. 3. Practice building simple and advanced stored procedures. Datenbanken II 2 ContentWhat is a Stored Procedure? Datenbanken II 3 Definition : A stored procedure is a set of SQL statements stored in the database that can be executed as a single unit. Purpose : Encapsulate reusable logic. Improve performance by reducing network traffic. Enhance security by abstracting database operations. Example: A stored procedure to retrieve all users: Creating a Simple Stored Procedure Datenbanken II 4 Steps: Use CREATE PROCEDURE to define the procedure. Write SQL logic inside the BEGIN and END block. Use parameters for dynamic inputs if needed. Example: Execution : Verify Session Collation Datenbanken II 5 Corrected collation in the database heidenheim.site/datadbai.sql Ensure the session's collation is compatible with the tableâ€™s collation If necessary, set the session collation to utf8mb4_unicode_ci Managing Stored Procedures Datenbanken II 6 Viewing Procedures: SHOW PROCEDURE STATUS WHERE Db = 'database_name'; Describing a Procedure: SHOW CREATE PROCEDURE procedure_name; Deleting a Procedure: DROP PROCEDURE IF EXISTS procedure_name; Example: DROP PROCEDURE IF EXISTS GetFruitsBySeason; Advanced Stored Procedure with Parameters Datenbanken II 7 Purpose: Pass multiple parameters for more flexible operations: Execution Control Structures in Stored Procedures Datenbanken II 8 Purpose: Add logic using loops and conditions. Example: A procedure with conditional logic: Control Structures in Stored Procedures 2 Datenbanken II 9 Execution: This line calls the CheckFruitSeason procedure, passing 1 as the fruit_id and storing the output message in the variable @output SELECT @output; This line retrieves the value stored in @output and displays it. When you execute these lines, you should see an output message that indicates whether the fruit with id 1 is available in Summer or not. Control Structures in Stored Procedures 3 Datenbanken II 10 Execution: In summary, the procedure CheckFruitSeason takes a fruit's ID as input, checks its seasonality, and returns a message indicating whether the fruit is available in Summer or not. Procedure Declaration : This declares a stored procedure called CheckFruitSeason. It takes two parameters: IN fruit_id INT: An input parameter fruit_id of type integer. OUT result VARCHAR(50): An output parameter result of type VARCHAR with a maximum length of 50 characters. Control Structures in Stored Procedures 4 Datenbanken II 11 Declare Variable DECLARE season VARCHAR(20); A local variable season of type VARCHAR with a maximum length of 20 characters is declared. This variable will hold the seasonality information of the fruit. Select Statement SELECT seasonality INTO season FROM fruits WHERE id = fruit_id; This selects the seasonality from the fruits table where the id matches the provided fruit_id and stores the result into the season variable. Control Structures in Stored Procedures 5 Datenbanken II 12 If-Else Statement IF season = 'Summer' THEN SET result = 'This fruit is available in Summer.'; ELSE SET result = 'This fruit is not available in Summer.'; END IF; This conditional block checks the value of the season variable. If season is 'Summer', it sets the result to 'This fruit is available in Summer.'. Otherwise, it sets the result to 'This fruit is not available in Summer.' Lab Setup Datenbanken II 13 Ensure you have access to MySQL and a database. Use the dw.loc database for practice. Tables used in the lab: fruits users Lab Task 1: Create a Simple Procedure Datenbanken II 14 Objective: Write a stored procedure to fetch fruits based on their storage place. Instructions: Create the procedure GetFruitsByStoragePlace(IN storage ENUM). Use a SELECT statement to filter fruits. Lab Task 2: Update and Delete Operations Datenbanken II 15 Objective: Create procedures to update and delete fruits. Instructions : Write a procedure UpdateFruitSeason to modify seasonality. Write a procedure DeleteFruit to remove a fruit by ID. Lab Task 3: Advanced Procedure with Loops Datenbanken II 16 Objective: Create a procedure to update multiple fruits. Instructions : Use a loop to iterate through a list of fruit IDs. Update their storage place. '[1,2,3,4]' as jt; Lab Task 3: Explanation 1 Datenbanken II 17 The procedure UpdateMultipleFruits: Accepts Two Parameters : ids: A JSON string containing an array of fruit IDs. new_storage: The new storage place for the fruits (e.g., 'Fridge', 'WoodBox'). Uses a Cursor: A cursor is used to iterate over each fruit ID in the JSON array. For each ID, the storage place is updated in the database. Loops Through IDs : The loop fetches each ID from the cursor and performs an UPDATE operation. The loop exits when there are no more IDs to process. Lab Task 3: Explanation - Key SQL Concepts Datenbanken II 18 JSON Data Handling : The JSON_TABLE function parses the ids JSON string into a table structure. This allows the procedure to iterate over the IDs. Example Input : \"[1, 2, 3, 4]\" Cursors: A cursor is a database object used to fetch one row at a time from a query result set. In this procedure: DECLARE cur CURSOR FOR SELECT id FROM JSON_TABLE(...); initializes the cursor. FETCH cur INTO id; retrieves the next ID. CLOSE cur; ensures the cursor is closed after processing. Lab Task 3: Explanation - Key SQL Concepts - Loop Datenbanken II 19 Looping : The LOOP statement processes each ID from the cursor. The LEAVE statement exits the loop when no more IDs are fetched. Example Usage: CALL UpdateMultipleFruits('[1, 2, 3]', 'Fridge'); Updates the storage_place of fruits with IDs 1, 2, and 3 to Fridge Performance: Using JSON_TABLE and cursors might not be the most efficient method for large datasets. However, it's suitable for small lists and educational purposes Procedure Without Cursors Datenbanken II 20 DELIMITER // CREATE PROCEDURE UpdateMultipleFruits( IN ids TEXT, IN new_storage ENUM('Fridge', 'WoodBox') ) BEGIN UPDATE fruits SET storage_place = new_storage WHERE id IN ( SELECT id FROM JSON_TABLE(ids, \"$[*]\" COLUMNS(id INT PATH \"$\")) AS jt ); END; // DELIMITER ; CALL UpdateMultipleFruits('[1,2,3,4]', 'WoodBox'); How Write and Call Stored Procedures Using MySQL Console Datenbanken II 21 1 Open MySQL Console mysql -u root -p Enter your MySQL password when prompted 2 Select the Database USE your_database_name; 3 Create a Stored Procedure Write the CREATE PROCEDURE statement in the MySQL console. Use the DELIMITER command to change the statement delimiter from ; to something else (e.g., // or $$) to avoid conflicts inside the procedure body. 4 Call the Stored Procedure CALL GetAllFruits(); Summary Datenbanken II 22 Stored procedures encapsulate logic for database operations. Parameters enhance flexibility. Control structures and loops enable advanced functionality. Always test and manage procedures for performance.","libVersion":"0.3.2","langs":""}