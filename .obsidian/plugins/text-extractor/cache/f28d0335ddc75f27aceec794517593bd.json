{"path":"DHBW Heidenheim/2025 WiSe/Theoretische Informatik III/Übungen/14-dfa-minimierung.pdf","text":"Formale Sprachen und Komplexit¨at Theoretische Informatik f¨ur Medieninformatiker Sommersemester 2023 Minimierung von deterministischen endlichen Automaten Prof. Dr. Jasmin Blanchette Lehr- und Forschungseinheit f¨ur Theoretische Informatik Stand: 16. Mai 2023 Folien urspr¨unglich von PD Dr. David Sabel ¨Aquivalenzklassenautomat Definition (¨Aquivalenzklassenautomat) Sei M = (Z, Σ, δ, z0, E) ein DFA. Wir nennen zwei Zust¨ande z, z ′ ∈ Z ¨aquivalent und schreiben z ≡ z ′ falls gilt: f¨ur alle w ∈ Σ∗ : ̂δ(z, w ) ∈ E ⇐⇒ ̂δ(z ′, w ) ∈ E. Der ¨Aquivalenzklassenautomat zu M ist der DFA M′ = (Z′, Σ, δ′, z ′ 0, E′) mit Z′ = {[z]≡ | z ∈ Z} z ′ 0 = [z0]≡ E′ = {[z]≡ | z ∈ E} δ′([z]≡, a) = [δ(z, a)]≡ TCS | 14 Minimierung von DFAs | SoSe 2023 2/14 ¨Aquivalenzklassenautomat: Korrektheit und Minimalit¨at Satz Sei M = (Z, Σ, δ, z0, E) ein DFA und M′ = (Z′, Σ, δ′, z ′ 0, E′) der ¨Aquivalenzklassenautomat zu M. Dann gilt 1. L(M′) = L(M). 2. Falls alle Zust¨ande in Z vom Startzustand z0 erreichbar sind, dann ist M′ minimal. Beweis (nur Teil 1): Sei w ∈ Σ∗. Dann gilt: ▶ M durchl¨auft die Zustandsfolge q0, . . . , q|w | entlang w und akzeptiert w g.d.w. q|w | ∈ E gilt. ▶ M′ durchl¨auft die Zustandsfolge [q0]≡, . . . , [q|w |]≡ und akzeptiert w g.d.w. [q|w |]≡ ∈ E′ gilt. Da per Definition [q|w |]≡ ∈ E′ genau dann gilt, wenn q|w | ∈ E gilt, folgt, dass M und M′ dieselben W¨orter akzeptieren. TCS | 14 Minimierung von DFAs | SoSe 2023 3/14 ¨Aquivalenzklassenautomat: Korrektheit und Minimalit¨at Satz Sei M = (Z, Σ, δ, z0, E) ein DFA und M′ = (Z′, Σ, δ′, z ′ 0, E′) der ¨Aquivalenzklassenautomat zu M. Dann gilt 1. L(M′) = L(M). 2. Falls alle Zust¨ande in Z vom Startzustand z0 erreichbar sind, dann ist M′ minimal. Beweis (nur Teil 1): Sei w ∈ Σ∗. Dann gilt: ▶ M durchl¨auft die Zustandsfolge q0, . . . , q|w | entlang w und akzeptiert w g.d.w. q|w | ∈ E gilt. ▶ M′ durchl¨auft die Zustandsfolge [q0]≡, . . . , [q|w |]≡ und akzeptiert w g.d.w. [q|w |]≡ ∈ E′ gilt. Da per Definition [q|w |]≡ ∈ E′ genau dann gilt, wenn q|w | ∈ E gilt, folgt, dass M und M′ dieselben W¨orter akzeptieren. TCS | 14 Minimierung von DFAs | SoSe 2023 3/14 ¨Aquivalenzklassenautomat: Korrektheit und Minimalit¨at Satz Sei M = (Z, Σ, δ, z0, E) ein DFA und M′ = (Z′, Σ, δ′, z ′ 0, E′) der ¨Aquivalenzklassenautomat zu M. Dann gilt 1. L(M′) = L(M). 2. Falls alle Zust¨ande in Z vom Startzustand z0 erreichbar sind, dann ist M′ minimal. Beweis (nur Teil 1): Sei w ∈ Σ∗. Dann gilt: ▶ M durchl¨auft die Zustandsfolge q0, . . . , q|w | entlang w und akzeptiert w g.d.w. q|w | ∈ E gilt. ▶ M′ durchl¨auft die Zustandsfolge [q0]≡, . . . , [q|w |]≡ und akzeptiert w g.d.w. [q|w |]≡ ∈ E′ gilt. Da per Definition [q|w |]≡ ∈ E′ genau dann gilt, wenn q|w | ∈ E gilt, folgt, dass M und M′ dieselben W¨orter akzeptieren. TCS | 14 Minimierung von DFAs | SoSe 2023 3/14 ¨Aquivalenzklassenautomat: Korrektheit und Minimalit¨at Satz Sei M = (Z, Σ, δ, z0, E) ein DFA und M′ = (Z′, Σ, δ′, z ′ 0, E′) der ¨Aquivalenzklassenautomat zu M. Dann gilt 1. L(M′) = L(M). 2. Falls alle Zust¨ande in Z vom Startzustand z0 erreichbar sind, dann ist M′ minimal. Beweis (nur Teil 1): Sei w ∈ Σ∗. Dann gilt: ▶ M durchl¨auft die Zustandsfolge q0, . . . , q|w | entlang w und akzeptiert w g.d.w. q|w | ∈ E gilt. ▶ M′ durchl¨auft die Zustandsfolge [q0]≡, . . . , [q|w |]≡ und akzeptiert w g.d.w. [q|w |]≡ ∈ E′ gilt. Da per Definition [q|w |]≡ ∈ E′ genau dann gilt, wenn q|w | ∈ E gilt, folgt, dass M und M′ dieselben W¨orter akzeptieren. TCS | 14 Minimierung von DFAs | SoSe 2023 3/14 Zustandsminimierung von DFAs Schritte: A. Entferne nicht erreichbare Zust¨ande. B. Berechne ¨aquivalente Zust¨ande (bez¨uglich ≡). C. Bilde ¨Aquivalenzklassenautomat, indem ¨aquivalente Zust¨ande verschmolzen werden. TCS | 14 Minimierung von DFAs | SoSe 2023 4/14 Zustandsminimierung von DFAs Schritte: A. Entferne nicht erreichbare Zust¨ande. B. Berechne ¨aquivalente Zust¨ande (bez¨uglich ≡). C. Bilde ¨Aquivalenzklassenautomat, indem ¨aquivalente Zust¨ande verschmolzen werden. TCS | 14 Minimierung von DFAs | SoSe 2023 4/14 Berechnung ¨aquivalenter Zust¨ande Schritte: 1. Markiere Paare von Zust¨anden, die verschieden sein m¨ussen. Markiere initial alle {z, z ′} mit z ∈ E, z ′ ̸∈ E. 2. Vervollst¨andige das Markieren durch Untersuchen von ¨Uberg¨angen: 2.1 Wenn {z, z ′} noch nicht markiert: Pr¨ufe f¨ur jedes a ∈ Σ, ob die beiden Nachfolger {δ(z, a), δ(z ′, a)} markiert sind. 2.2 Falls ja, dann markiere {z, z ′}. 2.3 Wiederhole, bis sich nichts mehr ¨andert. 3. Alle am Ende unmarkierten Paare sind ¨aquivalente Zust¨ande. TCS | 14 Minimierung von DFAs | SoSe 2023 5/14 Berechnung ¨aquivalenter Zust¨ande Schritte: 1. Markiere Paare von Zust¨anden, die verschieden sein m¨ussen. Markiere initial alle {z, z ′} mit z ∈ E, z ′ ̸∈ E. 2. Vervollst¨andige das Markieren durch Untersuchen von ¨Uberg¨angen: 2.1 Wenn {z, z ′} noch nicht markiert: Pr¨ufe f¨ur jedes a ∈ Σ, ob die beiden Nachfolger {δ(z, a), δ(z ′, a)} markiert sind. 2.2 Falls ja, dann markiere {z, z ′}. 2.3 Wiederhole, bis sich nichts mehr ¨andert. 3. Alle am Ende unmarkierten Paare sind ¨aquivalente Zust¨ande. TCS | 14 Minimierung von DFAs | SoSe 2023 5/14 Berechnung ¨aquivalenter Zust¨ande Schritte: 1. Markiere Paare von Zust¨anden, die verschieden sein m¨ussen. Markiere initial alle {z, z ′} mit z ∈ E, z ′ ̸∈ E. 2. Vervollst¨andige das Markieren durch Untersuchen von ¨Uberg¨angen: 2.1 Wenn {z, z ′} noch nicht markiert: Pr¨ufe f¨ur jedes a ∈ Σ, ob die beiden Nachfolger {δ(z, a), δ(z ′, a)} markiert sind. 2.2 Falls ja, dann markiere {z, z ′}. 2.3 Wiederhole, bis sich nichts mehr ¨andert. 3. Alle am Ende unmarkierten Paare sind ¨aquivalente Zust¨ande. TCS | 14 Minimierung von DFAs | SoSe 2023 5/14 Berechnung ¨aquivalenter Zust¨ande Schritte: 1. Markiere Paare von Zust¨anden, die verschieden sein m¨ussen. Markiere initial alle {z, z ′} mit z ∈ E, z ′ ̸∈ E. 2. Vervollst¨andige das Markieren durch Untersuchen von ¨Uberg¨angen: 2.1 Wenn {z, z ′} noch nicht markiert: Pr¨ufe f¨ur jedes a ∈ Σ, ob die beiden Nachfolger {δ(z, a), δ(z ′, a)} markiert sind. 2.2 Falls ja, dann markiere {z, z ′}. 2.3 Wiederhole, bis sich nichts mehr ¨andert. 3. Alle am Ende unmarkierten Paare sind ¨aquivalente Zust¨ande. TCS | 14 Minimierung von DFAs | SoSe 2023 5/14 Algorithmus 3: Berechnung aller ¨aquivalenten Zust¨ande Eingabe: DFA M = (Z, Σ, δ, z0, E), der keine unerreichbaren Zust¨ande hat Ausgabe: Zustandspaare {z, z ′} mit z ̸= z ′ f¨ur die gilt z ≡ z ′ Beginn stelle Tabelle T aller Zustandspaare {z, z ′} mit z ̸= z ′ und z, z ′ ∈ Z auf; markiere alle Paare {z, z ′} in T mit z ∈ E und z ′ ̸∈ E; wiederhole f¨ur jedes unmarkierte Paar {z, z ′} in T tue f¨ur jedes a ∈ Σ tue wenn {δ(z, a), δ(z ′, a)} in T markiert ist dann markiere {z, z ′} in T ; Ende Ende Ende bis sich T nicht mehr ver¨andert; return {{z, z ′} | {z, z ′} ist nicht markiert in T } Ende TCS | 14 Minimierung von DFAs | SoSe 2023 6/14 Korrektheit (1) Satz Sei M = (Z, Σ, δ, z0, E) ein DFA, der keine unerreichbaren Zust¨ande hat. Algorithmus 3 berechnet ¨aquivalente Zustandspaare von M und es gibt keine weiteren ¨aquivalenten Paare. Beweis: ▶ Teil 1: Wird das Paar {z, z ′} markiert, dann gilt z ̸≡ z ′. ▶ Teil 2: Wenn z ̸≡ z ′, dann wird das Paar {z, z ′} markiert. TCS | 14 Minimierung von DFAs | SoSe 2023 7/14 Korrektheit (1) Satz Sei M = (Z, Σ, δ, z0, E) ein DFA, der keine unerreichbaren Zust¨ande hat. Algorithmus 3 berechnet ¨aquivalente Zustandspaare von M und es gibt keine weiteren ¨aquivalenten Paare. Beweis: ▶ Teil 1: Wird das Paar {z, z ′} markiert, dann gilt z ̸≡ z ′. ▶ Teil 2: Wenn z ̸≡ z ′, dann wird das Paar {z, z ′} markiert. TCS | 14 Minimierung von DFAs | SoSe 2023 7/14 Korrektheit (2) Satz Sei M = (Z, Σ, δ, z0, E) ein DFA, der keine unerreichbaren Zust¨ande hat. Algorithmus 3 berechnet ¨aquivalente Zustandspaare von M und es gibt keine weiteren ¨aquivalenten Paare. Beweis (Teil 1): Wird das Paar {z, z ′} markiert, dann gilt z ̸≡ z ′. ▶ Wir zeigen: F¨ur jedes markierte Paar {z, z ′} gibt es Wort w mit ¬(̂δ(z , w ) ∈ E ⇐⇒ ̂δ(z ′, w ) ∈ E). ▶ Induktion ¨uber Anzahl Schleifeniterationen bis {z, z ′} markiert wird. ▶ Basis: 0 Iterationen, {z, z ′} wird vor der Schleife markiert, w = ε erf¨ullt Behauptung. ▶ Schritt: Mehr als 0 Iterationen. Dann wird {z, z ′} markiert, weil es a ∈ Σ und ein markiertes Paar {δ(z, a), δ(z ′, a)} gibt. Induktionsannahme liefert Wort w ′ mit ¬(̂δ(δ(z, a), w ′) ∈ E ⇐⇒ ̂δ(δ(z ′, a), w ′) ∈ E). ▶ Mit w = aw ′ folgt: ¬(̂δ(z, w ) ∈ E ⇐⇒ ̂δ(z ′, w ) ∈ E). TCS | 14 Minimierung von DFAs | SoSe 2023 8/14 Korrektheit (2) Satz Sei M = (Z, Σ, δ, z0, E) ein DFA, der keine unerreichbaren Zust¨ande hat. Algorithmus 3 berechnet ¨aquivalente Zustandspaare von M und es gibt keine weiteren ¨aquivalenten Paare. Beweis (Teil 1): Wird das Paar {z, z ′} markiert, dann gilt z ̸≡ z ′. ▶ Wir zeigen: F¨ur jedes markierte Paar {z, z ′} gibt es Wort w mit ¬(̂δ(z, w ) ∈ E ⇐⇒ ̂δ(z ′, w ) ∈ E). ▶ Induktion ¨uber Anzahl Schleifeniterationen bis {z, z ′} markiert wird. ▶ Basis: 0 Iterationen, {z, z ′} wird vor der Schleife markiert, w = ε erf¨ullt Behauptung. ▶ Schritt: Mehr als 0 Iterationen. Dann wird {z, z ′} markiert, weil es a ∈ Σ und ein markiertes Paar {δ(z, a), δ(z ′, a)} gibt. Induktionsannahme liefert Wort w ′ mit ¬(̂δ(δ(z, a), w ′) ∈ E ⇐⇒ ̂δ(δ(z ′, a), w ′) ∈ E). ▶ Mit w = aw ′ folgt: ¬(̂δ(z, w ) ∈ E ⇐⇒ ̂δ(z ′, w ) ∈ E). TCS | 14 Minimierung von DFAs | SoSe 2023 8/14 Korrektheit (2) Satz Sei M = (Z, Σ, δ, z0, E) ein DFA, der keine unerreichbaren Zust¨ande hat. Algorithmus 3 berechnet ¨aquivalente Zustandspaare von M und es gibt keine weiteren ¨aquivalenten Paare. Beweis (Teil 1): Wird das Paar {z, z ′} markiert, dann gilt z ̸≡ z ′. ▶ Wir zeigen: F¨ur jedes markierte Paar {z, z ′} gibt es Wort w mit ¬(̂δ(z, w ) ∈ E ⇐⇒ ̂δ(z ′, w ) ∈ E). ▶ Induktion ¨uber Anzahl Schleifeniterationen bis {z, z ′} markiert wird. ▶ Basis: 0 Iterationen, {z, z ′} wird vor der Schleife markiert, w = ε erf¨ullt Behauptung. ▶ Schritt: Mehr als 0 Iterationen. Dann wird {z, z ′} markiert, weil es a ∈ Σ und ein markiertes Paar {δ(z, a), δ(z ′, a)} gibt. Induktionsannahme liefert Wort w ′ mit ¬(̂δ(δ(z, a), w ′) ∈ E ⇐⇒ ̂δ(δ(z ′, a), w ′) ∈ E). ▶ Mit w = aw ′ folgt: ¬(̂δ(z, w ) ∈ E ⇐⇒ ̂δ(z ′, w ) ∈ E). TCS | 14 Minimierung von DFAs | SoSe 2023 8/14 Korrektheit (2) Satz Sei M = (Z, Σ, δ, z0, E) ein DFA, der keine unerreichbaren Zust¨ande hat. Algorithmus 3 berechnet ¨aquivalente Zustandspaare von M und es gibt keine weiteren ¨aquivalenten Paare. Beweis (Teil 1): Wird das Paar {z, z ′} markiert, dann gilt z ̸≡ z ′. ▶ Wir zeigen: F¨ur jedes markierte Paar {z, z ′} gibt es Wort w mit ¬(̂δ(z, w ) ∈ E ⇐⇒ ̂δ(z ′, w ) ∈ E). ▶ Induktion ¨uber Anzahl Schleifeniterationen bis {z, z ′} markiert wird. ▶ Basis: 0 Iterationen, {z, z ′} wird vor der Schleife markiert, w = ε erf¨ullt Behauptung. ▶ Schritt: Mehr als 0 Iterationen. Dann wird {z, z ′} markiert, weil es a ∈ Σ und ein markiertes Paar {δ(z, a), δ(z ′, a)} gibt. Induktionsannahme liefert Wort w ′ mit ¬(̂δ(δ(z, a), w ′) ∈ E ⇐⇒ ̂δ(δ(z ′, a), w ′) ∈ E). ▶ Mit w = aw ′ folgt: ¬(̂δ(z, w ) ∈ E ⇐⇒ ̂δ(z ′, w ) ∈ E). TCS | 14 Minimierung von DFAs | SoSe 2023 8/14 Korrektheit (2) Satz Sei M = (Z, Σ, δ, z0, E) ein DFA, der keine unerreichbaren Zust¨ande hat. Algorithmus 3 berechnet ¨aquivalente Zustandspaare von M und es gibt keine weiteren ¨aquivalenten Paare. Beweis (Teil 1): Wird das Paar {z, z ′} markiert, dann gilt z ̸≡ z ′. ▶ Wir zeigen: F¨ur jedes markierte Paar {z, z ′} gibt es Wort w mit ¬(̂δ(z, w ) ∈ E ⇐⇒ ̂δ(z ′, w ) ∈ E). ▶ Induktion ¨uber Anzahl Schleifeniterationen bis {z, z ′} markiert wird. ▶ Basis: 0 Iterationen, {z, z ′} wird vor der Schleife markiert, w = ε erf¨ullt Behauptung. ▶ Schritt: Mehr als 0 Iterationen. Dann wird {z, z ′} markiert, weil es a ∈ Σ und ein markiertes Paar {δ(z, a), δ(z ′, a)} gibt. Induktionsannahme liefert Wort w ′ mit ¬(̂δ(δ(z, a), w ′) ∈ E ⇐⇒ ̂δ(δ(z ′, a), w ′) ∈ E). ▶ Mit w = aw ′ folgt: ¬(̂δ(z, w ) ∈ E ⇐⇒ ̂δ(z ′, w ) ∈ E). TCS | 14 Minimierung von DFAs | SoSe 2023 8/14 Korrektheit (2) Satz Sei M = (Z, Σ, δ, z0, E) ein DFA, der keine unerreichbaren Zust¨ande hat. Algorithmus 3 berechnet ¨aquivalente Zustandspaare von M und es gibt keine weiteren ¨aquivalenten Paare. Beweis (Teil 1): Wird das Paar {z, z ′} markiert, dann gilt z ̸≡ z ′. ▶ Wir zeigen: F¨ur jedes markierte Paar {z, z ′} gibt es Wort w mit ¬(̂δ(z, w ) ∈ E ⇐⇒ ̂δ(z ′, w ) ∈ E). ▶ Induktion ¨uber Anzahl Schleifeniterationen bis {z, z ′} markiert wird. ▶ Basis: 0 Iterationen, {z, z ′} wird vor der Schleife markiert, w = ε erf¨ullt Behauptung. ▶ Schritt: Mehr als 0 Iterationen. Dann wird {z, z ′} markiert, weil es a ∈ Σ und ein markiertes Paar {δ(z, a), δ(z ′, a)} gibt. Induktionsannahme liefert Wort w ′ mit ¬(̂δ(δ(z, a), w ′) ∈ E ⇐⇒ ̂δ(δ(z ′, a), w ′) ∈ E). ▶ Mit w = aw ′ folgt: ¬(̂δ(z, w ) ∈ E ⇐⇒ ̂δ(z ′, w ) ∈ E). TCS | 14 Minimierung von DFAs | SoSe 2023 8/14 Korrektheit (3) Satz Sei M = (Z, Σ, δ, z0, E) ein DFA, der keine unerreichbaren Zust¨ande hat. Algorithmus 3 berechnet ¨aquivalente Zustandspaare von M und es gibt keine weiteren ¨aquivalenten Paare. Beweis (Teil 2): Wenn z ̸≡ z ′, dann wird das Paar {z, z ′} markiert. ▶ Beweis durch Widerspruch. Annahme es gibt Paare z ̸≡ z ′, die der Algorithmus nicht markiert. O.B.d.A. k¨onnen wir ein Paar {z, z ′} w¨ahlen, f¨ur welches es ein minimal langes Wort w gibt mit ¬(̂δ(z, w ) ∈ E ⇐⇒ ̂δ(z ′, w ) ∈ E). ▶ Wenn w = ε, dann wird {z, z ′} vor der Schleife markiert. Widerspruch. ▶ Wenn w = aw ′ mit a ∈ Σ, dann gilt: Wenn {δ(z, a), δ(z ′, a)} vom Algorithmus markiert wird, dann auch {z, z ′}. Daher: {δ(z, a), δ(z ′, a)} wird nicht markiert. Aber dann gilt f¨ur w ′: ¬ (̂δ(δ(z, a), w ′) ∈ E ⇐⇒ ̂δ(δ(z ′, a), w ′) ∈ E), d.h. δ(z, a) ̸≡ δ(z ′, a), und |w ′| < |w |. Widerspruch zur Minimalit¨at von {z, z ′}. TCS | 14 Minimierung von DFAs | SoSe 2023 9/14 Korrektheit (3) Satz Sei M = (Z, Σ, δ, z0, E) ein DFA, der keine unerreichbaren Zust¨ande hat. Algorithmus 3 berechnet ¨aquivalente Zustandspaare von M und es gibt keine weiteren ¨aquivalenten Paare. Beweis (Teil 2): Wenn z ̸≡ z ′, dann wird das Paar {z, z ′} markiert. ▶ Beweis durch Widerspruch. Annahme es gibt Paare z ̸≡ z ′, die der Algorithmus nicht markiert. O.B.d.A. k¨onnen wir ein Paar {z, z ′} w¨ahlen, f¨ur welches es ein minimal langes Wort w gibt mit ¬(̂δ(z, w ) ∈ E ⇐⇒ ̂δ(z ′, w ) ∈ E). ▶ Wenn w = ε, dann wird {z, z ′} vor der Schleife markiert. Widerspruch. ▶ Wenn w = aw ′ mit a ∈ Σ, dann gilt: Wenn {δ(z, a), δ(z ′, a)} vom Algorithmus markiert wird, dann auch {z, z ′}. Daher: {δ(z, a), δ(z ′, a)} wird nicht markiert. Aber dann gilt f¨ur w ′: ¬ (̂δ(δ(z, a), w ′) ∈ E ⇐⇒ ̂δ(δ(z ′, a), w ′) ∈ E), d.h. δ(z, a) ̸≡ δ(z ′, a), und |w ′| < |w |. Widerspruch zur Minimalit¨at von {z, z ′}. TCS | 14 Minimierung von DFAs | SoSe 2023 9/14 Korrektheit (3) Satz Sei M = (Z, Σ, δ, z0, E) ein DFA, der keine unerreichbaren Zust¨ande hat. Algorithmus 3 berechnet ¨aquivalente Zustandspaare von M und es gibt keine weiteren ¨aquivalenten Paare. Beweis (Teil 2): Wenn z ̸≡ z ′, dann wird das Paar {z, z ′} markiert. ▶ Beweis durch Widerspruch. Annahme es gibt Paare z ̸≡ z ′, die der Algorithmus nicht markiert. O.B.d.A. k¨onnen wir ein Paar {z, z ′} w¨ahlen, f¨ur welches es ein minimal langes Wort w gibt mit ¬(̂δ(z, w ) ∈ E ⇐⇒ ̂δ(z ′, w ) ∈ E). ▶ Wenn w = ε, dann wird {z, z ′} vor der Schleife markiert. Widerspruch. ▶ Wenn w = aw ′ mit a ∈ Σ, dann gilt: Wenn {δ(z, a), δ(z ′, a)} vom Algorithmus markiert wird, dann auch {z, z ′}. Daher: {δ(z, a), δ(z ′, a)} wird nicht markiert. Aber dann gilt f¨ur w ′: ¬ (̂δ(δ(z, a), w ′) ∈ E ⇐⇒ ̂δ(δ(z ′, a), w ′) ∈ E), d.h. δ(z, a) ̸≡ δ(z ′, a), und |w ′| < |w |. Widerspruch zur Minimalit¨at von {z, z ′}. TCS | 14 Minimierung von DFAs | SoSe 2023 9/14 Korrektheit (3) Satz Sei M = (Z, Σ, δ, z0, E) ein DFA, der keine unerreichbaren Zust¨ande hat. Algorithmus 3 berechnet ¨aquivalente Zustandspaare von M und es gibt keine weiteren ¨aquivalenten Paare. Beweis (Teil 2): Wenn z ̸≡ z ′, dann wird das Paar {z, z ′} markiert. ▶ Beweis durch Widerspruch. Annahme es gibt Paare z ̸≡ z ′, die der Algorithmus nicht markiert. O.B.d.A. k¨onnen wir ein Paar {z, z ′} w¨ahlen, f¨ur welches es ein minimal langes Wort w gibt mit ¬(̂δ(z, w ) ∈ E ⇐⇒ ̂δ(z ′, w ) ∈ E). ▶ Wenn w = ε, dann wird {z, z ′} vor der Schleife markiert. Widerspruch. ▶ Wenn w = aw ′ mit a ∈ Σ, dann gilt: Wenn {δ(z, a), δ(z ′, a)} vom Algorithmus markiert wird, dann auch {z, z ′}. Daher: {δ(z, a), δ(z ′, a)} wird nicht markiert. Aber dann gilt f¨ur w ′: ¬ (̂δ(δ(z, a), w ′) ∈ E ⇐⇒ ̂δ(δ(z ′, a), w ′) ∈ E), d.h. δ(z, a) ̸≡ δ(z ′, a), und |w ′| < |w |. Widerspruch zur Minimalit¨at von {z, z ′}. TCS | 14 Minimierung von DFAs | SoSe 2023 9/14 Laufzeit ▶ Darstellung der Tabelle T : zweidimensionales Array der Gr¨oße O(|Z| × |Z|) ▶ Erm¨oglicht konstanten Zugriff auf Markierungen ▶ Pro Durchlauf der Schleife: O(|Z|2 · |Σ|) ▶ Anzahl der Durchl¨aufe ist durch |Z|2 begrenzt, da es nur |Z|2 Paare gibt und mindestens 1 Paar pro Durchlauf markiert wird ▶ Restliche Schritte: Konstante Laufzeit ▶ Daher: Algorithmus 3 kann in Zeit O(|Z|4 · |Σ|) implementiert werden ▶ Tats¨achlich gibt es effizientere Implementierungen TCS | 14 Minimierung von DFAs | SoSe 2023 10/14 Algorithmus 4: Minimierung von DFAs Eingabe: DFA M = (Z, Σ, δ, z0, E) Ausgabe: Minimaler DFA M′ mit L(M) = L(M′) Beginn entferne Zust¨ande aus M, die nicht vom Startzustand aus erreichbar sind; berechne ¨aquivalente Zust¨ande mit Algorithmus 3; erzeuge den ¨Aquivalenzklassenautomat, indem die berechneten ¨aquivalenten Zust¨ande verschmolzen werden; Ende TCS | 14 Minimierung von DFAs | SoSe 2023 11/14 Beispiel zur Minimierung Sei Σ = {a, b, c} und der folgende DFA M gegeben: z0 z1 z2 z3 a b c a, b a, b a, b z4 z5 c c c a, b, c a, b, c z1 z2 z3 z4 z5 z0 z1 z2 z3 z4 ▶ alle Zust¨ande sind von z0 aus erreichbar ▶ ¨aquivalente Zust¨ande berechnen: Tabelle T erstellen ▶ Initiales Markieren: {z, z ′} mit z ∈ {z0, z1, z2, z3} und z ′ ∈ {z4, z5} ▶ {z0, z1}, da {δ(z0, c), δ(z1, c)} = {z3, z4} bereits markiert ist, ▶ {z0, z2}, da {δ(z0, c), δ(z2, c)} = {z3, z4} bereits markiert ist, und ▶ {z0, z3}, da {δ(z0, c), δ(z3, c)} = {z3, z5} bereits markiert TCS | 14 Minimierung von DFAs | SoSe 2023 12/14 Beispiel zur Minimierung Sei Σ = {a, b, c} und der folgende DFA M gegeben: z0 z1 z2 z3 a b c a, b a, b a, b z4 z5 c c c a, b, c a, b, c z1 z2 z3 z4 z5 z0 z1 z2 z3 z4 ▶ alle Zust¨ande sind von z0 aus erreichbar ▶ ¨aquivalente Zust¨ande berechnen: Tabelle T erstellen ▶ Initiales Markieren: {z, z ′} mit z ∈ {z0, z1, z2, z3} und z ′ ∈ {z4, z5} ▶ {z0, z1}, da {δ(z0, c), δ(z1, c)} = {z3, z4} bereits markiert ist, ▶ {z0, z2}, da {δ(z0, c), δ(z2, c)} = {z3, z4} bereits markiert ist, und ▶ {z0, z3}, da {δ(z0, c), δ(z3, c)} = {z3, z5} bereits markiert TCS | 14 Minimierung von DFAs | SoSe 2023 12/14 Beispiel zur Minimierung Sei Σ = {a, b, c} und der folgende DFA M gegeben: z0 z1 z2 z3 a b c a, b a, b a, b z4 z5 c c c a, b, c a, b, c z1 z2 z3 z4 z5 z0 z1 z2 z3 z4 X X X X X X X X ▶ alle Zust¨ande sind von z0 aus erreichbar ▶ ¨aquivalente Zust¨ande berechnen: Tabelle T erstellen ▶ Initiales Markieren: {z, z ′} mit z ∈ {z0, z1, z2, z3} und z ′ ∈ {z4, z5} ▶ {z0, z1}, da {δ(z0, c), δ(z1, c)} = {z3, z4} bereits markiert ist, ▶ {z0, z2}, da {δ(z0, c), δ(z2, c)} = {z3, z4} bereits markiert ist, und ▶ {z0, z3}, da {δ(z0, c), δ(z3, c)} = {z3, z5} bereits markiert TCS | 14 Minimierung von DFAs | SoSe 2023 12/14 Beispiel zur Minimierung Sei Σ = {a, b, c} und der folgende DFA M gegeben: z0 z1 z2 z3 a b c a, b a, b a, b z4 z5 c c c a, b, c a, b, c z1 z2 z3 z4 z5 z0 z1 z2 z3 z4 X X X X X X X X X X X ▶ alle Zust¨ande sind von z0 aus erreichbar ▶ ¨aquivalente Zust¨ande berechnen: Tabelle T erstellen ▶ Initiales Markieren: {z, z ′} mit z ∈ {z0, z1, z2, z3} und z ′ ∈ {z4, z5} ▶ {z0, z1}, da {δ(z0, c), δ(z1, c)} = {z3, z4} bereits markiert ist, ▶ {z0, z2}, da {δ(z0, c), δ(z2, c)} = {z3, z4} bereits markiert ist, und ▶ {z0, z3}, da {δ(z0, c), δ(z3, c)} = {z3, z5} bereits markiert TCS | 14 Minimierung von DFAs | SoSe 2023 12/14 Beispiel zur Minimierung (2) z1 z2 z3 z4 z5 z0 z1 z2 z3 z4 X X X X X X X X X X X Ergibt z1 ≡ z3, z1 ≡ z2, z2 ≡ z3, z4 ≡ z5 und daher die ¨Aquivalenzklassen [z0]≡ = {z0} [z1]≡ = {z1, z2, z3} [z4]≡ = {z4, z5} TCS | 14 Minimierung von DFAs | SoSe 2023 13/14 Beispiel zur Minimierung (2) [z0]≡ = {z0} [z1]≡ = {z1, z2, z3} [z4]≡ = {z4, z5} Der Minimalautomat zu z0 z1 z2 z3 a b c a, b a, b a, b z4 z5 c c c a, b, c a, b, c ist hiermit [z0] [z1] a, b, c a, b [z4] c a, b, c TCS | 14 Minimierung von DFAs | SoSe 2023 14/14","libVersion":"0.3.2","langs":""}