{"path":"DHBW Heidenheim/2025 WiSe/Datenbanken/Skript/Datenbanken (Englisch)/LESSON 08.pdf","text":"LESSON 8 Normalization Ihor Liutak Content 1. Understand the purpose of normalization. 2. Learn rules and processes for achieving 1NF, 2NF, and 3NF. 3. Practice identifying and fixing normalization issues. Datenbanken II 2 ObjectivesIntroduction to Normalization Datenbanken II 3 Definition Normalization is the process of structuring a relational database in accordance with a series of normal forms. Main Goals Reduce data redundancy Improve data integrity and consistency Why Normalize? Easier maintenance Clearer data relationships Efficient data updates Tables with repeating groups → Separated, smaller tables Reduced redundancy and fewer anomalies Additional Example for Introduction -- Common problem: Repeated customer info in multiple tables -- After normalization: Single customer table, references used elsewhere Characteristics of an Unnormalized Dataset Datenbanken II 4 What is an Unnormalized Dataset? Contains redundancy. May store multiple values in a single column. Difficult to query and maintain. Issues: Multiple products stored in a single column. Difficult to search or aggregate specific product data. First Normal Form (1NF) Datenbanken II 5 Rule Each column holds atomic (indivisible) values. No repeating groups or arrays. Key Criteria No multi-valued attributes Each column contains a single value Second Normal Form (2NF) Datenbanken II 6 Rule Table must be in 1NF. Full functional dependency on the entire primary key (no partial dependency). When It Matters Typically applies when you have a composite primary key. student_name & course_title may cause partial dependencies. Third Normal Form (3NF) Datenbanken II 7 Rule Table must be in 2NF. No transitive dependencies (non-key columns depending on other non-key columns). Key Example student_id → department_id → department_name In 3NF, separate department details into another table. This separation removes the transitive dependency on department_name SQL procedure to achieve 1NF Datenbanken II 8 SQL procedure that splits the supplier_info column in the goods table into two separate columns, supplier_name and supplier_address, to achieve 1NF Explanation Adding Columns: The procedure first adds two new columns, supplier_name and supplier_address, after the price column. Updating Columns: It then splits the supplier_info using SUBSTRING_INDEX(), which extracts text before and after the delimiter (' - '). Removing supplier_info: Finally, it drops the old supplier_info column. Using VSCode Plugin for MySQL Shell Datenbanken II 9 Open VSCode and connect to your MySQL server using the MySQL plugin. Make sure you are connected to the correct database. Paste the entire SQL procedure into the query editor. Run the query to create the procedure. Then execute: CALL SplitSupplierInfo(); SQL procedure to achieve 2NF - 1 Datenbanken II 10 heidenheim.site/2nf.sql SQL procedure to achieve 2NF - 2 Datenbanken II 11 SQL procedure to achieve 2NF - Explanation Datenbanken II 12 Create categories Table: The procedure creates a new table, categories, which contains an id (primary key) and name (unique category name). Insert Distinct Categories : Insert all distinct category names from the goods table into the categories table to establish a unique list of categories. Add category_id Column : Add a new column category_id to the goods table to link goods with categories. Update Goods Table : Populate the category_id field in goods based on the categories table by matching the category names. Remove Old category Column : Drop the original category column from the goods table as it's now replaced by category_id. Add Foreign Key Constraint : Add a foreign key to link category_id in the goods table to the id in the categories table. SQL procedure to achieve 3NF Datenbanken II 13","libVersion":"0.3.2","langs":""}