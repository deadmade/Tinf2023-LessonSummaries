{"path":"DHBW Heidenheim/2024 SoSe/Theoretische Informatik/UnterrichtsMaterial/1. Einfuehrung Script.pdf","text":"Studiengang Informatik Theoretische Informatik II… Besonderer Dank für bereitgestellte Inhalte gilt: Prof. Dr. Andreas Mahr, Studiengang Informatik, DHBW Heidenheim, für die Bereitstellung seines Scripts Jay Wengrow für die Betaversionen seines Buches „Data structures and algorithms“ 21.07.2024 3 Alle Codebeispiele wurden bewusst nicht in Pseudocode angegeben, sondern in der Sprache C, die Sie schon beherrschen. Lassen Sie die Beispiele laufen, spielen und experimentieren Sie damit – und sehen Sie mir Fehler nach! S. Berninger DHBW Heidenheim Studiengang Informatik Algorithmen und Datenstrukturen – wozu? 521.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Algorithmen und Datenstrukturen – wozu? 621.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Algorithmen und Datenstrukturen Ziel: Optimale algorithmische Problemlösung 7 Optimale Datenstruktur zur Verwaltung/ Organisation der Eingangsdaten Optimaler Algorithmus auf Basis der Datenstruktur Listen, Stacks, Queues, Bäume, Graphen Einfügen, Löschen, Sortieren, Suchen, … mit Divide&Conquer, Greedy-Algor., Rekursionen… By the way: Was ist „optimal“? -> Einflußgrößen: Laufzeit, Komplexität, Speicherbedarf… 21.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Algorithmen und Datenstrukturen 8 Diese beiden Funktionen geben jede alle geraden Zahlen zwischen 2 und 100 aus: Läuft eine der Funktionen schneller, und warum? A: Version 1 und 2 brauchen je 100 Schritte B: Version 2 braucht halb so viele Schritte wie Version 1 C: Version 2 braucht doppelt so viele Schritte wie Version 1 21.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Lösung 9 Diese beiden Funktionen geben jede alle geraden Zahlen zwischen 2 und 100 aus: Läuft eine der Funktionen schneller, und warum? A: Version 1 und 2 brauchen je 100 Schritte B: Version 2 braucht halb so viele Schritte wie Version 1 C: Version 2 braucht doppelt so viele Schritte wie Version 1 ✓ 21.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Stoffgliederung Rolle der Datenstrukturen Rolle der Algorithmen Vorträge Komplexität von Algorithmen: Big-O Schnelleren Code mit Big-O: Bubble sort Codeoptimierung mit Big-O: Selection sort Optimierungen für optimistische Szenarios: Insertion sort Schneller Lookup: Hash tables Hashes in der Codierung Stacks und Queues für temporäre Daten Rekursionen Rekursiven Code schreiben lernen 11 Dynamisches Programmieren Rekursion für mehr Geschwindigkeit: Quicksort Knotenbasierte Datenstrukturen Bäume Binäre Suchbäume Prioritätenmanagement mit Heaps AutoComplete mit Präfixbäumen Graphen für soziale Netzwerke Gewichtete Graphen für Kürzeste Wege (Dijkstra) Gewichtete Graphen für Komprimierung (Huffman) Minimale Spannbäume (Kruskal, Prim) Umgang mit Speicherlimitationen: MergeSort CountingSort Verwaltung großer, externer Datenmengen B-Bäume, B*-Bäume Woche 1 Woche 2 Woche 3 Woche 4 Woche 6 Woche 7 Woche 8 Woche 9 Woche 10 Woche 11 21.07.2024 S. Berninger DHBW Heidenheim Woche 5 Studiengang Informatik Literatur Sedgewick, Robert: Algorithmen, Pearson Verlag 2014 (diverse Auflagen in Pseudocode, C, C++, Java) Th. H. Cormen, Ch. E. Leiserson, R. Rivest, C. Stein: Algorithmen – Eine Einführung, 2. Auflage, Oldenbourg Verlag, 2007. Uwe Schöning, Algorithmik, Spektrum Akademischer Verlag, 2001. J. Hromkovič, Algorithmics for Hard Problems, 2nd Edition, Springer, 2003. S. Dasgupta, C. Papadimitriou, U. Vazirani, „Algorithms“, McGraw-Hill, 2007. V. Heun, „Grundlegende Algorithmen“, 2. Auflage, Vieweg, 2003. J. Kleinberg, E. Tardos, „Algorithm Design“, Pearson Education, 2005. 12 – wenn Sie nur 1 Buch kaufen, dann das – für Ihre Lieblings-Programmiersprache! 21.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Die Rolle der Datenstrukturen… • Effizienterer, schnellerer Code: 13 • Eleganter Code: • Algorithmen über verschiedenen Datenstrukturen vergleichen: 21.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Die Rolle der Datenstrukturen … 14 Die Organisation von Daten ist kein Selbstzweck, sondern bestimmt signifikant, wie schnell Ihr Code läuft. Zahlen, Zeichen Daten Daten- strukturen Datenstrukturen legen fest, wie Daten organisiert sind. angefangen von den elementaren Zahlen und Zeichen Daten meinen alle Arten von Information, 21.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Die Rolle der Datenstrukturen … Das Array… 15 Das Array ist eine der ganz elementaren Datenstrukturen 21.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Basis-Datenstrukturen: Array • Das Array ist die grundlegende Datenstruktur in der Informatik: n gleiche Datenelemente, dicht aneinander im Speicher angeordnet • Der Index eines Arrays ist die Zahl, die identifiziert, wo innerhalb des Arrays ein Datenelement liegt 16 char *array []= {“Aepfel\", “Bananen\", “Chicorrè\", “Datteln\", “Erdbeeren“}; (Zeile) (Spalte) 21.07.2024 S. Berninger DHBW Heidenheim „Aepfel“ „Bananen“ „Chicorrè“ „Datteln“ „Erdbeeren“ Index 0 Index 1 Index 2 Index 3 Index 4 Studiengang Informatik Basis-Datenstrukturen: Array Nutzung von Datenstrukturen durch 4 Basis-Zugriffsarten/ -Operationen: • Direktzugriff Lesen/ Ändern: Zugriff auf Daten an einer bestimmten Stelle innerhalb der Datenstruktur. 17 • Löschen: Löschen meint das Entfernen eines Wertes aus unserer Datenstruktur. • Einfügen: Einfügen bedeutet, einen weiteren Wert zu unserer Datenstruktur hinzuzufügen. • Suchen: Suche bedeutet das Auffinden eines bestimmten Wertes in einer Datenstruktur. Datteln? ? ? ? ! 21.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Geschwindigkeit dieser Operation auf einem Array 18 Absolute Zeiten sind abhängig vom Rechnertyp, Umgebung, Ressorcen,… -> Vergleichswert für Performance: Notwendige Schritte! Wenn Operation A 5 Schritte benötigt, und Operation B 500 Schritte, können wir davon ausgehen, dass Operation A auf der gleichen Hardware immer schneller laufen wird als Operation B – unabhängig von der Basishardware! Synonyme Begriffe: Geschwindigkeit, (Zeit-) Komplexität, Effizienz, und Performance – gemessen in Schritten. 21.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Geschwindigkeit von Operationen auf einem Array 1) Direktzugriff: Genau 1 Schritt (max. die Addition des Index auf die Adresse), da Direktzugriff über die Adresse/ Index (feste Relation zwischen erster Speicheradresse und erstem Index während der gesamten Laufzeit!). &array[0] == array ! 19 0x1010 0x1014 0x1018 0x101C 0 x1020 21.07.2024 S. Berninger DHBW Heidenheim „Aepfel“ „Bananen“ „Chicorrè“ „Datteln“ „Erdbeeren“ Studiengang Informatik Geschwindigkeit von Operationen auf einem Array 2) Suche nach Datenwert: Invers zum Direktzugriff: Nicht Direktzugriff auf Wert eines Index/Adresse, sondern sequentielle (lineare) Suche nach dem Wert und Ermittlung dessen Index/ Adresse! Arraylänge: n -> maximale Schritte: n (n Vergleiche im worst case, wenn gesuchter Wert nicht vorhanden ist) 20 Suche nach Datteln: 4 Vergleiche, Index: 4 - 1 21.07.2024 S. Berninger DHBW Heidenheim „Aepfel“ „Bananen“ „Chicorrè“ „Datteln“ „Erdbeeren“ Studiengang Informatik Geschwindigkeit von Operationen auf einem Array 3) Einfügen eines Datenwerts in ein Array: Am Ende einfügen (nach letztem Element): 1 Schritt (Programmiersprachen reallokieren Speicher unterschiedlich) Am Anfang oder in der Mitte einfügen: Daten müssen verschoben/ kopiert werden Feigen sollen an den Index 2 eingefügt werden: 21 nächste freie Speicherstelle 21.07.2024 S. Berninger DHBW Heidenheim „Aepfel“ „Bananen“ „Chicorrè“ „Datteln“ „Erdbeeren“ „Birnen“ Studiengang Informatik Geschwindigkeit von Operationen auf einem Array 22 Schritt 1: Worst case: Einfügen am Beginn, Arraylänge: n -> maximale Schritte: n + 1 (n x Schieben + Schreiben) Schritt 4: Schritt 2: Schritt 3: 21.07.2024 S. Berninger DHBW Heidenheim „Aepfel“ „Bananen“ „Chicorrè“ „Datteln“ „Erdbeeren“ „Aepfel“ „Bananen“ „Chicorrè“ „Datteln“ „Erdbeeren“ „Aepfel“ „Bananen“ „Chicorrè“ „Datteln“ „Erdbeeren“ „Aepfel“ „Bananen“ „Birnen“ „Chicorrè“ „Datteln“ „Erdbeeren“ „Birnen“ „Birnen“ „Birnen“ Studiengang Informatik Löschen eines Elements 4) Invers zum Einfügen: Löschen des Chicorrès 23 Schritt 1: Worst case: Löschen am Beginn, Arraylänge: n -> maximale Schritte: n (1 x Löschen + n-1 x Schieben) Schritt 2: Schritt 3: 21.07.2024 S. Berninger DHBW Heidenheim „Aepfel“ „Bananen“ „Datteln“ „Erdbeeren“ „Aepfel“ „Bananen“ „Datteln“ „Erdbeeren“ „Aepfel“ „Bananen“ „Datteln“ „Erdbeeren“ Studiengang Informatik Komplexität von Operationen Wir bestimmen die Effizienz/ Komplexität von Operationen immer in Abhängigkeit von der Größe der Datenmenge! 2421.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Besondere Arrays: Sets Sets sind Arrays, die keine doppelten Datenwerte erlauben (Bsp: Lookup-Tabellen wie Telefonbücher…) Sie haben nur diese einzige zusätzliche Einschränkung zu den Arrays! 25 Zugriff/ Lesen: Komplexität (Schritte) wie bei Arrays Suchen: Komplexität (Schritte) wie bei Arrays Löschen: Komplexität (Schritte) wie bei Arrays Einfügen/ Schreiben: ? 21.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Sets: Einfügen und Ändern Zur Vermeidung von doppelten Einträgen: vor jedem Schreib- und Einfügevorgang zunächst Suche, ob der Wert bereits vorhanden ist! Für Einfügen am Anfang (Array: n+1) zusätzlich: worst case: n Schritte (Vergleiche) Für Schreiben an Index (Array: 1) zusätzlich: worst case: n Schritte (Vergleiche) 26 Summe bei Set: Einfügen: worst case: 2n + 1 Schritte Schreiben: worst case: n + 1 Schritte 21.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Zusammenfassung Datenstrukturen Die Komplexität von Operationen auf Datenstrukturen bestimmen heißt: Bestimmen, wie viele Schritte auf dieser Datenstruktur diese Operation in Abhängigkeit von der Anzahl der Elemente der Datenstruktur benötigt. 27 -> die richtige Datenstruktur für notwendige Operationen wählen! (Es gibt wesentlich mehr Datenstrukturen als Arrays und Sets…) -> nächstes Kapitel: Performance verschiedener Algorithmen auf einer Datenstruktur vergleichen 21.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Die Rolle der Algorithmen… Die richtig gewählte Datenstruktur kann die Performance Ihres Codes signifikant beeinflussen, aber: 28 • Selbst wenn wir uns für die richtige Datenstruktur entschieden haben, beeinflusst ein anderer wichtiger Faktor die Effizienz des Codes: die adäquate Auswahl des Algorithmus. • Ein Algorithmus ist “… eine wiederholbare Handlungsanweisung für einen Computer auf einer Menge von Eingangsdaten“. • Ein Algorithmus löst ein definiertes Problem, das Ergebnis muss spezifierten Kriterien genügen • Meist kann das Problem durch mehrere verschiedene Algorithmen gelöst werden • Auf einer Datenstruktur kann ein Algorithmus schneller/ effizienter sein als ein anderer Algorithmus 21.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Neue Datenstruktur: Das sortierte Array Einziger Unterschied des sortierten Arrays zum Array: Werte müssen stets (nach jeder Operation wieder) einer vorgegebenen Sortierung genügen Beispiel: Array [3, 17, 80, 202] 2921.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Das sortierte Array: Einfügen 30 Vergleich: 3<75: Sortiertes Array, Einfügen (Worst case): n Elemente, m= Index des größeren Elements Vergleiche (m+1) + Verschieben (n-m) + Schreiben (1) = n + 2 Vergleich: 17<75: Vergleich: 80 > 75: Wert nach rechts: Wert nach rechts: Wert schreiben: (unsortiertes Array: n+1) 21.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Das sortierte Array: Lineare Suche 31 Beispiel: Array [3, 17, 75, 80, 202], suchen nach “22” – kann im sortierten Array bei “75” abgebrochen werden! // found! // found larger element – not contained  Aber: Kein Unterschied zur Suche im unsortierten Array beim Worst case (alle Elemente < gesuchtes) ! 21.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Das sortierte Array: Binäre Suche 32 Es gibt andere Suchalgorithmen über sortierten Arrays! Beispiel: Binäre Suche („Ich denke mir eine Zahl zwischen 1…100, Du rätst, und ich sage Dir, ob höher oder niedriger…“ – Du wirst in der Mitte starten zu raten… ) 21.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Das sortierte Array: Binäre Suche 33 Binäre Suche nach „7“ in einem sortierten Array der Länge n=9: Index m=4? 9 > 7! Index m=3? Index m=1? Index m=2? 4 < 7! 6 < 7! Gotcha! 21.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Das sortierte Array: Binäre Suche Implementierung: // unterer Index // initialer oberer Index // noch nicht gefunden und Indizes nicht gekreuzt // Index des neuen Kandidats // getroffen? // oberen Index absenken // unteren Index anheben 3421.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Das sortierte Array: Binäre vs. Lineare Suche Gegeben: Sortiertes Array der Länge n=100 Lineare Suche (Worst case): 100 Vergleiche (=n) Anzahl der Elemente Anzahl der Schritte (Vergleiche) Binäre Suche (Worst case): 7 Vergleiche (=log2 n: Die Verdopplung der Länge erhöht die Zahl der Schritte um 1) („Errate eine Zahl…“) Ein Schritt mehr bei jeder Verdopplung der Länge (x*2 -> y+1) 3521.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Das sortierte Array: Binäre vs. Lineare Suche Sortierte Arrays: • Einfügen ist langsamer als bei unsortierten Arrays • Lineare Suche ist genauso schnell wie bei unsortierten Arrays • Aber: Binäre Suche ist wesentlich schneller als bei unsortierten Arrays! Vor der Auswahl der Datenstruktur (unsortiertes/ sortiertes Array) und des Algorithmus (Lineare/ Binäre Suche) ist also zu klären: Muss die Applikation häufig Elemente einfügen? Ist die Suche ein häufig benutztes Feature? Unsort. Array Sortiert. Array Lineare Suche n Schritte n Schritte Binäre Suche _ log n Schritte Einfügen n+1 Schritte n+2 Schritte Daten- struktur Algo- rithmus 3621.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Zusammenfassung Algorithmen • Es gibt nie nur die eine perfekte Datenstruktur und den einen perfekten Algorithmus für ein Problem. • Die Analyse konkurrierender Algorithmen beruht auf dem Zählen ihrer Schritte. • Gesucht ist: Eine allgemeine Sprache für einen formalen Weg, die Zeitkomplexität konkurrierender Datenstrukturen und Algorithmen auszudrücken und zu vergleichen 3721.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Übung 1) Wir sagten, dass die Binäre Suche für ein sortiertes Array mit 100 Elementen 7 Schritte braucht. Wieviele Schritte braucht die Binäre Suche für ein sortiertes Array mit 200 Elementen? A: 7 B: 8 C: 14 D: 107 E: 200 3821.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Übung A: am 2. Tag B: am 32. Tag C: am 50. Tag D: am 64. Tag E: am 99. Tag 2) Auf einem Teich wächst eine Seerose. Mit jedem Tag verdoppelt sich die Anzahl der Seerosen. Am 100. Tag ist der Teich völlig damit bedeckt. Frage: „Am wievielten Tag ist der Teich zur Hälfte mit Rosen bedeckt“? 4021.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Übung 1.1. – Frage 1 1. Berechnen Sie die Anzahl von Schritten, die die folgenden Operationen benötigen, für ein unsortiertes Array von 100 Elementen: • Lesezugriff 42 A: 1 B: 100 C: 101 D: 200 E: 201 21.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Übung 1.1. – Frage 2 2. Berechnen Sie die Anzahl von Schritten, die die folgenden Operationen benötigen, für ein unsortiertes Array von 100 Elementen: • Lineares Suchen nach einem Wert, der nicht Bestandteil des Arrays ist 44 A: 1 B: 100 C: 101 D: 200 E: 201 21.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Übung 1.1. – Frage 3 3. Berechnen Sie die Anzahl von Schritten, die die folgenden Operationen benötigen, für ein unsortiertes Array von 100 Elementen: • Einfügen am Beginn des Arrays 46 A: 1 B: 100 C: 101 D: 200 E: 201 21.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Übung 1.1. – Frage 4 4. Berechnen Sie die Anzahl von Schritten, die die folgenden Operationen benötigen, für ein unsortiertes Array von 100 Elementen: • Einfügen am Ende des Arrays 48 A: 1 B: 100 C: 101 D: 200 E: 201 21.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Übung 1.1. – Frage 5 5. Berechnen Sie die Anzahl von Schritten, die die folgenden Operationen benötigen, für ein unsortiertes Array von 100 Elementen: • Löschen am Beginn des Arrays 50 A: 1 B: 100 C: 101 D: 200 E: 201 21.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Übung 1.1. – Frage 6 6. Berechnen Sie die Anzahl von Schritten, die die folgenden Operationen benötigen, für ein unsortiertes Array von 100 Elementen: • Löschen am Ende des Arrays 52 A: 1 B: 100 C: 101 D: 200 E: 201 21.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Übung 1.1. –Frage 2.1 1. Berechnen Sie die Anzahl von Schritten, die für die folgenden Operationen für ein Array-basiertes Set von 100 Elementen nötig sind: • Lesezugriff 54 A: 1 B: 100 C: 101 D: 200 E: 201 21.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Übung 1.1. –Frage 2.2 2. Berechnen Sie die Anzahl von Schritten, die für die folgenden Operationen für ein Array-basiertes Set von 100 Elementen nötig sind: Suchen nach einem Wert, der nicht Bestandteil des Sets ist 56 A: 1 B: 100 C: 101 D: 200 E: 201 21.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Übung 1.1. – Frage 2.3 3. Berechnen Sie die Anzahl von Schritten, die für die folgenden Operationen für ein Array-basiertes Set von 100 Elementen nötig sind: • Einfügen am Beginn des Sets (der Wert ist noch nicht Bestandteil des Sets). 58 A: 1 B: 100 C: 101 D: 200 E: 201 21.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Übung 1.1. – Frage 2.4 4. Berechnen Sie die Anzahl von Schritten, die für die folgenden Operationen für ein Array-basiertes Set von 100 Elementen nötig sind: • Einfügen am Ende des Sets (der Wert ist noch nicht Bestandteil des Sets). 60 A: 1 B: 100 C: 101 D: 200 E: 201 21.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Übung 1.1. – Frage 2.5 5. Berechnen Sie die Anzahl von Schritten, die für die folgenden Operationen für ein Array-basiertes Set von 100 Elementen nötig sind: • Löschen am Beginn des Sets 62 A: 1 B: 100 C: 101 D: 200 E: 201 21.07.2024 S. Berninger DHBW Heidenheim Studiengang Informatik Übung 1.1. – Frage 2.6 6. Berechnen Sie die Anzahl von Schritten, die für die folgenden Operationen für ein Array-basiertes Set von 100 Elementen nötig sind: • Löschen am Ende des Sets 64 A: 1 B: 100 C: 101 D: 200 E: 201 21.07.2024 S. Berninger DHBW Heidenheim","libVersion":"0.3.2","langs":""}