{"path":"DHBW Heidenheim/2024 SoSe/Projektmanagement/UnterrichtsMaterial/3. Agiles PM Script (# Name clash 2024-08-03 trdn60C #).pdf","text":"Studiengang Informatik Projektmanagement Agiles PM Sabine Berninger DHBW Heidenheim 1Studiengang Informatik Agenda Agiles PM Vorgehensmodelle (zur Erinnerung) • Sequentielle vs. inkrementelle Modelle • Umgang mit Komplexität Scrum als Beispiel eines agilen Vorgehensmodell • Rollen, Prozesse, Artefakte • Best practices in den Sprintphasen Erfahrungen und Überlegungen zur Einführung von Scrum • Unternehmenskultur und Erfahrungen Sabine Berninger DHBW Heidenheim 5Studiengang Informatik Einordnung von agilem PM in die allgemeinen Projektphasen Sabine Berninger DHBW Heidenheim 6 Im Folgenden sprechen wir über das Vorgehen innerhalb der Planungs-, Durchführung & Controlling-Phase. Studiengang Informatik Planungs“kreis“lauf bei konstruktivistischen Vorgehensmodellen Sabine Berninger DHBW Heidenheim 7 • Bei einem konstruktivistischen Vorgehensansatz laufen die Phasen linear ab. • Vor Beginn jeder Phase muss die vorangegangene Phase abgeschlossen sein • der Auftragnehmer wird meistens nur das realisieren, was der Auftraggeber explizit am Beginn verlangt hat. • der „Plan“ als Artefakt wird in den Mittelpunkt gestellt, statt dem Prozess von Retrospektive und Change (Jenny, 2014) Studiengang Informatik V-Modell der deutschen Sicherheitsindustrie (Aviation, Automotive,…) Sabine Berninger DHBW Heidenheim 8 Zeit Studiengang Informatik Wasserfallentwicklung 9 Frühes Commitment für späte Enttäuschung Zeit Sabine Berninger DHBW Heidenheim Studiengang Informatik Planungskreislauf bei evolutionären/ inkrementellen Vorgehensmodellen Sabine Berninger DHBW Heidenheim 10 • Vorgehen bedingt keinen sequenziellen Projektablauf mehr, sondern erlaubt ein wiederholtes Zurückgreifen auf vorherige Ergebnisse und Tätigkeiten früherer Phasen • Auf Veränderungen von Zielen, Rahmenbedingungen und der Umgebung kann rasch reagiert werden • Sukzessive Bereitstellung funktionstüchtiger Teilprodukte • Vorgehensmodell bedingt sehr sorgfältige Überlegungen und stellt wesentlich höhere Anforderungen an die Planung als ein konstruktivistisches Vorgehensmodell (Wieczorrek und Mertens, 2011)Agile Entwicklungsvorgehen wie Scrum basieren auf diesem Ansatz! Studiengang Informatik 2 x 3 Dinge aus der Praxis… Sabine Berninger DHBW Heidenheim 11 3 Dinge, von denen wir wünschen, sie wären wahr… • Der Kunde weiß, was er will • Die Realisierer wissen, wie es zu erstellen ist • Nichts ändert sich im Projektverlauf 3 Dinge, mit denen wir leben müssen… • Der Kunde entdeckt erst spät, was er will • Die Realisierer entdecken erst, wie es am Besten zu erstellen ist • Vieles ändert sich im Projektverlauf (Komus, 2016) Studiengang Informatik Weshalb agile Methoden? Herausforderungen von Komplexität und Unsicherheit Sabine Berninger DHBW Heidenheim 12 Management in der stabilen Welt (klassische Sicht, „Illusion of Control“) • Dinge sind kompliziert, aber berechenbar • Langfristige Planung ist im Detail möglich und sinnvoll • Kennzahlen, Command and Control, Management im Detail (Micromanagement) ist legitim – dazu gehört auch das Micromanagement von Entwicklungsteams Management in der VUCA-Welt (Bennett und Lemoine, 2014) • Langfristige Detailplanung nicht sinnvoll/möglich • Eigenverantwortung notwendig (Schwarmintelligenz) • Lernen und Experimentieren sind der Schlüssel Studiengang Informatik Framework für Analyse: Komplexität des Projektkontextes Simpel • Bekannt, beherrschbar ➢ Machen! Kompliziert • Nicht einfach, aber Ursache-Wirkung berechenbar • Planbar im Detail ➢ Lineares Vorgehen mögl. / agile Elemente Komplex • Ursache Wirkung nicht mehr sicher nachvollziehbar • agiles Vorgehen sinnvoll/notwendig ➢ „Inspect and Adapt“ Chaotisch • Systemverhalten unbekannt, nicht steuerbar • Vermeiden… Sabine Berninger DHBW Heidenheim 13 Modifizierte „Stacey“-Matrix nach (Stacey, 1996) Wissen wir, was wir wollen? Wissen wir, wie wir es realisieren? „VUCA“ Studiengang Informatik Nützliche Strategien im Umgang mit Komplexität Unterscheidungen treffen zwischen kompliziert, komplex und chaotisch • Vorgehen darauf abstimmen, eigene Muster erkennen Gewisse Flexibilität der Ziele und Vorgehen Ausprobieren in kleinen Schritten, Ergebnisse prüfen, justieren Fehlertoleranz, Fehlerkultur aufbauen • Bei Fehler keine Suche nach Schuldigen, sondern nach Lösungen Selbstorganisation („Subsidiarität“) • Da Top-Down-Steuerung nicht möglich/sinnvoll, Aufbau selbstregelnder Systeme, idealerweise mit einfachen Regeln • Bsp. Kreisverkehr: „Wer drin ist hat Vorfahrt“ ➔ Verkehr regelt sich selbst • Mitdenken und Kreativität fördern statt Ausführung nach Vorschrift Sabine Berninger DHBW Heidenheim 14 \"Totò disse che in tempo di crisi gli intelligenti cercano soluzioni mentre gli imbecilli cercano colpevoli.« «Totò sagte, dass in Krisenzeiten kluge Menschen nach Lösungen suchen, während Dummköpfe nach Schuldigen suchen... « Totò - bekannter italienischer Schauspieler Studiengang Informatik 2001: Xtreme Programming und Agiles Manifest • Agiles Ziel: Stop Starting - Start Finishing! Frühes Ändern statt spätem Scheitern (agil = wendig, anpassungsfähig) • Kunde hochfrequent involvieren, nach/ vor jedem Sprint • Fokus auf lieferbaren Features Sabine Berninger DHBW Heidenheim 15Studiengang Informatik Werte des Agilen Manifests Sabine Berninger DHBW Heidenheim 16Studiengang Informatik Prinzipien hinter dem agilen Manifest Sabine Berninger DHBW Heidenheim 17 • Höchste Priorität ist es, den Kunden durch frühe und kontinuierliche Auslieferung wertvoller Software zufrieden zu stellen. • Heiße selbst späte Anforderungsänderungen in der Entwicklung willkommen. • Agile Prozesse nutzen Veränderungen zum Wettbewerbsvorteil des Kunden. • Liefere funktionierende Software regelmäßig innerhalb weniger Wochen oder Monate und bevorzuge dabei die kürzere Zeitspanne. • Fachexperten und Entwickler müssen während des Projektes täglich zusammenarbeiten. • Errichte Projekte rund um motivierte Individuen. Gib ihnen das Umfeld und die Unterstützung, die sie benötigen und vertraue darauf, dass sie die Aufgabe erledigen. • Die effizienteste und effektivste Methode, Informationen an und innerhalb eines Entwicklungsteam zu übermitteln, ist im Gespräch von Angesicht zu Angesicht. Studiengang Informatik Verbreiteter Irrtum: „Twice the work in half the time“ Sabine Berninger DHBW Heidenheim 18 „Agiler“ heisst nicht: „Schneller“! • Schlägt der Hase Haken, um schneller ans Ziel zu kommen??? • Frühe Variante agilen Vorgehens: die „Sowosamma-Neger“ (Fredl Fesl, 1985!): Der bayerische Barde Fredl Fesl erzählte die Geschichte eines dunkelhäutigen afrikanischen Volkes, die in der Savanne lebten. „...Ihr Problem war, dass das Savannengras so hoch war - oder sie zu klein ... jedenfalls mussten sie, wenn sie Ausschau halten wollten, immer in die Höhe springen und dabei riefen sie „So. Wo samma?“ Und so kam das Volk zum Namen der „Sowosamma-Neger“ ...“ (1985 war dieser politisch unkorrekte Begriff in der BRD noch gebräuchlich und gestattet) Studiengang Informatik Agile Planung Sabine Berninger DHBW Heidenheim 19Studiengang Informatik Gegenüberstellung Agiles Vorgehen – Wasserfallmodell Sabine Berninger DHBW Heidenheim 20 (Wieczorrek und Mertens, 2011) Legende: iteratives Vorgehen (normal) Wasserfallmodell (fett) Zeit Studiengang Informatik Gründe für die Verwendung agiler Methoden Sabine Berninger DHBW Heidenheim 21 (Komus, 2017) Studiengang Informatik Zusammengefasst: Agile Prinzipien Sabine Berninger DHBW Heidenheim 22 Ermächtigung und Selbstorganisation • Teams sind eigenverantwortlich und selbstorganisiert. Frühe, regelmäßige Lieferung • Frühe Lieferung von Inkrementen ermöglicht das frühe Einholen von Feedback. Überprüfung und Anpassung (plan - do – act –change) • Durch die Teams werden in Reviews regelmäßig die Ergebnisse und Vorgehens- weisen reflektiert, um sie effizienter zu gestalten Transparenz • (Persönlicher) Austausch von Informationen im Team und nach außen Festlegen von überschaubaren Inkrementen • Definierter Anfang und Ende fördert Disziplin, Fokus und pünktliche Lieferung Studiengang Informatik Scrum als Beispiel eines agilen Vorgehensmodells Sabine Berninger DHBW Heidenheim 23Studiengang Informatik Agile Vorgehensmodelle • Scrum • Kanban („IT-Kanban“. Eigene Methodik neben dem klassischen Kanban in der Logistik) • Extreme Programming • Feature Driven Development (FDD) • Lean • Design Thinking • Adaptive Software Development • Agile Modelling • Usability Driven Development • Dynamic System Development Method • Rational Unified Process (RUP) • Crystal • ... Sabine Berninger DHBW Heidenheim 24Studiengang Informatik Scrum - Gedränge Sabine Berninger DHBW Heidenheim 25Studiengang Informatik SCRUM – Eigenschaften und Prinzipien Sabine Berninger DHBW Heidenheim 26 • Scrum (englisch für „Gedränge“) ist ein Vorgehensmodell der Softwareentwicklung • Ansatz von Scrum: empirisch, inkrementell und iterativ (die meisten modernen Entwicklungsprojekte sind zu komplex, um durchgängig planbar zu sein) • Scrum versucht, die Komplexität durch drei Prinzipien zu reduzieren: • Transparenz: Der Fortschritt und die Hindernisse eines Projektes werden täglich und für alle sichtbar festgehalten. • Überprüfung: In regelmäßigen Abständen werden Produktfunktionalitäten geliefert und beurteilt. • Anpassung: Die Anforderungen an das Produkt werden nicht ein und für alle Mal festgelegt, sondern nach jeder Lieferung neu bewertet und bei Bedarf angepasst. • ABER: Während eines Sprints werden die Anforderungen „eingefroren“ - damit ist eine „Wasserfallartige“ Entwicklung im Sprint möglich Studiengang Informatik SCRUM – Ziel Sabine Berninger DHBW Heidenheim 27 Ziel ist die inkrementelle und qualitativ hochwertige Bereitstellung eines Produktes auf dem Weg zu einer zu Beginn formulierten Vision • Die Umsetzung der Vision in das fertige Produkt erfolgt nicht durch die Aufstellung möglichst detaillierter Anforderungslisten ( Lastenheft / Pflichtenheft), die dann phasenweise umgesetzt werden. • Statt dessen werden klare Funktionalitäten aus Anwendersicht formuliert, die dann in zwei bis vier Wochen langen, sich wiederholenden Intervallen, sogenannten Sprints, iterativ und inkrementell umgesetzt werden Studiengang Informatik SCRUM – schrittweise Entwicklung in Sprints Die Anforderungen aus Anwender-Sicht werden meist als User Stories bezeichnet. • Am Ende eines jeden Sprints steht bei Scrum die Lieferung einer fertigen (Software)-Funktionalität (das Produkt-Inkrement). • Die neu entwickelte Funktionalität sollte in einem Zustand sein, dass sie an den Kunden ausgeliefert werden kann (potentially shipable code oder usable software). Aufgrund seiner engen Einbeziehung in das Projekt kann der Kunde unmittelbar Feedback geben. So wird genau das entwickelt, was er wirklich benötigt. • In jedem Zyklus werden die am höchsten priorisierten Anforderungen umgesetzt und damit die jeweils höchste Wertschöpfung für den Kunden erzielt. • Auf Änderungswünsche kann flexibel und kurzfristig reagiert werden. Sabine Berninger DHBW Heidenheim 28Studiengang Informatik SCRUM - Framework im Überblick Sabine Berninger DHBW Heidenheim 29 scrum-methodology Das Product Backlog enthält zu jedem Zeitpunkt alle bekannten und gültigen Anforderungen an das Endprodukt. Diejenigen Projektaufgaben, die im jeweiligen Sprint erledigt werden sollen Quelle: www.agilebuddha.com Studiengang Informatik Scrum-Phasen Sabine Berninger DHBW Heidenheim 30 PO, CCB Studiengang Informatik SCRUM – Framework: Elemente im Überblick Sabine Berninger DHBW Heidenheim 32 ◼ Organisation/Prozess/ Best practices ◼ Sprint Planung mit Slicing und Planning Poker ◼ Daily Scrum ◼ Sprint Review ◼ Sprint Retrospective ◼ Tools + Repositories („Artefakte“) ◼ Product Backlog ◼ Kundenwünsche ◼ Backlog der Field issues und technischen Schulden ◼ Tech Request (technisch notwendige Änderungen) ◼ Sprint Backlog ◼ Inkrement ◼ Definition of Ready/ Done ◼ Rollen (der Personen) ◼ Kunde/Auftraggeber ◼ Product Owner ◼ Scrum Master ◼ Entwicklungsteams + CoCs ◼ CCB Studiengang Informatik SCRUM – Bugbewertung, Einordnung • Customer impact: 1= no impact 2 = minor impact: usability issues, komplizierte Bedienung, Typos, temporäre Performanceschwächen,… 3= medium impact: Fehlverhalten/ Unbenutzbarkeit neuer Features, schlechte Bedienbarkeit 4: major impact: System crash, kurze (<1 min.) Nichtverfügbarkeit, Anmeldeprobleme, kurzzeitige Verbindungsverluste,…. 5= serious impact: Downtime, Verlust von Leben oder Kontrolle, Datenverlust, Sicherheitslücken Sabine Berninger DHBW Heidenheim 33 Severity = 25 (5x5): ShowStopper – sofortiger Fix notwendig, muss in allen freigegebenen Versionen gefixt werden Severity = 16/ 20: Severity höher als alle neuen Features, Fix für alle betroffenen freigegebenen Versionen ------------------------------------------------------------------------------------------------------- Severity = 12/10: müssen vor dem Start des Systemtest gefixt sein Severity <= 9: eventuell nicht beheben • Probability: 1= nicht reproduzierbar 2 = sehr geringe Wahrscheinlichkeit (<10% der Systeme) 3= mittlere Wahrscheinlichkeit (50% der Systeme) 4= hohe Wahtscheinblichkeit (>80% der Systeme) 5= immer Bug severity = Customer impact * Probability Studiengang Informatik SCRUM – Rollen und Verantwortung Product Owner (PO) • Der Product Owner ist für die Eigenschaften und den wirtschaftlichen Erfolg des Produkts verantwortlich, vertritt den Kunden gegenüber dem Team. • Er definiert und priorisiert die zu entwickelnden Produkteigenschaften und nimmt diese am Ende eines Sprints ab. Scrum Master • Der Scrum Master fungiert als Moderator und Dienstleister („servant lead“). • Er unterstützt das Entwicklungsteam bei der Einhaltung der Regeln, er schafft geeignete Rahmenbedingungen, organisiert Ressourcen, räumt Hindernisses aus dem Weg, moderiert bei Konflikten, organisiert die Kommunikation mit der „Außenwelt\". Sabine Berninger DHBW Heidenheim 34Studiengang Informatik SCRUM – Rollen und Verantwortung Entwicklungsteam • Das Entwicklungsteam organisiert sich selbst und verantwortet die Lieferung der Produktfunktionalitäten in der vom Product Owner gewünschten Reihenfolge gemäß den vereinbarten Qualitätsstandards. • Kompetenzen/ Verantwortung/ Rollen: Produktdesigner (arbeitet evtl. in mehreren Teams mit) Architekt (arbeitet evtl. in mehreren Teams mit) Entwicklung Test designer/ Tester Tech Writer (Customer documentation) (arbeitet evtl. in mehreren Teams mit) Supporter (arbeitet evtl. in mehreren Teams mit) Sabine Berninger DHBW Heidenheim 35Studiengang Informatik SCRUM – Rollen und Verantwortung Architekt/ CoC • Centers of Competence und/ oder Architekten verantworten einzelne kritische Architekturbereiche oder die Systemarchitektur • Sie werden an Konzeptreviews und Architekturentscheidungen beteiligt oder stoßen diese an Change Control Board • Mitglieder: PO, Support, Tester, Architect, CoC… • Aufgabe: Pflege des Backlogs mit besonderem Fokus auf Customer issues (Grooming/ Refinement) • Analyse, Priorisierung und Einordnung der aus dem Feld gemeldeten Bugs ins Produkt backlog (ins Sprint backlog nur bei Show stoppern) • Meetings: täglich (Systemtest) … 1x/ Woche (Neuprodukte) • Ziel: „no faults forward“! Sabine Berninger DHBW Heidenheim 36Studiengang Informatik SCRUM – Rollen und Verantwortung Sabine Berninger DHBW Heidenheim 37 Team-Setup-Varianten: a) Featureteam/ Scrum Team: • Team bearbeitet eine komplette User story, quer über die Architektur des gesamten Produkts • Architekt oder CoC oft beratend/ reviewend tätig Studiengang Informatik SCRUM – Rollen und Verantwortung b) Fokusteam/ Center of Competence (CoC): • Team verantwortet einen bestimmten Architekturbereich eines Produkts: einen oder mehrere Clients, oder Backend-Komponenten (Datenbankanbindung, Business-Logik,…), oder remote Kommunikation, oder Konfiguration, oder… • klassische Teamaufteilung in Wasserfallprojekten • Arbeit an einem Features wird auf die Teams der Architekturschichten verteilt: langsamstes Team bestimmt den möglichen Lieferzeitpunkt des Features • meist gleichzeitige Arbeit an mehreren Features für gleichmässige Auslastung aller Teams • in agilen Projekten: CoC oft beratend tätig, oder verpflichtend bei Reviews einzubinden Sabine Berninger DHBW Heidenheim 38 Team-Setup-Varianten: Studiengang Informatik Scrum-Prozess 0) Projektinitiierung • Teamzusammenstellung mit entspr. Skills, auch in QA-Methoden (z.B. ISTQB®-Ausbildung zum Certified Agile Tester) und Fakultäten (nicht unbedingt dedizierter Tester, aber diese Rolle) • Product Owner mit fachlicher Kompetenz und Handlungsspielraum • Scrum Master als Roadblock-/Barrieren-Entferner • Definition of Ready (DoR) und Definition of Done (DOD) initial festlegen • Iteration Zero (Sprint 0): initiale/ prototylische Architektur, Testumgebung (Virtualisierung, Container), Buildumgebung, Deployment auf Testsysteme etc. • Bugmanagement aufsetzen Sabine Berninger DHBW Heidenheim 39Studiengang Informatik Scrum-Prozess a) Product Backlog grooming 40 Product backlog items: User stories Studiengang Informatik Grooming/ Refinement für PBIs (PO, Team) (Product backlog items) Sabine Berninger DHBW Heidenheim 41 Alle PBIs haben einen Lebenszyklus. Wichtige Meilensteine des Groomings: Requirement-/Epic-Ebene: „Ready“ Feature-/User story-Ebene: „Done“ Definition of „Ready“ (DoR)/ Definition of „Done“ (DoD): • Zielt auf gemeinsames Verständnis ab, wann eine Aufgabe (Epic) gestartet werden kann. • Entwicklungsteamspezifisch • Umfasst mit zunehmender Erfahrung des Entwicklungsteams mehr Aktivitäten -> Maß für die Reife eines Entwicklungsteams „Die Vereinbarung des Teams, was für das Erreichen dieser beiden Zustände getan sein muss, bestimmt die Qualität des Artefakts!“ Chris Rupp (Sophisten) Studiengang Informatik Definition of „Ready“ (für PBIs) Sabine Berninger DHBW Heidenheim 43Studiengang Informatik Scrum-Prozess b) Slicing der Epics in User stories Sabine Berninger DHBW Heidenheim 44 Eine User Story ist wie folgt aufgebaut: Als [Nutzer] möchte ich [Funktion], damit / um / weil [Wert]. Das heißt, eine User Story beantwortet die Fragen: WER möchte WAS und WARUM. Als User stories formulierte Anforderungen sollen als Produktinkremente einen sichtbaren, neuen Kundennutzen bringen! Studiengang Informatik Scrum-Prozess b) Slicing der Epics in User stories Sabine Berninger DHBW Heidenheim 45 Qualitätskriterium beim Slicing: „INVEST“ Studiengang InformatikSabine Berninger DHBW Heidenheim 46 46 Scrum-Prozess b) Slicing der Epics in User stories (Create, Read, Update, Delete) Studiengang Informatik User stories Sabine Berninger DHBW Heidenheim 47 47 Studiengang Informatik 48 Sabine Berninger DHBW Heidenheim 48 Scrum-Prozess b) Slicing der Epics in User stories/ Features Studiengang Informatik Workitems Sabine Berninger DHBW Heidenheim 49 Abteilung | 06.08.2015 | © Robert Bosch GmbH 2015. Alle Rechte vorbehalten, auch bzgl. jeder Verfügung, Verwertung, Reproduktion, Bearbeitung, Weitergabe sowie für den Fall von Schutzrechtsanmeldungen. Security Systems TechRequest Epic TaskTaskTask Development context Test CaseTest CaseTest Case BugBugFeatureFeatureUser story Product Owner SupportArchitect Customer context Developer Tech Writer… Tester Tickets Studiengang Informatik Horizontales Schneiden mit dem Fokus auf Architekturkomponenten? Elefantencarpaccio Sabine Berninger DHBW Heidenheim 50Studiengang Informatik Vertikales Schneiden Sabine Berninger DHBW Heidenheim 51 Oder vertikal schneiden? Feature-Team-Cut (fokussiert auf vertikale Deliverables): • Lösung als Ganzes verstehen und durchdringen • Scheibchenweise funktional umsetzen • Ziel: jedes Feature ist lieferbar! Studiengang Informatik Elefantenfreundlicher… Sabine Berninger DHBW Heidenheim 52Studiengang Informatik Software-Architektur: Architektur-Elefanten Sabine Berninger DHBW Heidenheim 53Studiengang Informatik Vertikale Teams Voraussetzung für erfolgreiches Elefantencarpaccio: Interdisziplinäre Teams! Sabine Berninger DHBW Heidenheim 54 • Die Teams brauchen die Kompetenz, am Gesamtsystem Änderungen vorzunehmen • Tester sind Bestandteil des Teams und arbeiten schritthaltend • Evtl. zusätzliches Architekturteam als Berater-/ Prototyper/ CoCs • Bildung von DevOps für Kundeninfrastruktur- abhängige IT-Systeme Studiengang Informatik Gegenüberstellung Bedeutung für: Horizontales Schneiden (Architekturbezug) Vertikales Schneiden (Featurebezug) Teamstruktur Fokussierte, architekturbezogene Teilkompetenz ausreichend Interdisziplinäre Team-Zusammenstellung nötig Kommunikation Alle Schnittstellenabsprachen mit anderen Teams Innerhalb des Teams für alle Schnittstellen des Features Architektur- Governance Spezialisierte Teams mit dedizierter Verantwortung Verteilt; evtl. zusätzl. Architekturteam oder COCs Fertigstellung Fertig, wenn letztes Team fertig ist Vom Team vollständig bearbeitbar (bis „Done“) Abschätzung Summe aller Teams + kritischer Pfad +Reibung/ Rework an Interfaces Ein Team schätzt Ergebnis- verantwortung Verteilt, schwierige Stabilisierung der Qualität Team selbst, inkl. Qualität Sabine Berninger DHBW Heidenheim 55Studiengang Informatik Nächster Schritt: Abschätzung mit Planning poker für User stories Vadim Anne Sabine Berninger DHBW Heidenheim 56 Scrum-Prozess c) Sprint planning Studiengang InformatikSabine Berninger DHBW Heidenheim 59 Ziel: Definition of Done (DoD) muss für eine User Story in einem Sprint erreichbar sein Scrum-Prozess c) Sprint planning Studiengang InformatikSabine Berninger DHBW Heidenheim 60 Development - All dedicated Tasks are closed - SC updated, reviewed for integrity and completeness - New CTQ´s defined - Build without Errors\\Warnings - Open source scan done - Potential patent infringements considered - Use of outside patents/licenses approved - Forward integration done - Development done according to coding/checkin guidelines - All checkins reviewed acc. to code review guidelines - No Code refactoring pending - Unit tests implemented - Feature integrated into Setup - Critical feature bugs >=12 fixed - Uncritical Bugs <12 closed as accepted - Planned UX activies done - Acceptance Test\\Demo done with PO at sprint review meeting Test - “How to test” answered by development - Test cases added to test case repository - Test cases reviewed again - Test environment available (incl. required tools\\triggers) - Regression test done - Integration test done - New CTQ´s tested Product documentation - Online manuals updated - Written product documentation updated Scrum-Prozess: Sprint planning: DoD (real world example) Studiengang Informatik Scrum-Prozess c) Sprintplanung • Quality gate • Basierend auf zyklischen Grooming des Product backlogs • Wichtung von TechRequests (abtragen technischer Schuld und Architekturarbeiten) gegenüber neuer Funktionalität vor jedem Sprint, ebenso Field issue-Behebung, evtl. unter Einfügen von Spikes • Funktionierende SW über Dokumentation: Testfälle sind die beste Dokumentation des Systemverhaltens • Planung von Simulatoren, Stubs,… • Schneiden von User stories in Tasks (Entwicklungsteam), Aufwand/ Scope: 1-2 PT Sabine Berninger DHBW Heidenheim 61Studiengang Informatik Teil 2 Sprint execution Sabine Berninger DHBW Heidenheim 62Studiengang Informatik Scrum-Prozess d) Sprint execution Daily stand ups/ Daily scrum (Entwicklungsteam-intern): • max. 15 min. (im Stehen) • Ziel: mit Blick aufs Task-Board Arbeiten aufeinander abzustimmen, einen Plan für die nächsten 24 Stunden zu haben • Erreichen des Sprintziels wird wahrscheinlicher • fester täglicher Zeitpunkt und Ort • jeder Teilnehmer beantwortet 3 Fragen: • Was habe ich seit dem letzten Daily Standup erreicht? • Was werde ich heute erreichen? • Erwarte ich Hindernisse und kann das Team mir dabei helfen? Sabine Berninger DHBW Heidenheim 63Studiengang Informatik Scrum-Prozess d) Sprint execution Warum sind Daily Standup-Meetings wichtig? • Sie verbessern die Kommunikation. • Das Daily Standup-Meeting sorgt dafür, dass andere Treffen überflüssig werden. • Hindernisse werden identifiziert. • Eine schnelle Entscheidungsfindung wird stimuliert. • Die Kenntnisse des Scrum-Teams werden erweitert. • Fortschritte in Bezug auf das Sprintziel werden transparent gemacht. Die Teammitglieder können Nachlässigkeiten daher nur schwer verbergen. An diese Transparenz müssen sich einige erst gewöhnen, für andere hingegen ist sie eine Erleichterung. Sabine Berninger DHBW Heidenheim 64Studiengang Informatik Scrum-Prozess d) Sprint execution: weitere Best practices • Pair Programming • Ein reifes Team gibt sich ab der Designphase Architekturregeln, Programmier- und Designrichtlinien (Entwurfsmuster, Styleguides - automatisch prüfbar) • Test-Driven/ Test-first Development mit automat. Ausführung von Regressions-Tests • Peer Code reviews • Zeitnaher Test der integrierten neuen Funktionalität innerhalb des Sprints (pro Feature: forward integration -> build + Integrationstest auf Feature branch -> schnelles Feedback ans Team zur Produktqualität) • Continous build + integration (autom. Deployment auf Testsysteme) • Hoher Grad an Testautomatisierung notwendig (automatische Regressionstests der Funktionalität und der CTQs) Sabine Berninger DHBW Heidenheim 65Studiengang Informatik Scrum-Prozess: Sprint execution Feature branches ➢ Feature Check-ins nur auf den Feature Branch ➢ Explizite Entscheidung: wann zurückmergen? ➢ Bug fixes noch auf Main, wenn: ▪ Unabhängig von der Feature-Entwicklung ▪ Niederes Risiko angenommen Sabine Berninger DHBW Heidenheim 66 Main Feature Branch Feature task check-in Bugfix check-in Studiengang Informatik Erwartete Vorteile: • Main Branch bleibt gesund • Kürzere Releasezyklen (mit weniger Features!) möglich • Releaseplan besser zu managen. Sabine Berninger DHBW Heidenheim 67 Mögliche Probleme: • Zusätzlicher Merging-Aufwand (forward-/backward-Integration) • komplexere Infrastruktur Scrum-Prozess: Sprint execution Feature branches Studiengang Informatik Scrum-Prozess: Feature branches Workflow und Test I ➔ Check-ins auf den Feature Branch. ➔ Lokales Testen (Team + Team-Tester). ➔ Forward integration vom Main branch. ➔ Lokaler Integrationstest (<< 1 Woche) ➔ Backward integration auf den Main branch. Sabine Berninger DHBW Heidenheim 68 Potentielles Problem: ➔ Endlose Schleife aus Forward Integrationen, Integrationstest und new Check-ins auf Main, verursacht durch andere Teams/Bug fixer. Main Ft Branch Feature team internal test Integration test ready Integration test Integration ready Studiengang Informatik Scrum-Prozess: Feature branches Workflow und Test II Sabine Berninger DHBW Heidenheim 69 Main SystemtestMain Integration Test Feature Integration Test (FIT) Main Integration Test (MIT) System Test (SYT) Studiengang Informatik Scrum-Prozess: Feature branches Was lohnt sich, zurückzumergen? Sabine Berninger DHBW Heidenheim 71 Epic-Teile ➔ Ganzes Epic (1 große Portion) ➔ Minimum Marketable Scope, dann “Nice to have” (2 große Portionen) ➔ n Stories in beliebiger Anzahl (n kleine Portionen) ➔ Eine einzelne Story (n sehr kleine Portionen) Nice to have Minimum Marketable Scope Epic “Stories” Categorized “Stories” Mögliche Merge-back-Einheiten: Studiengang Informatik Scrum-Prozess: Feature branches Feature branch merging Sabine Berninger DHBW Heidenheim 72 Teilgröße Potentielle Probleme Ganzes Epic - Verursacht späte Integration - Spätes Feedback - Hoher Merge-Aufwand - Späte Tests auf dem Main branch 1. MMS 2. “Nice to have” - MMS muss vorab definiert sein - Relativ späte Integration/ Test auf Main - Relativ hoher Merge-Aufwand Stories in beliebiger Anzahl - In Main sichtbar, obwohl noch nicht vermarktbar, reduzierte Flexibilität (Release Feature A, Feature B noch nicht, aber Teile von B sind schon enthalten) Einzelne Story - Hochfrequente Integrationen, die viel Overhead verursachen Mögliche Abfederung: Sichtbare Teile noch nicht vermarktbarer Features im UI verstecken Studiengang Informatik Scrum-Prozess: e) Sprint review • Quality Gate unter Kunden-/ Stakeholderbeteiligung • Tester des Teams demonstrieren neue Features, haben das größte Produkt-KnowHow (einsatzbar bei Schulungen, Support…) • Akzeptanzkriterien der DoD werden bestätigt – Konzentration nicht nur auf die für den Anwender sichtbare Funktionalität! • Verantwortlich für Abnahme des Sprintergebnisses: PO + Stakeholder und QA • Nächster Sprint erst nach Erledigung aller Hausaufgaben – und auf Basis der Kundenzufriedenheit mit dem Zwischenergebnis Sabine Berninger DHBW Heidenheim 74Studiengang Informatik Scrum-Prozess: e) Sprint review - Reporting Sabine Berninger DHBW Heidenheim 75 Testfortschritt: Studiengang Informatik Scrum-Prozess:Sprint review Feature burndown chart Sabine Berninger DHBW Heidenheim 76Studiengang Informatik Scrum-Prozess:Sprint review Meilenstein-Trend-Analyse Sabine Berninger DHBW Heidenheim 77Studiengang Informatik Scrum-Prozess: f) Retrospective Retrospective: • das Team analysiert seine Arbeitsweise und nimmt Prozessverbesserungen vor • es klassifiziert Prozessänderungen in: • „More of…“ • „Less of…“ • „Continue…“ • üblicherweise durchgeführt an Metaplantafeln mit Karteikarten Sabine Berninger DHBW Heidenheim 78Studiengang Informatik Scrum-Prozess: g) Launch Launch: • Finale Release-/ Systemtests vor Auslieferung möglich! Sabine Berninger DHBW Heidenheim 79Studiengang Informatik Einführung von agilen Vorgehensmodellen: Wie verankere ich agiles PM in einer Organisation? Erfahrungen am Beispiel SCRUM • In der Praxis stellt sich die Einführung von SCRUM oder anderen agilen Methoden oft als schwierig dar. • Häufiger Grund: die der Methode zugrunde liegenden Werte passen zunächst nicht (ohne Weiteres) zur Kultur des Unternehmens, und dies wird nicht hinreichend reflektiert und berücksichtigt. Die Einführung einer Methode wie SCRUM ist ein Projekt auf mehreren Ebenen: • Einführung der agilen Methodik im Fachprojekt • Training, Übung für die Teammitglieder • Methodik selbst ist prinzipiell einfach, bedarf aber der Übung/Unterstützung • Einführung von agilen Werten im Unternehmen, Veränderung der Unternehmenskultur, ist also ein Organisations-Entwicklungsprojekt! • Dieses Change-Management wird oft vernachlässigt, oder Notwendigkeit ist gar nicht bewusst Sabine Berninger DHBW Heidenheim 80Studiengang Informatik Einführung von agilen Vorgehensmodellen – Anwendung der Werte des Agilen Manifestes Sabine Berninger DHBW Heidenheim 81 • Methoden (wie SCRUM) und deren zugrundeliegende Werte müssen zum jeweiligen Kontext, in dem sie verwendet werden passen (Unternehmen, Kultur, Kompetenzen, Technologie usw. ). • Es ist eine für das Unternehmen passende Methodik (Vorgehensmodell) zu entwickeln, dass die Besonderheiten des jeweiligen Kontextes berücksichtigt. ➢ Balance für die „agilen“ Werte individuell justieren: „Agile“ Werte/Prinzipien „Klassische“ Werte/Prinzipien Selbstorganisation Hierarchische Führung Individuen und Interaktionen Prozesse und Werkzeuge Funktionierende Software (frühes Ausliefern) Dokumentation (Konzepte, Spezifikationen) Vertrauensvolle Zusammenarbeit Verträge und Vereinbarungen Reagieren auf Veränderungen Pläne Studiengang Informatik Organisationen nutzen weder klassische noch agile Methoden durchgängig Sabine Berninger DHBW Heidenheim 82 (Komus, 2017) Studiengang InformatikSabine Berninger DHBW Heidenheim 84 (Komus, 2017) Studiengang Informatik Scrum vs. XP (Extreme Programming) 15 min. zum Lesen/ Verstehen: https://www.coscreen.co/blog/extreme-programming-vs-scrum- difference/#:~:text=Extreme%20programming%20is%20a%20software,with%20products%20other%20than%20softw are. Sabine Berninger DHBW Heidenheim 85 (Komus, 2017) Fragen? Studiengang Informatik Übung Richtig oder falsch? Sabine Berninger DHBW Heidenheim 86 (Komus, 2017) 1. „.. You can't say you're using scrum if you don't adopt the whole of it ...“ 5. Die 5 Scrum-Werte sind: Commitment, Fokus, Offenheit, Respekt und Mut. 4. Die DoD definiert, wann ein Feature als fertig angesehen werden kann. 3. Wie XP kann auch Scrum nur für Softwareentwicklungsprojekte eingesetzt werden 2. Pair programming, Test driven design und Collective code ownership sind ‚Best practices‘ von XP. Studiengang Informatik Team-Velocity Was ist Velocity (20 min.)? https://www.agile-academy.com/de/scrum-master/was-bedeutet-velocity-fuer-ihr-team/ Häufiger Missbrauch – bitte vermeiden bzw. abwehren: https://www.colenet.de/blog/scrum/3-fehler-die-scrum-teams-bei-der-verwendung-von-velocity-vermeiden-sollten- und-wie-sie-stattdessen-performance-prognosesicherheit-und-wert-messen-koennen/ Sabine Berninger DHBW Heidenheim 88 (Komus, 2017) Fragen? Studiengang Informatik Weiterführende Literatur Sabine Berninger DHBW Heidenheim 90 „Agile Estimating and Planning”, M.Cohn, Prentice Hall, 2011. „ Agile Testing: A Practical Guide for Testers and Agile Teams”, L. Crispin, Addison-Wesley, 2008. “Wien wartet auf Dich! Produktive Projekte und Teams.” T. de Marco, T. Lister, Hanser, 2014. „Death March. The Complete Software Developer‘s Guide to Surviving „Mission Impossible“ Projects.“ E. Yourdon, Prentice Hall, 1999. “The Phoenix Project. A Novel about IT, DevOps, and Helping Your Business Win.” G. Kim, K. Behr, G. Spafford, IT Revolution Press, 2014 90 Studiengang Informatik Weiterführende Literatur 91 • Cohn, M. 2010. Succeeding with Agile. Software development using Scrum. Boston Addison-Wesley. • Cohn, M. 2004. User stories applied for Agile Software Development. Boston Addison-Wesley. • Johnson, J. 2006. My Life is Failure. The Standish Group Int‘l, Inc. • Baumgartner, M., Klonk, M., Pichler, H., Seidl, R., Tanczos, S. 2013. Agile Testing. München: Carl Hanser. • Gregory, Janet; Crispin, Lisa: Agile Testing: A Practical Guide for Testers and Agile Teams. Addison-Wesley Professional; 2009 • Gregory, Janet; Crispin, Lisa: More Agile Testing. Addison-Wesley Professional; 2014 • Hanssen, Geir Kjetil; Stalhane, Tor; Myklebust, Thor: SafeScrum® – Agile Development of Safety-Critical Software. Springer 2018. • Eckstein, J. 2009. Agile Softwareentwicklung mit verteilten Teams. Heidelberg: dpunkt.verlag. • Opelt, A., Gloger, B., Pfarl, W., Mittermayr, R. 2014. Der agile Festpreis. München Hanser. • Brooks F. P. jun. 2003. Vom Mythos des Mann-Monats. Bonn: mitp-Verlag. Sabine Berninger DHBW Heidenheim Studiengang Informatik Quellen und weiterführende Literatur 92 • http://www.scrumguides.org/ •http://www.extremeprogramming.org/ • http://www.istqb.org/certification-path-root/agile-tester-extension.html • http://agilemanifesto.org/ • http://safescrum.no • Beck, Kent: Extreme Programming Explained: Embrace Change, Addison-Wesley Longman, 1999, (aktuelle Ausgabe: 2. Aufl. November 2004) • Martin, Robert C.: Agile Software Development. Principles, Patterns, Practices, Prentice Hall, 2003, (Neuauflage: Pearson, International ed., März 2011) • Beck, Kent u.a.: Manifesto for Agile Software Development, 2001 • Sutherland, K. Schwaber, Der Scrum-Guide – Der gültige Leitfaden für Scrum: Die Spielregeln, Juli 2013. • D. Mühlbauer: Das Q in Agile. Qualitätssicherung in agilen Projekten. OBJEKTspektrum, Ausgabe Agility, 2015. • G. Utas: Robust Communications Software. Extreme Availability, Reliability and Scalability for Carrier-Grade Systems. Wiley 2005. Sabine Berninger DHBW Heidenheim Studiengang Informatik Verwendete Quellen • Bennett, N. und Lemoine, G.J. 2014. \"What VUCA Really Means for You\", Harvard Business Review (92:1/2), S. 27-27. • Jenny, B. 2014. Projektmanagement: Das Wissen für den Profi, (3. Auflage). Zürich: vdf Hochschulverlag AG. • Komus, A. 2016. \"agiles Projektmanagement - agiles Management\", Frankfurt, https://www.komus.de/app/download/8835259686/2016-02-agiles_Management-PM.pdf?t=1505927227, 07.06.2019. • Komus, A. 2017. \"Abschlussbericht: Status Quo Agile 2016/2017 - 3. Studie über Erfolg und Anwendungsformen von agilen Methoden\", Hochschule Koblenz, Koblenz, https://www.process-and- project.net/studien/download/downloadbereich-status-quo-agile/, 07.06.2019. • Schlauderer, S., Overhage, S. und Fehrenbach, B. 2015. \"Widely used but also highly valued? Acceptance factors and their perceptions in water-scrum-fall projects\", in Proceedings of the Thirty Sixth International Conference on Information Systems (ICIS), Fort Worth. • Stacey, R.D. 1996. Strategic Management & Organisational Dynamics, (2. Auflage). London: Pitman. • Tiemeyer, E., Beims, M., Bergmann, R. und Ebert, C. 2018. Handbuch IT-Projektmanagement: Vorgehensmodelle, Managementinstrumente, Good Practices, (3. Auflage). München: Carl Hanser. • Wieczorrek, H.W. und Mertens, P. 2011. Management von IT-Projekten: Von der Planung zur Realisierung, (4. Auflage). Berlin, Heidelberg: Springer. Sabine Berninger DHBW Heidenheim 93","libVersion":"0.3.2","langs":""}