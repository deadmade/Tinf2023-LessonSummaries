{"path":"DHBW Heidenheim/2025 WiSe/Technische Informatik II/Skript/2b MU0.pdf","text":"Studiengang Informatik Der von-Neumann und der MU0-Modellrechner S. Berninger DHBW Heidenheim 1Studiengang Informatik Ein kleines Programm… Hochsprache (C, C++, C#...): var += 2; Compiler Assemblersprache: Maschinencode (16-Bit-Befehle): LDA var 0000.ssss|ssss.ss00 ADD inc 0010.ssss|ssss.ss10 STO var 0001.ssss|ssss.ss00 ssss.ssss.ss00 var: DEFW #0 @ hier: zunaechst unbelegt ssss.ssss.ss10 inc: DEFW #2 Befehlscode + Operand(en) S. Berninger DHBW Heidenheim 3 Assembler Studiengang Informatik Der „von Neumann“-Rechner (Speicherprogrammierter Rechner) Veröffentlicht 1945 in „First Draft of a Report on the EDVAC“ Arithmetic Logic Unit - Rechenwerk • führt Berechnungen durch Control Unit - Steuerwerk • interpretiert die Anweisungen und steuert die Befehlsabfolge Memory - Speicherwerk • speichert sowohl Programme als auch Daten (JvN.) Input/Output - Ein/Ausgabewerk • steuert die Eingabe und Ausgabe von Daten zum Anwender S. Berninger DHBW Heidenheim 4 CPU Programmcode und Daten werden gleichbehandelt Studiengang Informatik Die Elemente eines einfachen Rechners inkl. Busse und Speicherinhalt Memory – Speicher: Speichert Befehle (Programm) und Daten (Operanden) PC- Programm Counter Speichert die nächste Programm- Register: (Befehls-) adresse IR - Instruction Register: Speichert den aktuellen Befehl Bus: Verbindet alle Elemente Control unit: Steuerwerk, Takt ALU- Arithmetic Logic Unit: kann mit Operanden rechnen ACC- Akkumulator Register: Ergebnisregister für Berechnungen S. Berninger DHBW Heidenheim 5 Adressbus (Adressen zur Speicheradressierung werden angelegt) Datenbus (transportiert Daten) PC IR memoryACC Control unit Rechen- werk CPU Speicher- werk (Befehle, Daten) Nicht dargestellt: Ein-/ Ausgabewerk Studiengang Informatik Unser kleines Programm… Speicheradresse Speicherinhalt (2 Byte) Instruction register Program counter 00001000 0000.SSSS| SSSS.SSSS 0000.SSSS|SSSS.SSSS 00001010 0010.SSSS| SSSS.SSSS 00001100 0001.SSSS| SSSS.SSSS 00001110 0000.0000|0000.0000 („var“, Daten) 00010000 0000.0000|0000.0010 („inc“, Daten) Befehlscode Adresse S. Berninger DHBW Heidenheim 6 LDA var ADD inc STO var Studiengang Informatik Lesen und schreiben von Daten, Speicher und Registern Blickrichtung des Datentransfers ist immer von der CPU (vom Steuerwerk/ von den Registern) aus, Richtung Speicher. Steuerwerk/ Register (schnelle Zwischenspeicher) sind die aktiv Handelnden, Speicher ist passiv! - Signal ie (input enable) liegt an: Register lesen ein (aktiv!) - Signal oe (ouput enable) liegt an: Register schreiben (aktiv!) Aber: • Speicher wird beschrieben (passiv) • Speicher wird ausgelesen (passiv) S. Berninger DHBW Heidenheim 7 16 …CPU 16 … Speicher schreiben auslesen RnW=1 RnW=0 Farbcode: Schreiben Lesen Studiengang Informatik Hauptspeicher S. Berninger DHBW Heidenheim 8 MemReq RnW=1 RnW=0 Adressbus (hält Adresse) Datenbus (transportiert Daten) PC IR memory ACC Wort 1 Wort 2 Wort 3 Wort 4 … Speicherstellen werden über Adressen angesprochen, um die Daten auszulesen (Adresse auf Adressbus schreiben -> Daten vom Datenbus lesen) Adresse Daten 0xn 0xn + 4 0xn + 8 0xn + 12 Breite des Adressbusses: entsprechend Speicherelementzahl (1024 Speicherworte: ?) Breite Datenbus: entsprechend Wortbreite (32 Bit bei 32-Bit-Daten) Schreiben Lesen Studiengang Informatik ACC PC Adress- und Datenbus Je nach Steuercode des Steuerwerks, lesen oder schreiben die Komponenten (Adressen oder Daten) am Bus. Die jeweiligen Daten liegen am gesamten Adress- bzw. Datenbus an. Es darf pro Bus immer nur 1 Element geschrieben werden. Entsprechend der Taktung kann in einem Takt auf den Bus geschrieben und gelesen werden. Heisst: Bis hierhin kann in einem Takt ein Register nicht Werte einlesen und wieder ausgeben! Adressbus: Hält Adressen Datenbus: Transportiert Daten Datenbus-Breite = 1 Daten-Wort S. Berninger DHBW Heidenheim 9 Adressbus (hält Adresse) Datenbus (transportiert Daten) IR memory schreiben lesen Welches Register enthält nur Adressen? Studiengang Informatik PC ACC memory Steuerwerk/ Control unit (Befehlsabarbeitung) Besteht aus: • Program counter (PC) • Instruction register (IR) • Befehlsdecoder • Befehlsablaufsteuerung durch Anlegen von Steuer- signalen an die Komponenten Steuert den Ablauf der Befehlsbearbeitung durch Steuersignale zu den Komponenten über den Steuerbus. Alle Aktivitäten des Steuerwerks folgen dem Takt der CPU. Das Steuerwerk führt für jeden Befehl ein Mikroprogramm, bestehend aus Mikroschritten (Steps), aus. S. Berninger DHBW Heidenheim 10 IR ACCoe ACCie PCoe PCie IRoe IRe VorbedingungOpcode Studiengang Informatik Befehlsablauf (z.B.: LDA #1 – Lade Akku mit 1) S. Berninger DHBW Heidenheim 11 Fetch Befehl Decode Befehl Execute Befehl Write Memory Studiengang Informatik Beispiel für einen Befehlsablauf (ADD s) S. Berninger DHBW Heidenheim 12 Ergebnis zurückschreiben (Speicher), wenn nötig Befehl aus Speicher anfordern, Befehlszähler+1 Befehl ins IR Befehl dekodieren (Operanden holen) Befehl ausführen Ctrl (Steuer- werk) Adressbus Datenbus PCACC ALU memory (Speicher- werk) IR (Steps) Studiengang Informatik Der Befehlszyklus: Fetch • Im Fetchzyklus wird der Wert des Programcounters auf den Adressbus gelegt und der Programmcode aus dem Speicher in das Instructionregister gelesen • Die ALU erhöht gleichzeitig den Wert des Programmcounters und speichert diesen wieder zurück • Benötigt einen vollen Taktzyklus durch Lesen des OpCodes aus dem Speicher • Blau: die Register schreiben (oe) • Rot: die Register lesen (ie) S. Berninger DHBW Heidenheim 13 Ctrl Adressbus Datenbus PCACC ALU memory 1a 1b 1a IR Studiengang Informatik Der Befehlszyklus: Decode/ Execute/ Write für Rechenoperationen Bei einer Rechenoperation wird: • die Adresse des Operanden aus dem Befehl dekodiert und • der Wert des angesprochenen Speicherworts an den einen Eingang der ALU geschaltet (Speicherzugriff: 1 Takt!). • Der zweite Eingang der ALU erhält seine Information vom Akkumulator • Das Ergebnis der Rechnung wird wieder im Akkumulator gespeichert. S. Berninger DHBW Heidenheim 14 Ctrl Adressbus Datenbus PCACC ALU memory IR Studiengang Informatik Speicher Steuersignale des Datenbusses: MemRQ (Memory Request): Der Speicherbaustein wird angesprochen. Dieses Signal ist notwendig, da mehrere Speicherbausteine vorhanden sein können. RnW (Read / not Write): Dieses Signal gibt an, ob von dem Speicher gelesen wird, oder ob eine Information in den Speicher geschrieben wird. Wenn nicht geschrieben wird, sollte RnW immer auf Read geschaltet sein S. Berninger DHBW Heidenheim 15 Ein Speicher besteht aus einer Menge von Speicherworten, die durch eine Adresse anwählbar sind R/nW: Lesen bei High-Pegel, Schreiben bei L-Pegel (ein führendes „n“ im Signalnamen bedeutet active:low (0=aktiv)) Studiengang Informatik Historie des MU • Der MU-Rechner ist nach dem ersten funktionierenden Digitalcomputer der Welt, dem SSEM (Small Scale Experimental Machine) der Universität Manchester modelliert worden • Der SSEM führte am 21. Juni 1948 zum ersten Mal ein Programm aus dem Speicher heraus aus • Es ist damit die erste erfolgreiche Implementierung eines von Neumann Rechners • Er wird an der Universität Manchester zu Lehrzwecken eingesetzt → Wir nutzen ihn als Modellgrundlage für eine Lernreise durch die Prozessorkonzepte → Manchester Baby: https://en.wikipedia.org/wiki/Manchester_Baby • weiterentwickelt zu (Ferranti) Mark I, weltweit erster kommerziell vertriebener Allzweck-Computer S. Berninger DHBW Heidenheim 16Studiengang Informatik Historie des MU Wir werden gemeinsam folgende Modell-Rechner-Generationen entwickeln: MU0: Basiskonzept, Befehlsabarbeitung MU1: Adressierungsmodi, Akkumulator-Architektur MU2 & MU3: Adressraum vergrößern MU4: Registeranzahl erhöhen MU5: Adressberechnung, Register-Architektur, Load-Store MU6: Harvard-Design MU7: Pipelining, „ARM-ähnlich“ S. Berninger DHBW Heidenheim 17Studiengang Informatik Umsetzung des MU0 in Hardware Im Folgenden: • Datenpfad Modell: Fokussierung auf die Datenflüsse zwischen den Komponenten • Steuerung der Datenflüsse durch Steuercodes (Steuerwerk) • Taktsynchronität (zeitliche Abfolge) • Codierung von Befehlen: Opcodes • Mikroprogrammierung für komplexe Befehle S. Berninger DHBW Heidenheim 18Studiengang Informatik Modellrechner-Generation MU0: Annahmen • Hauptspeicherzugriffe sind sehr langsam (das Bottleneck): jeder lesende Speicherzugriff benötigt einen vollen Taktzyklus! • Heißt für MU0: jeder Befehl braucht mindestens soviel Taktzyklen, wie er Speicherzugriffe braucht S. Berninger DHBW Heidenheim 19Studiengang Informatik Fokussierung auf Prozessor (Verschaltung der Register) S. Berninger DHBW Heidenheim 20 • Memory (Speicher) ist nicht Bestandteil des Prozessors • Andere Darstellung für Datenfluss durch Verschaltung der Komponenten, Trennung in Adress- und Datenbus ist dafür weniger relevant • Zwei Datenbusse zu den Eingängen der ALU, A und B Operanden Ope- ran- den memory ACC IRPC ALU Operan- denadr. Befehle Ergebnis Befehls- adr. Operanden Ctrl/ Timing Data out Address Data in B-DatenbusA-Datenbus Studiengang InformatikS. Berninger DHBW Heidenheim 21 Adr. ist Ope- rand Fetch Execute Operanden Ope- ran- den memory ACC IRPC ALU Operan- denadr. Befehle Ergebnis Adr. ist Ope- rand Befehls- adr. Operanden Ctrl/ Timing Data out Address Data in B-DatenbusA-Datenbus Ope- ran- den memory ACC IRPC ALU Operan- denadr. Befehle Ergebnis Befehls- adr. Operanden Ctrl/ Timing Data out Address Data in B-DatenbusA-Datenbus Befehl ADD s Takt 1 beendet Takt 2 beendet Studiengang Informatik Wer darf wann auf den Bus schreiben? S. Berninger DHBW Heidenheim 22 Operanden Ope- ran- den memory ACC IRPC ALU Operan- denadr. Befehle Ergebnis Befehls- adr. Operanden Ctrl/ Timing Data out Address Data in B-DatenbusA-Datenbus Studiengang Informatik Der Multiplexer Der Multiplexer ist ein Schalter, der durch das Anlegen eines Steuersignals das ausgewählte Eingangssignal auf den Ausgang legt S. Berninger DHBW Heidenheim 23Studiengang Informatik Operan- denadr. Das modifizierte MU0 Datenpfad Modell S. Berninger DHBW Heidenheim 24 • Die ALU hat zwei Eingänge, A und B • Kontrolle des Datenpfades und Adressbusses durch Multiplexer Durch diese Modifikation ist eine Realisierung des MU0 mit max. 2 Takten pro Befehl möglich Ope- ran- den ACC IRPC ALU Befehle Ergebnis Operanden Ctrl/ Timing 0 A 1 0 B 1 B-DatenbusA-Datenbus Data out Address Data in Befehlsadr. Studiengang Informatik Das modifizierte MU0 Datenpfad Modell • Der Multiplexer B steht: - auf 1 bei allen Datenverarbeitungsbefehlen und - auf 0 bei allen Sprungbefehlen. Bei Sprungbefehlen erfolgt kein Datenzugriff, S (IR) wird direkt nach PC verschoben • Der Multiplexer A wird bei den bisherigen Befehlen nur für den Fetchzyklus auf 0 gestellt, ansonsten wird S (unterer Teil von IR) immer als Adresse interpretiert S. Berninger DHBW Heidenheim 25 Operan- denadr. Ope- ran- den ACC IRPC ALU Befehle Ergebnis Operanden Ctrl/ Timing 0 A 1 0 B 1 B-DatenbusA-Datenbus Data out Address Data in Befehlsadr. Studiengang Informatik Operan- denadr. Ope- ran- den Adressbereitstellung und Datentransport werden gemeinsam als Datenpfad dargestellt S. Berninger DHBW Heidenheim 26 ACC IRPC ALU Befehle Ergebnis Operanden Ctrl/ Timing 0 A 1 0 B 1 B-DatenbusA-Datenbus Data out Address Data in Befehlsadr. Studiengang Informatik Takt und Steuerung MU0 • 1 Instruction = 2 Takte Fetch + Execute = 4 Taktflanken Schreiben + Lesen + Schreiben + Lesen • Steuerung der Elemente erfolgt durch Steuercodes: ie, oe • Wortbreite des Prozessors: 16 Bit • Registergröße • Datenbusbreite • Eingänge/Ausgänge ALU S. Berninger DHBW Heidenheim 27Studiengang Informatik MU0 Elemente und ihre Steuercodes S. Berninger DHBW Heidenheim 28 Akkumulator: ie -> Lesen, oe -> Schreiben Program Counter: ie ->Lesen, oe -> Schreiben Instruction Register: ie -> Lesen, oe → Schreiben ALU: Funktionsauswahl über ALUfs (function select) Adressbusmultiplexer A: 0 -> PC, 1 -> Adressteil von IR Datenbusmultiplexer B: 0 -> Sprungadr. von IR oder konstanter Operand 1 -> Daten aus Speicher Steuerwerk: Erzeugt die Steuersignale aus IR, ALU Status, Reset und internem Speicher Speicher: MemReq -> Speicher wird angesprochen, R/nW -> 1 Lesen, 0 Schreiben Studiengang Informatik Instruction Set des MU0 Rechners S. Berninger DHBW Heidenheim 29 • zum Laden und Speichern von Werten • zur Berechnung und • zur Ablaufkontrolle Die Instruktionen setzen sich zusammen aus • einem 4 Bit Operation Code und • einer 12 Bit Adresse Der Mu0-Prozessor kennt 8 (von 16 möglichen) Befehlen Load <s> Store <s> Add <s> Sub <s> Jump Jump Grt./Equ. Jump Not Equ. Stop LDA s 0000 ACC = mem[s] STO s 0001 mem[s] = ACC ADD s 0010 ACC = ACC + mem[s] SUB s 0011 ACC = ACC – mem[s] JMP s 0100 PC = s JGE s 0101 IF ACC >= 0 PC=s JNE s 0110 IF ACC != 0 PC=s STP 0111 stop Studiengang InformatikS. Berninger DHBW Heidenheim 30 Accie Accoe Asel Bsel PCie PCoe IRie IRoe ALUfs MemReq=1R/nW=1R/nW=0R/nW=0 Studiengang Informatik Steuertabelle S. Berninger DHBW Heidenheim 31 Inputs Outputs Instruction OpCode Reset Step ACCz ACC15 Step Asel Bsel ACCoe ACCie PCoe PCie IRoe IRie ALUfs MEMrq R/nW Reset Fetch xxxx 1 x x x 0 x x 0 0 0 1 0 0 0 0 1 xxxx 0 0 x x 1 0 x 0 0 1 1 0 1 A+1 1 1 Accie Accoe Asel Bsel PCie PCoe IRie IRoe ALUfs MemReq=1R/nW=1R/nW=0 Studiengang Informatik MU0 Kontroll-Logik (Steuerwerk) S. Berninger DHBW Heidenheim 32 Ab Zeile 3: Steuersignale für 2. Takt (Execute): / Studiengang Informatik Ein erstes MU0 Programm S. Berninger DHBW Heidenheim 33 Dieses Programm enthält sich selbst modifizierenden Code. Tun sie das besser nicht, wenn sie nicht sehr genau wissen, was sie tun!!! Aber: MU0 kann Arrays nur auf diese Weise verarbeiten (keine Index- oder Adresskalkulationen) Was steht am Ende im ACC? Was steht am Ende in Total? 0x0 Loop LDA Total ; Accumulate total = 0 0x2 Add_instr ADD Table ; Begin at head of table, ACC=39 0x4 STO Total ; Total (Summe)=ACC (39) 0x6 LDA Add_instr ; Change data address 0x8 ADD Two ; by modifying instruction! 0xA STO Add_instr ; OpCode „ADD Table“ incremented! 0xC LDA Count ; Count iterations 0xE SUB One ; Count down to zero 0x10 STO Count ; 0x12 JGE Loop ; If >= 0 repeat 0x14 STP ; Halt execution ; Data definitions 0x16 Total DEFW 0 ; Total - initially zero, contains sum over all table elements 0x18 One DEFW 1 ; The number one 0x1A Count DEFW 4 ; Loop counter (loop 5x) 0x1C Table DEFW 39 ; 1st element of table 0x1E DEFW 25 ; 2nd element of table 0x20 DEFW 4 ; 3rd element of table 0x22 DEFW 98 ; 4th element of table 0x24 DEFW 17 ; 5th element of table 0x26 Two DEFW 2 ; the number two Studiengang Informatik Die Weiterentwicklung zum MU1… S. Berninger DHBW Heidenheim 34","libVersion":"0.3.2","langs":""}