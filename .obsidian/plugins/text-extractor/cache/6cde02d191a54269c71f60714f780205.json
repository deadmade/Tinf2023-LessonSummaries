{"path":"DHBW Heidenheim/2024 SoSe/Theoretische Informatik/UnterrichtsMaterial/8.3 Woche Skript Externe Datenmengen Theoretische Informatik II (1).pdf","text":"Studiengang Informatik Datenstrukturen für externe Daten 1S. Berninger DHBW Heidenheim Grosse Datenmengen, die nicht in den Hauptspeicher passen, werden auf peripheren Speichern verwaltet. Datenstrukturen müssen für die langsamere Peripherie optimiert sein – da Teile der Datenstruktur für die Verarbeitung zunächst in den Hauptspeicher übertragen werden muss! Bsp.: (relationale) Datenbanksysteme Ziel: Minimierung der E/A-Vorgänge! File: Zusammenfassung mehrerer peripher gespeicherter Records - möglichst kleine Anzahl der Peripheriezugriffe. Datentransport erfolgt in Seiten/ Blöcken fester Größe – möglichst 1 Baumknoten! Studiengang Informatik Datenstrukturen für externe Daten 2S. Berninger DHBW Heidenheim Operationen: • Record im File suchen/ finden • Record(s) zum HS übertragen und umgekehrt – möglichst als Teile eines Baumknotens in Seitengröße Records werden durch Schlüssel identifiziert, Schlüssel müssen effizient in Recordnummern abbildbar sein Speichermethoden für Files: • sequentiell • Indexsequentiell • gestreut • baumstrukturiert (Record ist Teil eines Baumknoten) Studiengang Informatik Baumstrukturierte Fileorganisation 3S. Berninger DHBW Heidenheim Baumstrukturen unterstützen: • den direkten Zugriff auf einen Record über seinen Schlüssel • sequentielle Verarbeitung der Records in Schlüsselfolge • durchschnittliche Seitengröße des Hauptspeichers: 2-8 KB • Zugriff auf eine Datenseite, die sich bereits im HS befindet: ca. Faktor 100.000 mal schneller, als holen von der Platte -> Records dürfen nicht einzeln übertragen werden! Für die Datenverwaltung auf mehrstufigen Speichern wurden Baumstrukturen entwickelt, bei denen jeder Knoten > 2 Nachfolger hat (Mehrwegbäume). Ziel: möglichst viele Nachfolger pro Knoten zulassen und gleichzeitig mit dem Knoten ein- und auslagern! Studiengang Informatik Mehrwegbäume 4S. Berninger DHBW Heidenheim • Mehrwegbäume sind buschiger und breiter • Bei der Verarbeitung müssen Lokalitätseigenschaften ausgenutzt werden: • räumlich Lokalität (nahe Nachbarn) • zeitliche Lokalität (hochfrequent benutzte Knoten): Wurzel, höhere Baumebenen • Höhe des Baumes bestimmt die max. Anzahl der Externzugriffe im Binärbaum (log N) Studiengang Informatik Baumstrukturierte Fileorganisation 5S. Berninger DHBW Heidenheim Die Kosten für die internen Operationen auf einem Knoten können absolut vernachlässigt werden gegenüber den E-/A-Kosten. Knotenmengen werden zu neuen Knoten (N = Node, P=Page) k= key (Schlüssel) + D = Data (record) Eine Speicherseite fasst mehrere (bis sehr viele) Knoten Studiengang Informatik Baumstrukturierte Fileorganisation: m-Wege-Suchbaum 6S. Berninger DHBW Heidenheim m-Wege-Suchbaum: Alle Knoten besitzen einen Grad <=m (Ordnung). Heißt: kein Knoten hat mehr als m Unterbäume. I. Jeder Knoten hat folgende Struktur: neuer Knoten, Schlüssel+Daten: KxDx P0 P1 P2 P3 P4 P5 P6 … Pb Weitere Pages bzw. Unter-Bäume K1D1 K3D3 K5D5 K7D7 K2D2 K6D6 K4D4 KxDx: Keyx/Schlüsselx + Datax (Record x) Py: nächster Page-Baumy Bsp: m=8 Wege aus einem Knoten heraus im Bsp: b Keys pro Knoten (7) L Levels = Höhe = log (b) (3) m Zeiger (zu Unter-Bäumen), (8) m = b+1 = 2L Studiengang Informatik Baumstrukturierte Fileorganisation: m-Wege-Suchbaum 7S. Berninger DHBW Heidenheim I. Jeder Knoten hat folgende Struktur: KxDx: Keyx + Datax (Record x) Py: Page-Baumy II. Die Schlüsselwerte Ki im Knoten sind aufsteigend geordnet. III. Alle Schlüsselwerte im Unterbaum von Pi sind kleiner als der Schlüsselwert Ki+1 IV: Alle Schlüsselwerte im Unterbaum von Pi sind größer als der Schlüsselwert Ki V: Die Unterbäume von Pi sind auch m-Wege-Suchbäume Für den m-Wege-Suchbaum sind keine Balanzierungsmechanismen definiert, so dass Wildwuchs (Blätter auf verschiedenen Baumebenen) entstehen kann -> balancierte Bäume definieren... b Keys pro Knoten L Levels = Höhe = log (b) m Zeiger (zu Unter-Bäumen), m = b+1 = 2L Studiengang Informatik Eigenschaften binärer Bäume (0..2 Kinder) 8S. Berninger DHBW Heidenheim • jeder Knoten hat 2 oder keine Kinder • alle Blätter haben den gleichen Abstand zur Wurzel Vollständiger Binärbaum: Voller Binärbaum: • jeder Knoten hat 2 oder keine Kinder Heap-vollständiger Binärbaum: • jeder Knoten hat 2 oder keine Kinder • Kinder dürfen nur auf der untersten Ebene rechts fehlen • Grund: Finden des letzten Knotens über dessen Index im Array möglich Balancierter m-Wege-Baum: • alle Blätter weichen in ihrem Abstand zur Wurzel nur maximal um 1 ab • in einem m-Wege-B-Baum mit n Knoten erreicht man ausgehend von der Wurzel alle Knoten in max. logm(n) Schritten Studiengang Informatik Vererbungshierarchie binärer Bäume (“...ist ein...”) 9S. Berninger DHBW Heidenheim Vollständiger Binärbaum Voller Binärbaum Heap-vollständiger Binärbaum Balancierter Baum Graph Baum BinärbaumM-Wege-Baum Studiengang Informatik Heißt: Die Höhe eines Baumes mit N Knoten ist über jedem Blattknoten max. logm N oder (logm N)-1 (dafür müssen innere Knoten nicht die gleiche Menge an Nachfolgern haben). Heißt: alle Blätter haben (fast) die gleiche Tiefe (Ebene) (Abweichung -1 erlaubt). Balancierte Bäume (B-Bäume) 10S. Berninger DHBW Heidenheim M-Wege-Suchbäume nennt man balanciert (ausgeglichen), wenn in einem Baum der Höhe h mit N Schlüsseln jede der 3 Operation • Suchen • Einfügen • Entfernen mit max. O (logm N) Schritten ausführbar ist. Studiengang Informatik (Selbst-)Balanzierte Bäume (B-Bäume) 11S. Berninger DHBW Heidenheim Studiengang Informatik (Selbst-)Balanzierte Bäume (B-Bäume) Die Neu-Balanzierung des m-Weg-Baumes würde zu einem Wartungsaufwand nach jeder Aktualisierung (Einfügen/ Löschen) von O(N) führen. Gesucht: Balanzierungsmechanismus, der mit Hilfe lokaler Baumtransformationen den Baum fast ausgeglichen hält: Rot-Schwarz-Bäume, AVL-Bäume B-Bäume sind fast ausgeglichene, sehr breite Mehrwegbäume von geringer Höhe. In Datei- und Datenbanksystemen dienen sie zur Organisation von Zugriffspfadstrukturen. Definition: Ein Baum der Klasse (k, h) ist ein geordneter Suchbaum mit folgenden Eigenschaften (k=min. keys pro Knoten, h=height der Knoten, Ordnung: 2k+1 (Folgeknoten)): i. Jeder Pfad von der Wurzel zu einem Blatt hat (fast) die gleiche Länge. ii. Jeder innere Knoten hat mindestens k(ey) Schlüssel (Seite muss mindestens halb voll sein) iii. Jeder Knoten hat höchstens 2k Schlüssel (Seite darf maximal voll sein). iv. Jedes Blatt hat mindestens k und max. 2k Einträge (keys/ Schlüssel). v. Die Wurzel hat mind. 1 Schlüssel „Ordnung“ m: max. Anzahl der Schlüssel eines Knotens + 1 =max. Anzahl der Kindbäume eines Knoten (D. Knuth, 1973, „The Art of Computer Programming“) Klasse: (2,3), Ordnung: 5 Studiengang Informatik (Selbst-)Balanzierte Bäume: Suche 13S. Berninger DHBW Heidenheim Binäre Suche innerhalb jedes Knotens! Studiengang Informatik (Selbst-)Balanzierte Bäume: Einfügen 14S. Berninger DHBW Heidenheim Schlüssel werden immer in Blätter an die entsprechende Stelle eingefügt. a) Wenn das Blatt einen weiteren Schlüssel aufnehmen kann: fertig. b) Bei Überschreitung von 2k: aufspalten des Knoten in 2 - der mittlere Schlüssel rückt nach oben. Weiter bei Schritt 2. Wird der Wurzelknoten erreicht, wächst der Baum u.U. um 1 Level nach oben. Studiengang Informatik (Selbst-)Balanzierte Bäume: Einfügen 15S. Berninger DHBW Heidenheim Wir fügen die Buchstaben des Wortes ALGORITHMUS in umgekehrter Reihenfolge ihres Auftretens im Wort in einen initial leeren B-Baum der Klasse (1, h) ein. ALGORITHMUS in umgekehrter Reihenfolge: S, U, M, H, T, I, R, O, G, L, A Studiengang Informatik (Selbst-)Balanzierte Bäume (B-Bäume) 16S. Berninger DHBW Heidenheim ALGORITHMUS in umgekehrter Reihenfolge: S, U, M, H, T, I, R, O, G, L, A Studiengang Informatik (Selbst-)Balanzierte Bäume (B-Bäume) 17S. Berninger DHBW Heidenheim ALGORITHMUS in umgekehrter Reihenfolge: S, U, M, H, T, I, R, O, G, L, A Studiengang Informatik (Selbst-)Balanzierte Bäume: Löschen 18S. Berninger DHBW Heidenheim 1. Löschen im Blatt: Die Mindestanzahl an Schlüsseln muss erhalten bleiben: a) Ist die Anzahl der Schlüssel im Knoten, in dem der zu löschende Wert gefunden wurde, > k, dann ist das Löschen trivial: Wert wird gelöscht oder b) Löschen erzeugt Unterlauf im Knoten (zu wenig Schlüssel): Generell müssen Schlüssel aus dem betroffenen Knoten und einem Nachbarknoten neu „verteilt“ werden, um B-Baum-Kriterium zu erhalten: 1) Rotation: Kann durchgeführt werden, wenn der Nachbarknoten danach mehr als k Knoten behält 2) Mischen: Muß genommen werden, wenn durch Rotation im Nachbarknoten ein Unterlauf entstünde 2. Löschen im inneren Knoten: Der Wert kann nicht direkt gelöscht werden, da er Indikator für die an ihm „hängenden“ Unterbäume ist Er wird „getauscht“ gegen 2. Den symmetrischen Vorgänger (sym. Vorgänger ist der größte Blattknoten im linken Unterbaum bzw. der größte Wert in diesem Blattknoten) oder 3. Den symmetrischen Nachfolger (sym. Nachfolger ist der kleinste Blattknoten im rechten Unterbaum, bzw. der kleinste Wert) Studiengang Informatik (Selbst-)Balanzierte Bäume: Löschen der 40 19S. Berninger DHBW Heidenheim 1. Löschen im Blatt: Die Mindestanzahl an Schlüsseln muss erhalten bleiben: a) Anzahl der Schlüssel im Knoten, in dem der zu löschende Wert gefunden wurde, ist > k: Schlüssel löschen b) Löschen erzeugt Unterlauf im Knoten (zu wenig Schlüssel): Generell müssen Schlüssel aus dem betroffenen Knoten und einem Nachbarknoten neu „verteilt“ werden, um B- Baum-Kriterium zu erhalten: 1) Rotation: Kann durchgeführt werden, wenn der Nachbarknoten danach mehr als k Knoten behält Klasse: (2, h) Studiengang Informatik (Selbst-)Balanzierte Bäume: Löschen der 50 20S. Berninger DHBW Heidenheim 1. Löschen im Blatt: Die Mindestanzahl an Schlüsseln muss erhalten bleiben: a) Anzahl der Schlüssel im Knoten, in dem der zu löschende Wert gefunden wurde, ist > k: Schlüssel löschen b) Löschen erzeugt Unterlauf im Knoten (zu wenig Schlüssel): Generell müssen Schlüssel aus dem betroffenen Knoten und einem Nachbarknoten neu „verteilt“ werden, um B- Baum-Kriterium zu erhalten: 1) Rotation: Kann durchgeführt werden, wenn der Nachbarknoten danach mehr als k Schlüssel behält 2) Mischen: Muß genommen werden, wenn durch Rotation im Nachbarknoten ein Unterlauf entstünde Wurzel muss nur 1 Schlüssel haben Studiengang Informatik (Selbst-)Balanzierte Bäume: Löschen der 20 21S. Berninger DHBW Heidenheim 2. Löschen im inneren Knoten: Der Wert kann nicht direkt gelöscht werden, da er Indikator für die an ihm „hängenden“ Unterbäume ist Er wird „getauscht“ durch a) Den symmetrischen Vorgänger (sym. Vorgänger ist der größte Blattknoten im linken Unterbaum bzw. der größte Wert in diesem Blattknoten) oder b) Den symmetrischen Nachfolger (sym. Nachfolger ist der kleinste Blattknoten im rechten Unterbaum, bzw. der kleinste Wert) Mittlerer Nachfolger hat 3 Knoten. Er ist Vorgänger des zu löschenden Knotens (a) Studiengang Informatik (Selbst-)Balanzierte Bäume: Löschen der 17 23S. Berninger DHBW Heidenheim 2. Löschen im inneren Knoten: Der Wert kann nicht direkt gelöscht werden, da er Indikator für die an ihm „hängenden“ Unterbäume ist Er wird „getauscht“ gegen a) Den symmetrischen Vorgänger (sym. Vorgänger ist der größte Blattknoten im linken Unterbaum bzw. der größte Wert in diesem Blattknoten) oder b) Den symmetrischen Nachfolger (sym. Nachfolger ist der kleinste Blattknoten im rechten Unterbaum, bzw. der kleinste Wert) Rechter Nachfolger hat 4 Knoten. Er ist Nachfolger des zu löschenden Knotens (b) Studiengang Informatik B*-Bäume 24S. Berninger DHBW Heidenheim Die für den Einsatz wichtigste Variante des B-Baumes ist der B*-Baum. Die Einträge (Ki, Di, Pi) spielen in den inneren Knoten eine doppelte Rolle (Keys, Data, Pages=Nodes): • Die zum Schlüssel Ki gehörenden Daten Di werden beim Schlüssel gespeichert • Der Schlüssel Ki dient als Wegweiser im Baum In B*-Bäumen werden die zu speichernden Daten (Ki, Di) nur in den Blattknoten abgelegt (für die Ki ergibt sich eine redundante Speicherung). Heisst: die inneren Knoten gestatten einen schnellen Zugriff auf die Schlüssel – die Blätter allerdings enthalten alle Schlüssel mit ihren zugehörigen Daten in Sortierreihenfolge. Eine effiziente sequentielle Verarbeitung lässt sich durch Verkettung aller Blattknoten (sequence set) erreichen. Studiengang Informatik B*-Bäume 25S. Berninger DHBW Heidenheim Es sind hier 2 Knotenformate zu unterscheiden: a) innerer Knoten: b) Blattknoten: Die Pointer Prior und Next dienen zur Verkettung der Blattknoten. Das Feld M enthält die Zahl der aktuellen Einträge. Da die inneren Knoten bei konstanter Länge L wesentlich weniger Information pro Eintrag enthalten, haben B*-Bäume eine wesentlich höhere Schlüsselzahl pro Knoten/ Seite, was zu geringerer Höhe des Baumes führt. Studiengang Informatik B*-Bäume: gleiche Schlüsselmenge 26S. Berninger DHBW Heidenheim B-Baum (2-4 Keys/ Schlüssel, Höhe 3) B*-Baum, Schlüssel in den Blättern redundant gespeichert Klasse (k, k*, h*) k: keys der Innenknoten k*: keys der Blätter (Blattknoten hat mind. k*, max. 2k* Schlüssel, Höhe h*) Studiengang Informatik B*-Bäume: Grundoperationen 27S. Berninger DHBW Heidenheim Grundoperationen beim B*-Baum: Aufzufassen wie eine gekettete sequentielle Datei von Blättern mit einem Indexteil, der selbst ein B-Baum ist. Suche: • direkte Suche kostet h* Einlagerungsschritte (Baumhöhe) Löschen: • nur die Daten in den Blättern müssen gelöscht werden Vorteile des B*-Baumes: • Strikte Trennung zwischen Datenteil und Indexteil • Schlüssel in den inneren Knoten haben nur Wegweiserfunktion • die redundant gespeicherten Schlüssel erhöhen den Speicherbedarf nur unwesentlich (< 1%) Studiengang Informatik Übung 29S. Berninger DHBW Heidenheim Gegeben: B-Bäume der Klasse (1,2) bei Vorgabe folgender Schlüssel: 1, 2, 3, 4, 5, 6. Wahr oder falsch? 1. Die Höhe des Baumes darf maximal 2 Level haben 2. Jeder Knoten muss mindestens 1 Schlüssel haben 3. Knoten und Schlüssel sind gleichbedeutend 4. Die linken Kind-Schlüssel eines Schlüssels müssen kleiner, die rechten größer sein 5. Ein Knoten hat bis zu einem Nachfolgeknoten mehr, als er Schlüssel hat 6. Der Wurzelknoten könnte in obigem Beispiel auch 1 Schlüssel haben 7. Diese Baumklasse kann 10 Schlüssel aufnehmen Wahr Wahr Falsch Wahr Wahr Falsch, dann hätte er nur 2 Nachfolger mit je 2 Schl. Falsch, max. (1 Knoten +3 Knoten)*2 Schlüssel = 8 Schlüssel","libVersion":"0.3.2","langs":""}