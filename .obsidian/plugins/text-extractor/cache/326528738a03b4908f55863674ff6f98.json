{"path":"DHBW Heidenheim/2024 SoSe/Programmierung/UnterrichtsMaterial/C#_2_KlassenUndObjekte.pdf","text":"Klassen Studiengang Informatik 1 Ein struct ist eine besondere (nämlich nicht ableitbare) Klasse. Daten und zugehörige Funktionen sollten in Klassen statt structs gruppiert werden. class CMyClass { float data1; // private, Daten ->Attribute double data2; public void doSomethingWithData() { data2 += data1; } // Funktionen -> Methoden }; Daten einer Klasse werden in C# Felder genannt, Funktionen einer Klasse werden Methoden genannt. S. Berninger DHBW Heidenheim Klassen und Objekte Studiengang Informatik 2 Klasse: • Bauplan für Objekte • “Idee” der Objekte • Definition aller Attribute und Methoden Klasse allein tut noch nichts Objekt • ist ein konkretes Element (Instanz) dieser Klasse S. Berninger DHBW Heidenheim Objekte • Gegenstand, auf den sich jemand bezieht, auf den das Denken oder Handeln ausgerichtet ist • Sind überall und werden als solche wahrgenommen. Objekte der realen Welt haben: Zustand Verhalten Objekte der OOP haben: Studiengang Informatik 3 Feldwerte Methoden S. Berninger DHBW Heidenheim Objekte Alles, was Räder und Sitze hat, und fahren und bremsen kann, ist ein Auto! Und: Was ein Auto sein will, muss Räder und Sitze haben, fahren und bremsen können! Studiengang Informatik 4 http://openbook.rheinwerk-verlag.de S. Berninger DHBW Heidenheim Felder: Felder: Objektorientierung Eine Klasse ist gekennzeichnet durch: Felder (Instanz- bzw. Klassenvariablen) • gehören zu den Objekten bzw. Instanzen der Klasse (z. B. Farbe eines Kleides) • oder statisch zur Klasse selbst (z. B. Zeitpunkt des zuletzt erzeugten Objektes der Klasse) Handlungskompetenzen (Methoden): • entweder individuellen Objekten bzw. Instanzen zugeordnet (z. B. Verkauf eines bestimmten Kleides) • oder der Klasse selbst (z. B. Informieren über die Anzahl bisheriger Verkäufe) • realisieren Algorithmen • dienen der Kommunikation zwischen Klassen bzw. deren Objekten: ein anderes Objekt oder eine andere Klasse aufzufordern, eine bestimmte Methode auszuführen Studiengang Informatik 5S. Berninger DHBW Heidenheim Objektorientierung Jede Klasse ist für die Manipulation ihrer Felder (Merkmale, Memberwerte) selbst verantwortlich: Felder sind eingekapselt, vor direktem Zugriff durch fremde Klassen geschützt Methoden einer Klasse sind in der Regel von anderen Klassen ansprechbar, sie bilden die Schnittstelle zur Kommunikation mit anderen Klassen. Private Methoden für den ausschließlich internen Gebrauch. S. Berninger DHBW Heidenheim Studiengang Informatik 6 Klassen und Objekte in C# Studiengang InformatikS. Berninger DHBW Heidenheim 7 ■Klassendeklaration mit Schlüsselwort class statt struct, abgeschlossen mit „;“: • Enthält u.a. Deklaration (Schnittstelle) und Definition von Feldern und Methoden (Überbegriff in C#: member) class Klassenname { // Deklaration von Feldern und Methoden }; class CPerson { // default: alles private string name; int age; public void SetName (string i_name) { name=i_name; } public void SetAge (int i_age) {age=i_age; } }; Klassen und Objekte: UML-Klassendiagramm CPerson -name: string -age: int + GetName (): string + SetName (string) + SetAge (int) Studiengang InformatikS. Berninger DHBW Heidenheim 8 class CPerson { int age; // private string name; // private public void SetName (string i_name) { name=i_name; } public string GetName() {return name;} public void SetAge (int i_age) {age=i_age; } }; Einstiegsbeispiel Problem mit einem C# - Einstiegsbeispiel... • Einfache Beispiele sind für das Programmieren mit C# nicht besonders repräsentativ, z. B. ist von Objektorientierung außer einem gewissen Formalismus nichts vorhanden. • Repräsentative C# - Programme eignen sich in der Regel wegen ihrer Länge und Komplexität (aus der Sicht des Anfängers) nicht für eine Detailanalyse. -> Beispielprogramm, trotz angestrebter Einfachheit objektorientiert S. Berninger DHBW Heidenheim Studiengang Informatik 9 Ziel ist, einen Fahrzeugverleih abzubilden, Fahrzeuge auch online anzubieten, die Einnahmen und die Fahrzeuge zu verwalten. Objektorientierung: Beispiel Elemente des Modells: Fuhrpark Einnahmenstand / Revenue S. Berninger DHBW Heidenheim Studiengang Informatik 10 Rent-a-car „ist ein“ (Vererbung) „hat“ (Aggregation) „hat“ (Aggregation) „hat“ (Aggregation) „ist Teil von“ (Komposition) Motorrad Beiwagen „ist ein“ (Vererbung) Truck Moped Sakko Hose Motorrad mit Beiwagen Fahrzeuge Kran Kipper Klein- Aufleger transporter (Assoziation) „kennt“ Objektorientierung: Beispiel abstract class CVehicle { S. Berninger DHBW Heidenheim Studiengang Informatik 11 class CFleet { class CRevenue { class CRentACar { abstract class CTruck: CVehicle { class CTrailerTruck: CTruck { ________ fleet; ________ revenue; public static void Main(){} _______ amount; _______ Increase(_____ i_rent){} _______ Decrease(____ i_cost) {} _____ Rent(______ i_vehicle) { } _____ Book(______ i_vehicle) { } ______ AddToFleet (_______i_vehicle){} ______ vehicles; // leere Referenz _______ nextTUEV; _______ pricePerDay; _______ seats; _______ fuelLevel; _______ bookings; _______ tankCapacity; _______ LicensePlate; _____ payLoad; _____ wheels; Klassifizierung von Variablen nach Zuordnung zu Objekt oder Klasse S. Berninger DHBW Heidenheim Studiengang Informatik 13 class CRentACar { CFleet fleet; CRevenue revenue; public static void Main() { fleet = new CFleet(); revenue = new CRevenue(); // .... } fleet revenue Fleet Revenue amount vehicles null Vorteile von OOP: Datenkapselung Datenkapselung • Methoden kapseln direkte Zugriffe auf Klassendaten (Bsp: der Preis darf für Anzeigezwecke abgefragt, aber nicht verändert werden) • public Methoden bilden die Schnittstelle der Klasse nach außen • Günstige Voraussetzungen für Test und Fehlerbeseitigung: Klassen können an ihren public Schnittstellen getestet werden, codierte Tests sind reproduzierbar nach Änderungen (Unit Testing) • Innovationsoffenheit bei gekapselten Implementierungsdetails, ohne Kooperation mit anderen Klassen zu gefährden • Produktivität durch wiederholt bequem verwendbare Klassen • Erfolgreiche parallele Teamarbeit durch abgeschottete Verantwortungsbereiche und Vorabdefinition von Interfaces S. Berninger DHBW Heidenheim Studiengang Informatik 14 Vorteile von OOP: Vererbung Vererbung • Ableitung spezialisierter Klassen aus einer Klasse zur Lösung neuer Aufgaben • abgeleitete Klassen erben alle Member der Basisklasse • Wiederverwendung von Software ohne lästiges und fehleranfälliges Kopieren von Quellcode • Design der abgeleiteten Klasse kann sich auf neue Member beschränken oder bei manchen Erbstücken Modifikationen vornehmen • Kontrakte der Basisklasse dürfen nicht gebrochen werden! S. Berninger DHBW Heidenheim Studiengang Informatik 15 Open-Closed-Principle für Klassendesign: Offen sein für Verwendung (auch als Basisklasse), geschlossen für Veränderung! Meyer, Bertrand (1988). Object-Oriented Software Construction. Prentice Hall Robert C. Martin \"The Open-Closed Principle\", C++ Report, January 1996 Vorteile von OOP: Polymorphie Polymorphie (unterschiedliche Gestalt des Verhaltens) • Objekte unterschiedlicher, von der gleichen Basisklasse abgeleiteten Klassen können bei gleichem Methodenaufruf ein unterschiedliches Verhalten zeigen (Methoden überschreiben) Klasse: CLebewesen, Methode Stoffwechsel(), abgeleitete Klassen CTier (organisch) und CPflanze (anorganisch) überschreiben Methode unterschiedlich • dabei dürfen nur solche Methoden aufgerufen werden, die schon in der Basisklasse definiert sind • Methode ist in abgeleiteten Klassen anders implementiert: jedes (per Basisklassenreferenz angesprochene Objekt) führt sein angepasstes Verhalten aus • derselbe Methodenaufruf -> unterschiedliche (polymorphe) Verhaltensweisen zur Folge • welche Methode (der Basis- oder abgeleiteten Klasse) ausgeführt wird, entscheidet sich erst zur Laufzeit (späte Bindung) über den Referenztyp • lose Kopplung von Klassen ist möglich, Wiederverwendbarkeit von vorhandenem Code wird verbessert S. Berninger DHBW Heidenheim Studiengang Informatik 16 Feldzugriff über Properties: „Syntactic sugar“ public class CVehicle { float pricePerDay=10.0; // private int seats=2; // private public float GetPricePerDay() { return pricePerDay; } public void SetPricePerDay(int value) { if (value != 0) pricePerDay = value; } // .... dito für seats float myPricePerDay = vehicle.GetPricePerDay(); vehicle.SetPricePerDay(77.50); S. Berninger DHBW Heidenheim Studiengang Informatik 17 public class CVehicle { float pricePerDay; // private int seats; // private public float PricePerDay { get { return pricePerDay; } set { if (value != 0) pricePerDay = value; } } = 10.0; // .... dito für seats float myPricePerDay = vehicle.PricePerDay; // wird wie ein Feld benutzt item.PricePerDay=77.50; // „smart field“ public class CVehicle { float pricePerDay; // private public float PricePerDay { get { return pricePerDay; } set { if (…) pricePerDay = value;} } = 10.0; public int Seats {get; set;} // „Automatische Implementierung“ für Seats Properties S. Berninger DHBW Heidenheim Studiengang Informatik 18 Entweder get oder set darf fehlen: class CVehicle { int seats; public int Seats { get; set;} } .... x = vehicle.Seats; // o.k. vehicle.Seats= ...; // verboten Vorteile von Properties: • read-only oder write-only Zugriff möglich • Datenvalidierung beim Zugriff möglich • wenig Schreibaufwand bei der Vereinbarung Init-only Property: class CVehicle { int seats; public int Seats { get; init; } } // Init-Methode: init { if (value != 0) seats = value; } var seats = new Vehicle() { Seats = 4 }; • Property ist nach der Initialisierung unveränderlich Übung daheim S. Berninger DHBW Heidenheim Studiengang Informatik 19 Übungsblatt 1! Übung 1 1. Warum steigt die Produktivität der Softwareentwicklung durch objektorientiertes Programmieren? Studiengang InformatikS. Berninger DHBW Heidenheim 20 Übung 2. Welche von den folgenden Aussagen sind richtig bzw. falsch? a) In C# kann man nur Software für Windows entwickeln. d) Die Klassen in einem mit C# erstellten DLL-Assembly können auch in anderen .NET - Programmiersprachen (z. B. VB.NET) genutzt werden. b) Das .NET - Framework für Windows wurde in C# programmiert. c) Unter den .NET - Programmiersprachen zeichnet sich C# durch eine besonders leistungsfähige Standardbibliothek aus. Studiengang InformatikS. Berninger DHBW Heidenheim 22 Übung 3. Welche Aufgaben erfüllt die Common Language Runtime (CLR)? Studiengang InformatikS. Berninger DHBW Heidenheim 25 Übung 4. In welcher Beziehung stehen Assemblies und Namensräume? Studiengang InformatikS. Berninger DHBW Heidenheim 27 Übung 5. Was bedeuten die Abkürzungen CIL? Studiengang InformatikS. Berninger DHBW Heidenheim 29 Übung 5. Was bedeuten die Abkürzungen FCL? Studiengang InformatikS. Berninger DHBW Heidenheim 30 Übung 5. Was bedeuten die Abkürzungen CLS? Studiengang InformatikS. Berninger DHBW Heidenheim 31 Übung 5. Was bedeuten die Abkürzungen COM? Studiengang InformatikS. Berninger DHBW Heidenheim 32","libVersion":"0.3.2","langs":""}