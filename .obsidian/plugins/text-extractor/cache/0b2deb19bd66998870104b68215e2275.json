{"path":"DHBW Heidenheim/2024 SoSe/Programmierung/UnterrichtsMaterial/1.0 C# (# Name clash 2024-08-03 cgmt4lC #).pdf","text":"Zeitplan, Ablauf und Organisation Studiengang InformatikS. Berninger DHBW Heidenheim 2 Inhalt: Termine: Ort: Objektorientierung und generische Programmierung am Bsp. C#, Basis für das Anwendungsprojekt s. Stundenplan Raum 618 Prüfungsform: Termin: Klausur (Programmieraufgabe im Labor) s. Klausurplan Entwicklungsumgebung Studiengang InformatikS. Berninger DHBW Heidenheim 3 Empfohlene Entwicklungsumgebung: Visual Studio 2022 Community + .net 7.0 oder 8.0 oder Jetbrains Rider + .net 7.0 oder 8.0 Literatur Th. Theis: Einstieg in C# mit Visual Studio 2022: Ideal für Programmieranfänger. Rheinwerk Computing, 2022 H. Mössenböck: Kompaktkurs C# 7. dpunkt-Verlag, 2018 Für Interessierte: J. Skeet: C# in depth. Manning 2019, 4. Ausgabe. S. Berninger DHBW Heidenheim Studiengang Informatik 4 C# ab Version 7 - Es geht nicht um die Syntax einer Sprache, sondern um deren Konzepte! - S. Berninger DHBW Heidenheim Studiengang Informatik 5 1. Objektorientierung mit C#: Einstieg S. Berninger DHBW Heidenheim Studiengang Informatik 6Studiengang Informatik Kurze Umfrage (BBB – Vorlesungsraum) 8 Wie schätzen Sie Ihre eigenen Erfahrungen mit C# ein? A: Ich habe noch nie etwas in C#/ Java programmiert. B: Ich habe erste Erfahrungen mit C# oder Java gemacht. C: Ich habe schon lauffähige Programme in C# oder Java selbst erstellt. S. Berninger DHBW Heidenheim C# ist gegenüber C / C++... S. Berninger DHBW Heidenheim Studiengang Informatik 10 ... objektorientiert (Java + C++ + VB) ... managed ( Speicherverwaltung inkl. Garbage collection) ... basierend auf einem mächtigen Bibliotheksframework mit Containern, Objekten, Algorithmen,... ... sehr viel strikter und logischer, typsicher ... langsamer zur Laufzeit ... durch Basierung auf dem .net-Framework mit wesentlich mehr Unterstützung für: Datenbanken (Ado.NET), Grafische UIs (WinForms, WPF), Serialisierung in Metasprachen (XML, XAML), Multimedia, Multithreading, Ereignisse, Parallele Programmierung, WebApps, Enterprise services ... S. Berninger DHBW Heidenheim Studiengang Informatik 11 Stromverbrauch, Laufzeit und Speicherbedarf eines Vergleichs- algorithmus Quelle: https://doi.org/10.1145/3136014.3136031 Pereira et. al.: Energy Efficiency across Programming Languages. SLE’17, October 23–24, 2017, Vancouver, Canada ©2017 Association for Computing Machinery. C# versus Java = CLR versus JVM Microsoft 18/31 Das Mono-Framework ist eine Open-Source- Implementierung von Microsofts .NET Framework , die auf den offenen Standards für die Sprache C# und die Common Language Runtime basiert . Mono Android IOS Xamarin Sun -> Oracle .Net Framework • fester Bestandteil der aktuellen Versionen des Betriebssystems Windows S. Berninger DHBW Heidenheim Studiengang Informatik 13 = BCL (Base Class Library) .net - Framework Mono Runtime Mono Class Lib. < .net6 CIL: Common Intermediate Language S. Berninger DHBW Heidenheim Studiengang Informatik 14 Quelle: Hanspeter Mössenböck: „Kompaktkurs C# 7“, dpunkt, 2018 AOT- Compiler Auslieferung Zielmaschine Auslieferung für Zielmaschine .Net Framework (jetzt .NET) S. Berninger DHBW Heidenheim Studiengang Informatik 16 NET – Framework .NET Core CLR-Version Erscheinungsjahr C# .NET Multi-Platform App UI .NET for C# und XAML 1.0 1.0 2002 1.0 (MAUI), OSS Blazor 1.1 1.1 2003 1.2 2.0 2.0 2005 2.0 3.0 2.0 2006 2.0 3.5 2.0 2007 3.0 4.0 4 2010 4.0 4.5 4 2012 5.0 4.6 1.0 4 2015 6.0 4.6.2 2.0 4 2017 7.0 4.7 4 2017 7.1 4.7.1 4 2017 7.2 4.7.2 2.1/ 2.2 4 2018 7.3 4. 8 3.0 4 2019 8 --- 5 --- 2020 9 6 2021 10 7 2022 11 grafische Anwendungen 8 2023 12 mit einer einheitlichen Codebasis für verschiedene Plattformen (Windows, Android, iOS und macOS) Programmausführung auf .NET S. Berninger DHBW Heidenheim Studiengang Informatik 17 .Net-Architektur: Übersetzung • C#-Applikationen: auf .NET + einer virtuellen Laufzeitumgebung (CLR – Common Language Runtime) + Klassenbibliotheken • CLR ist die Microsoft-Implementierung der CLI (Common Language Infrastructure), einem internationalen Standard – Basis für Ausführungs- und Entwicklungsumgebungen. Die CLR ist eine cross-platform Laufzeitumgebung mit Unterstützung für Windows, macOS, und Linux. CLR übernimmt die Speicherallokation und das Speichermanagement. • Sourcecode wird in IL (Intermediate Language) kompiliert, der der CLI-Spec und CTS (Common Type Spec) entspricht • IL-Code und Ressourcen wie Bitmaps und Strings werden in Assemblies (DLLs ) gespeichert S. Berninger DHBW Heidenheim Studiengang Informatik 18 .Net-Architektur: Übersetzung • Jedes Assembly (*.exe, *.dll) enthält ein Manifest (Informationen über Typ, sichere Identität, Version, zugehörige Files (.dll, .jpg, .bmp, ...), andere Assemblies, von denen es abhängt, und kultur- oder sprachspezifische Informationen) • Bei Ausführung wird das Assembly in die CLR geladen. Diese führt eine JIT (Just-in-time) Compilierung durch, um den IL-Code auf der Zielplattform in Maschinencode zu übersetzen • Die CLR bietet noch andere Dienste an für • die automatische GarbageCollection, • das Exception handling und • Resource management. Code, der von der CLR ausgeführt wird, wird \"managed code“ genannt S. Berninger DHBW Heidenheim Studiengang Informatik 19 .Net-Architektur • CLI: Common Language Infrastructure, internationaler Standard für Ausführungs- und Entwicklungsumgebungen • CLS: Common Language Specification, Microsofts CLI- Subset für .NET • CIL, IL: Common intermediate language • JIT-Compiler: Just-in-time-Compiler, übersetzt CIL in Maschinencode der Zielplattform • CLR: Common Language Runtime, unterstützt CLS, Microsofts Implementierung der CLI S. Berninger DHBW Heidenheim Studiengang Informatik 20 C#-Compiler, F#, C++, VB.NET… JIT-Compiler .Net-Architektur Sprachenmix ist ein Key-Feature von .NET: • Von C# generierter IL-Code kann mit Code zusammenarbeiten, der von den .NET Versionen von F#, Visual Basic, C++ generiert wurde, und mehr als 20 anderen CLS-compliant Sprachen Zusätzlich zur Laufzeitumgebung enthält .NET extensive Bibliotheken: • Sie sind in Namespaces organisiert, Arbeitsgebiete von: • File-IO • Stringmanipulation • XML-Paring • Webapplikations-Frameworks • WinForms, WPF ... • Die typische C#-Applikation nutzt die .NET-Klassenbibliothek für alle “Klempnerarbeiten” S. Berninger DHBW Heidenheim Studiengang Informatik 21 .Net-Architektur cntd. .NET ist • kostenlos und Open source, unter den MIT und Apache2 Lizenzen • .NET ist ein Projekt der .NET Foundation • durch Microsoft (Xamarin) angeboten für Windows, macOS, und Linux • am 2. Dienstag jeden Monats regelmäßig versorgt mit Sicherheits- und Qualitätsupdates S. Berninger DHBW Heidenheim Studiengang Informatik 22 Assembly-Konzept S. Berninger DHBW Heidenheim Studiengang Informatik 23 Konzept für Interaktion aller .NET Sprachen wie C#, Visual C++.Net, Visual Basic.Net oder Delphi.Net Von einem .NET - Compiler erzeugten Binärdateien (mit IL-Code) werden als Assemblies bezeichnet und haben die Namenserweiterung: • .exe ( .NET - Anwendungen) oder • .dll ( .NET - Bibliotheken) Datei rentacar.exe Datei rentacar.cs Datei vehicles.cs public class CRentaCar { ... } public class CVehicle { ... } rentacar Typ-Metadaten der Klassen CFleet et. al. CFleet CRevenue z.B. rentacar.exe Kleine Inselkunde Java: Insel im Indischen Ozean S. Berninger DHBW Heidenheim Studiengang Informatik 24 Java .NET MAUI für native Applikationen App-Code nutzt die .NET MAUI API (1). Native Plattform-APIs (3). Auch App-Code kann Plattform-APIs direkt nutzen (2), wenn notwendig. Studiengang Informatik 25 https://docs.microsoft.com/en- us/dotnet/maui/what-is-maui , 30. 1. 2023 https://youtu.be/Gowr_23aIkw?list= PL1rZQsJPBU2S4_ZjpE20DJcPT8okkX Pja Java – C# Studiengang Informatik 26 Quelle: „C# versus Java“, Hanspeter Mössenböck, Universität Linz, Institut für Praktische Informatik (Systemsoftware) C# vs. Python 27 • kompiliert, höhere Ausführungsperformance • objektorientiert • grosse Standardbibliothek im .net-Framework • Microsoft-Lizenz • Typsicher • Depency injection • Multi-Threading • Webanwendungen (ASP), Desktopanwendungen (MAUI, WPF und WinUI), Spieleentwicklung (Unity), Cloud-Funktionen Windows! • interpretiert, höhere Entwicklungsperformance • objektorientiert und funktional • viele verwendbare Frameworks • Open-Source • dynamisches Casting von Typen • - • kein Multithreading • Webanwendungen (Flask oder Django), Datenanalyse, Daten-Visualisierung und Objekt- bzw. Gesichtserkennung Linux! IronPython: Microsoft implementation of Python, written in C#, for .net! 2. Common type system S. Berninger DHBW Heidenheim Studiengang Informatik 28 Variablen: Datentypen 29 Damit ist die Variable index deklariert. 02.07.2024 S. Berninger DHBW Heidenheim Rosenzimme r Fam. Müller (variabel) Suite 203 (variabel) Die Adresse wird beim Laden des Programms bzw. zur Laufzeit (Heap) vom Betriebssystem festgelegt Der Wert der Variablen ist nicht definiert Variablen: Datentypen 3002.07.2024 S. Berninger DHBW Heidenheim Duplex42 MiniCooper UpperDuplex 0x4048 Beispiel: Name Typ Wert Elementare Datentypen S. Berninger DHBW Heidenheim 3102.07.2024 • Ganze Zahlen (byte, integer) • Reelle Zahlen, oder auch Gleitkomma- / Floating point – Zahlen (float, double, decimal) • Zeichen (character) • bool Aus diesen einfachen Datentypen lassen sich komplexe bzw. strukturierte Datentypen (z.B. Klassen) zusammensetzen. Datentypen für Ganze Zahlen S. Berninger DHBW Heidenheim 32 maschinen- abhängig <= int >= int 02.07.2024 • die Datentypbreite (Wortbreite) in Bit ist systemabhängig • bei signed-Datentypen kennzeichnet das höchstwerte Bit das Vorzeichen Elementare Datentypen in C# Studiengang Informatik 33 Alle Typen, einschließlich numerischer Typen wie System.Int32 (int), sind von einem einzelnen Basistyp abgeleitet, nämlich der Klasse System.Object (C#-Typ: object). Diese einheitliche Typhierarchie wird als Allgemeines Typsystem (CTS) bezeichnet. Basistypen sind Wert- oder Referenztypen (managed, zugewiesen über new oder eine andere Referenz oder null) Referenzen können auf Variable zeigen, können aber deutlich mehr als Zeiger (z.B. die Referenzzahl auf Variablen bzgl. Erreichbarkeit mitzählen (für Garbage collection)). Common type system S. Berninger DHBW Heidenheim Studiengang Informatik 34 object ValueType Int32 object ReferenceType String C#: Common type system Werttypen: tatsächlicher Wert des Objekts • Variabler wird eine Instanz eines Werttyps zugewiesen: Kopie des Werts wird übergeben (numerische Datentypen, structs, enums). int a=4; myStruct ms; Referenztypen: Verweis auf den tatsächlichen Wert des Objekts • Referenzvariabler wird eine Referenz einer Variablen zugewiesen: zeigt auf den Wert der Variable. Es wird keine Kopie erstellt! // Objekte nie auf dem Stack! myClass myObject(); CCar rCar; // leere Referenz rCar = new CCar(); // Objekt auf dem managed Heap Das allgemeine Typsystem in .NET unterstützt neben den integralen (int, char,...) die folgenden fünf Typkategorien (alle können Methoden haben!): • Strukturen Werttyp • Enumerationen Werttyp • Klassen Referenztyp • Schnittstellen Referenztyp • Delegates Referenztyp S. Berninger DHBW Heidenheim Studiengang Informatik 35 C#: Common type system Arbeiten mit Referenztypen: enthalten Verweise auf Variable! 1) Referenz als einzige Zugriffsmöglichkeit auf Objekte: { CMyObject object1; // kein Objekt, sondern eine leere (!) Referenz, auf dem Stack (lokaler Scope) object1= new CMyObject(); // object1 zeigt auf ein Objekt, das liegt auf dem Heap (new) CMyObject object2 = object1; // beide Referenzen zeigen auf das gleiche Objekt! } 2) Übergabe einer Referenz als Funktionsparameter: void function (ref int input) { input+=5; } int a=25; function (a); // a=30! S. Berninger DHBW Heidenheim Studiengang Informatik 36 ref in der Deklaration bedeutet, dass die Adresse/ Referenz des Parameters übergeben wird, nicht der Wert! Typsystem von C# S. Berninger DHBW Heidenheim Studiengang Informatik 37 Enums Structs Delegates sbyte byte float short ushort double int uint decimal long ulong Typ string: Referenz auf ein Objekt der Klasse string (viele Funktionen...) strings sind über ihre Referenz nicht änderbar! Zuweisungen sind Zeigerzuweisungen! Bei Änderungen wird ein neuer String mit einer neuen Adresse erzeugt! S. Berninger DHBW Heidenheim Studiengang Informatik 38 void Func(string a) { a=a+\"345\"; Console.WriteLine(\"Dazwischen: \"+ a); } // in class Program, Main(): string myString=\"ABCD\"; Console.WriteLine(\"Vorher: \" + myString); Program p = new Program(); p.Func(myString); Console.WriteLine(\"Nachher: \"+ myString); //myString ist gleicher Referenzwert == und != sind aber Wertvergleiche! Datentypen und Datenwerte: unified Typsystem S. Berninger DHBW Heidenheim Studiengang Informatik 39 Generell statische Typisierung: int i = 4711; // Deklaration und Initialisierung Referenztypen: Nehmen die (Speicher-)Adresse eines Objekts auf, damit andere Objekte mit ihm über Methodenaufrufe kommunizieren können Typ: Referenz auf Klasse Referenz- und Werttypen S. Berninger DHBW Heidenheim Studiengang Informatik 40 CCar c1 = new CCar (/*...*/), c2 = new CCar (/*...*/); c1 c2 km seats 100 7 2 10.500 km seats Objekt existiert unabhängig vom Schicksal einer konkreten Referenzvariablen, wird jedoch überflüssig (und damit zum potentiellen Opfer des Garbage Collectors), wenn im Programm keine einzige Referenz (Kommunikationsmöglichkeit) mehr vorhanden ist. CCar-Objekt CCar-Objekt Klassifizierung von Variablen nach Zuordnung zu Objekt oder Klasse S. Berninger DHBW Heidenheim Studiengang Informatik 41 Lokale Variable: - innerhalb einer Methode oder Eigenschaft deklariert und auf dem Stack angelegt. - Gültigkeit beschränkt sich auf einen Anweisungsblock - werden nicht automatisch initialisiert! Instanzvariablen von Objekten (Member/ Felder, nicht statisch, initialisiert mit typspezifischer null): - Jedes Objekt (jede Instanz) einer Klasse verfügt über einen vollständigen Satz der Instanzvariablen dieser Klasse Solange ein Objekt existiert, befindet es sich mit all seinen Instanzvariablen im Heap, die Referenz evtl. auf dem Stack. Klassenvariablen (statisch, initialisiert mit typspezifischer null): - beziehen sich auf eine Klasse insgesamt, nicht auf einzelne Instanzen (existieren nur 1x pro Klasse) Bsp.: festhalten, wie viele Objekte der Klasse bereits erzeugt worden sind. - Klassenvariablen werden beim Laden der Klasse auf dem Heap abgelegt. Globale Variablen außerhalb von Klassen: sind nicht unterstützt! Implizite statische Typisierung mit var S. Berninger DHBW Heidenheim Studiengang Informatik 42 Voraussetzung: Compiler kann den Typ erkennen und festlegen! // Compiler legt int fest // Compiler legt Typ als Referenz auf CCar fest // strenge und statische Typisierung bleibt erhalten (hier: int)! var i = 4711; var c = new Ccar (/*...*/); var d1 = 2147483647; Referenzliteral null S. Berninger DHBW Heidenheim Studiengang Informatik 43 Einer Referenzvariablen kann das Referenzliteral (Datentyp: null type) null zugewiesen werden, z. B.: CCar car = null; Damit ist sie nicht undefiniert, sondern zeigt explizit zunächst auf nichts (hat aber nicht den Wert null). Zeigt eine Referenzvariable aktuell auf ein existentes Objekt, kann man diese Referenz per null-Zuweisung aufheben. Sofern im Programm keine andere Referenz auf dasselbe Objekt vorliegt, ist es zum Abräumen durch den Garbage Collector freigegeben. Übung – Freitextantwort BBB 1. Wieso klagt der Compiler über ein unbekanntes Symbol, obwohl die Variable i deklariert worden ist? S. Berninger DHBW Heidenheim Studiengang Informatik 44 Programmierung Ein Programm muss ... • den betroffenen Anwendungsbereich modellieren (durch kooperierende Klassen/ Objekte) Beispiel: In einem Programm zur Verwaltung einer Spedition sind z. B. Kunden, Aufträge, Mitarbeiter, Fahrzeuge, Einsatzfahrten, (Ent-)ladestationen und kommunikative Prozesse (Nachrichten zwischen beteiligten Akteuren) zu repräsentieren. S. Berninger DHBW Heidenheim Studiengang Informatik 46 Programmierung Ein Programm muss ... • Algorithmen realisieren, die in endlich vielen Schritten und unter Verwendung von endlich vielen Betriebsmitteln (z. B. Speicher) bestimmte Ausgangszustände in akzeptable Zielzustände überführen. Beispiel: Im Speditionsprogramm muss u.a. für jede Tour eine optimale Routenplanung vorgenommen werden (hinsichtlich Entfernung, Fahrtzeit, Mautkosten etc.). Oder auch: die Fahrzeuge eines Fuhrparks müssen im Portal sortierbar sein (nach Preis, verfügbar ab,…) S. Berninger DHBW Heidenheim Studiengang Informatik 47 Klassische prozedurale Programm-Struktur Studiengang Informatik 48 Assembler und viele traditionelle Programmiersprachen (wie etwa Fortran, PL/1 und C) bieten folgende Struktur: • Eine beliebige Zahl von Übersetzungseinheiten, die unabhängig voneinander zu sogenannten Objektdateien übersetzt werden können, lassen sich durch den Binder zu einem ausführbaren Programm zusammenbauen. • Jede Übersetzungseinheit besteht aus global benutzbaren Funktionen und Variablen. • Parameter und globale Variablen (einschließlich den dynamisch belegten Speicherbereiche) werden für eine mehr oder weniger unbeschränkte Kommunikation zwischen den Übersetzungseinheiten verwendet. S. Berninger DHBW Heidenheim prozedurale Poolnutzung objektorientierte Poolnutzung Probleme der prozeduralen Programm-Struktur Studiengang Informatik • zentrale Kollektion globaler Variablen, die von jeder Übersetzungseinheit benutzt und modifiziert werden. ➢ das Nachvollziehen von Problemen ist erschwert (wer hat den Inhalt dieser Variable verändert?) ➢ selbst kleine Änderungen an den globalen Datenstrukturen sind nicht praktikabel S. Berninger DHBW Heidenheim Objektorientierte Programmierung: Was ist das? Studiengang Informatik 50 Verschiedene Programmierparadigmen: (Stile, an ein Problem heranzugehen, es zu modellieren und zu programmieren) Prozedurale Programmierung • Zerlegung in Variablen, Datenstrukturen und Funktionen (Algorithmen) • Funktionen operieren direkt auf Datenstrukturen S. Berninger DHBW Heidenheim Objektorientierte Programmierung: Was ist das? Studiengang Informatik 51 Verschiedene Programmierparadigmen: (Stile, an ein Problem heranzugehen, es zu modellieren und zu programmieren) S. Berninger DHBW Heidenheim Objektorientierte Programmierung (OOP) • System besteht aus kooperierenden, gekapselten Objekten (information hiding) mit eigener Identität und ihrem Zusammenspiel • Abstraktion der Objekttypen in Klassen (LKW ist nicht Moped) – Datenstrukturen bekommen Funktionen (Beschleunigen() oder Bremsen()) • Polymorphismus: LKW wie Moped sind Fahrzeuge verschiedener Form • Vererbung: gemeinsame Nutzung geerbter Eigenschaften (Preis) und Funktionen (Rent() ) innerhalb einer Klassenhierarchie, Vermeidung von Codedopplungen Typische Eigenschaften von OO-Sprachen Studiengang Informatik 52 • Alle Daten werden in Form von Objekten organisiert. • Auf Objekte wird über Referenzen (ihre Adresse) zugegriffen. • Objekte bestehen selbst aus einer Sammlung von Daten, die entweder einen elementaren Typ haben oder eine Referenz zu einem anderen Objekt sind. • Objektbestandteile sind verpackt: Ein externer Zugriff ist nur über Zugriffsprozeduren möglich (oder explizit öffentliche Daten). S. Berninger DHBW Heidenheim Objekt: HomerSimpson OO-Sprachen: Datenkapselung Felder: Variablenwert FavouriteBeer: Duff WeeklyWages: 479,60 Name: Simpson GetFavouriteBeer() Klasse: SecurityInspector GetConfession() GetChildren() Confession: WBARP* weitere Methoden: EatDonuts() Methoden Studiengang Informatik 53 Objektinstanz S. Berninger DHBW Heidenheim *WBARP: Western Branch of American Reformed Presbylutheranism Quelle: https://www.domradio.de/artikel/diplom-theologe-ordnet-religion-bei-die-simpsons-ein Wichtige Eigenschaften von OO-Sprachen Studiengang Informatik 54 • Klasse: Konstruktionsentwurf, Objekte: exakt nach diesem Plan gebaute Produkte, z.B. Autos • Klasse (=Objekt-Typ) assoziiert/ bietet Prozeduren (Methoden genannt) zur Benutzung des Objektes an. • Klasse spezifiziert die (öffentliche) externe Schnittstelle („Drive()“, „Break()“, ...). • Klassen können durch Ableitung erweitert werden, ohne die Kompatibilität zu ihren Basisklassen zu verlieren (Vererbung). „CSUV“, „CMoped“ und „CTruck“ werden abgeleitet von CVehicle, und können alle fahren und bremsen. • Objekte werden aus einer Klasse mit Hilfe von Konstrukturen erzeugt (instantiiert). Im Beispiel: gebaut. S. Berninger DHBW Heidenheim Allegorie S. Berninger DHBW Heidenheim Studiengang Informatik 55 https://www.welt.de/vermischtes/kurioses/article113120394/ China-bringt-mit-Reihenhaeusern-Frauen-an-den-Mann.html 3. Entwicklungsumgebung S. Berninger DHBW Heidenheim Studiengang Informatik 56 Entwicklungsumgebung: Visual Studio 22 Ein erstes Konsolen-Projekt: Wir öffnen Visual Studio 2022 Community, und wählen im Menü mit: File > New solution den Dialog für neue Projekte: S. Berninger DHBW Heidenheim Studiengang Informatik 57 Entwicklungsumgebung: JetBrains Rider Ein erstes Konsolen-Projekt: Wir öffnen JetBrains Rider, und wählen im Menü mit: File > New solution den Dialog für neue Projekte: S. Berninger DHBW Heidenheim Studiengang Informatik 58 Hallo C#! S. Berninger DHBW Heidenheim Studiengang Informatik 59 using System; // https://docs.microsoft.com/de-de/dotnet/api/system?view=net-6.0 namespace HelloWorld { internal class Program { public static void Main() { Console.WriteLine(\"Hello, C#!\"); Console.ReadLine(); // warten auf Tastenclick } } } Entry point Entwicklungsumgebung S. Berninger DHBW Heidenheim Studiengang Informatik 60 Build Run Debug Entwicklungsumgebung Jedes Projekt gehört zu einer Projektmappe (englisch: Solution): links sichtbar • verwaltet eine Familie von zusammengehörigen Projekten (z. B. Client- und Server-Anwendung für einen Dienst, Konsolenapplikation und Testprogramme - ) Projektmappen werden um neue Projekte erweitert durch Kontextmenue der Projektmappe -> Add -> New Project… Projektmappe (Solution): HelloWorld.sln Projekt: HelloWorld.csproj Kontextmenue des Projekts -> Als Startprojekt festlegen S. Berninger DHBW Heidenheim Studiengang Informatik 61 • Konsolenprojekt „Hello2“ hinzufügen, bauen, ausführen • Unittest-Projekt „HelloTest“ hinzufügen • Run Unit Tests ... Unittests Neu Solution: Calculator, Projektname: Calculator Hinzufuegen: Unittest-Projekt: Nunit 3 Add Reference: <Calculator> S. Berninger DHBW Heidenheim Studiengang Informatik 62 namespace Calculator { internal class Program { public static void Main(string[] args) { } } public class CFunctions // class to be tested { public int Add(int a, int b) // function to be tested { return a + b; } public int Div(int a, int b) // function to be tested { return a/ b; } } } namespace UnitTests public class Tests { [SetUp] public void Setup() { } [Test] // Test case 1 public void Test1() { CFunctions math = new CFunctions(); Assert.True(9 == math.Add(4,5)); } [Test] // Test case 2 public void Test2() { CFunctions math = new CFunctions(); Assert.True(3 == math.Div(17,5)); } [Test] // Test case 3 public void Test3() { CFunctions math = new CFunctions(); Assert.True(-3 == math.Div(-17,-5)); } } using NUnit.Framework; using Calculator; 4. Elementare Sprachelemente S. Berninger DHBW Heidenheim Studiengang Informatik 63 Kommentare Studiengang InformatikS. Berninger SoSe2021 DHBW Heidenheim 64 • Standard-C: /* Kommentar, auch über mehrere Zeilen, ignoriert alle Zeichen dazwischen */ • C# zusätzlich (jeder Compiler): // Kommentar, ignoriert alle folgenden Zeichen bis Zeilenende // nächster Kommentar auf der nächsten Zeile • möglich: /* Kommentar inklusive // Kommentar */ und: // Kommentar inklusive /* oder /* Kommentar */ bis Zeilenende Dokumentationskommentare Dürfen vor einem benutzerdefinierten Typ (z. B. einer Klasse) oder vor einem Klassen-Member (z. B. Feld, Eigenschaft, Methode) stehen und werden in jeder Zeile durch drei Schrägstriche eingeleitet (API-Doku) Die Dokumentationskommentare in Quellcodedateien werden vom Compiler in eine XML-Dokumentationsdatei umgesetzt Im JetBrains Rider fordert man die Erstellung einer XML-Dokumentationsdatei zu einem Projekt folgendermaßen an: Projektkontextmenue > S. Berninger DHBW Heidenheim Studiengang Informatik 65 /// <summary> /// Ein CDress-Objekt garantiert die Kompabilitaet europaeischer Konfektionsgroessen /// </summary> public int SetSize (int size, countryType country) { . . . } Namenskonventionen • Länge: nicht begrenzt (aber Signifikanz ist begrenzt!) • erstes Zeichen: Buchstabe oder ein _Unterstrich, danach auch Ziffern • Zeichensatz: Unicode (Umlaute oder sonstige nationale Sonderzeichen, die als Buchstaben gelten, sind erlaubt) • Groß-/Kleinschreibung: signifikant (verschiedene Namen: Anz anz ANZ ) • reservierte Schlüsselwörter: S. Berninger DHBW Heidenheim Studiengang Informatik 66 Namenskonventionen • Microsoft-Empfehlungen: https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/general-naming-conventions https://learn.microsoft.com/de-de/dotnet/csharp/fundamentals/coding-style/identifier-names • Methoden-, Klassen- und Propertynamen groß schreiben (PascalCase) CTruck, MyFunction(), ItemColor • Variablennamen klein (camelCasel) decimal priceReduction • Wir programmieren in englisch! • Lesbarkeit vor Kürze S. Berninger DHBW Heidenheim Studiengang Informatik 67 Scope-Operator: Gültigkeitsbereiche/ Namensräume Studiengang Informatik S. Berninger SoSe2021 DHBW Heidenheim 1 9 Gültigkeitsbereiche Studiengang Informatik 20 • Lokaler Name überdeckt gleichnamigen übergeordneten using System; namespace Hello { internal class Program { static int test = 13; static void Main(string[] args) { { char test = 'c'; Console.WriteLine(\"innen: test=\" + test); } test = 5; Console.WriteLine(\"außen: test=\" + test); } } } using System; namespace HelloWorld { internal class Program { private int test; // int-Attribut public static void Main() { Program p = new Program(); p.Func(); } public void Func() { { char test = 'c'; // lokale char-Variable Console.WriteLine(\"innen: test=\" + test); } test = 5; Console.WriteLine(\"außen: test=\" + test); } } } Studiengang Informatik S. Berninger SoSe2021 DHBW Heidenheim 22- C# bietet durch Namespaces die Möglichkeit, zusammengehörige Namen (Variablen, Funktionen, Typen, . . . ) zu einem Namensraum (Namespace) zusammenzufassen. Ein solcher Namensraum/ Scope hat (i.a.) einen gemeinsamen Prefix. Neues Schlüsselwort: namespace Namensräume • Öffnet einen neuen Namensraum für Bezeichner • Namensräume können geschachtelt verwendet werden • Zugriff über den Scope-Operator: . namespace namespace_name { // Deklarationen/Definitionen... } namespace A // A: Name des Namensraumes { class Outer { public int name = 4; // Namensraum A: A.Outer.name } } // Ende des Namensraumes A namespace Eingabe // Eingabe: anderer Namensraum { class Outer { static void Main() { int name = 5; // Namensraum Eingabe: Eingabe.Outer.name A.Outer aouter = new A.Outer(); // A: Prefix Console.WriteLine(\"outerName =\" + aouter.name + \" innerName =\" +name); Namensräume - 23 Namensraumnutzung: using S. Berninger DHBW Heidenheim Studiengang Informatik 72 Namen müssen generell mit dem voll qualifizierten Bezeichner angegeben werden: Durch Nutzung von using kann die Angabe der Präfixe entfallen: Bei Namenskollisionen gewinnt der lokalste/ räumlich nächste Bezeichner. Namensräume der FCL (Framework Class Library) S. Berninger DHBW Heidenheim Studiengang Informatik 73 Ausgaben bei Konsolenanwendungen using System; Console.WriteLine (\" {0}\\n ----- {1}\", currentState, nextState); // mit automat. Zeilenumschaltung danach Console.Write (\" {0}\\n -----\\n {1}\", currentState, nextState); // ohne Zeilenumschaltung danach • statische Methode der Klasse Console aus dem Namensraum System • da statisch: nicht an ein Objekt gerichtet • andere Typen als Zeichenketten werden automatisch vor Ausgabe konvertiert: S. Berninger DHBW Heidenheim Studiengang Informatik 74 int i = 4711; Console.WriteLine(i); Console.WriteLine(\"i hat den Wert: \" + i); // Verkettete Ausgabe Escape-Sequenzen in der Ausgabe: \\n Zeilenwechsel (new line) \\t Horizontaler Tabulator Formatierte Ausgabe mit Platzhaltern Console.WriteLine (\" {0}\\n -----\\n {1}\", zaehler, nenner); S. Berninger DHBW Heidenheim Studiengang Informatik 75 Platzhalter fortlaufend ab 0 Positiv: rechtsbündige Breite Negativ: linksbündige Breite Anzahl der Nachkommastellen Stringinterpolierung (E/A) S. Berninger DHBW Heidenheim Studiengang Informatik 76 • mithilfe des $-Tokens String-Ausdrücke definieren, deren Ergebnisse in einer Formatzeichenfolge platziert werden; • Formatiert auszugebende Ausdrücke werden statt dem Platzhalter direkt in die Zeichenfolge gesetzt: Stringinterpolation wertet die Ausdrücke zwischen { und } aus, konvertiert das Ergebnis in string und ersetzt den Text zwischen den Klammern durch das Zeichenfolgenergebnis des Ausdrucks Nach dem : können Formatierer (f3 – 3 floating-Nachkommastellen) angegeben werden. Benutzereingaben von Konsole Konsolenabfrage beim Benutzer: zahl = Convert.ToInt32(Console.ReadLine()); // statische Methode ReadLine() der Klasse Console • Eingabe muss mit ENTER abgeschlossen werden • Eingegebene Zeichenfolge muss im Bsp. nach int konvertierbar sein, sonst Absturz durch unbehandelte Exception (Exceptionhandling später): Andere Optionen: via grafischen Inputbox (WinForms, WPF, WinUI, ...) S. Berninger DHBW Heidenheim Studiengang Informatik 77 Übung 2. Beseitigen Sie bitte alle Fehler im folgenden Programm: S. Berninger DHBW Heidenheim Studiengang Informatik 78 Übung 2 a) Experimentieren Sie mit dem Hallo-Beispielprogramm: • Ergänzen Sie weitere Ausgabeanweisungen. • Erstellen Sie eine Variante ohne using-Direktive. S. Berninger DHBW Heidenheim Studiengang Informatik 80 Übung 3 b) Beseitigen Sie die Fehler in der folgenden Variante des Hallo-Programms: using System; class Hallo { static void Moin() { Console.WriteLn(\"Hallo, echt .NET hier!); } S. Berninger DHBW Heidenheim Studiengang Informatik 82 Übung 4 Wie ist das fehlerhafte „Rechenergebnis“ im folgenden Programm zu erklären? Sorgen Sie mit einem Paar runder Klammern dafür, dass die folgende Ausgabe erscheint. 3.3 + 2 = 5.3 S. Berninger DHBW Heidenheim Studiengang Informatik 84 Übung Schreiben Sie ein Programm, das aufgrund der folgenden Variablendeklaration und -initialisierung int i = 4711, j = 471, k = 47, m = 4; mit zwei WriteLine() - Aufrufen diese Ausgabe produziert: Rechtsbündig: i = 4711 j = 471 k = 47 m = 4 Linksbündig: 4711 (i) 471 (j) 47 (k) 4 (m) S. Berninger DHBW Heidenheim Studiengang Informatik 86 C#: Stack und Heap • Programm-Heap: gemanaged (new()/ delete() ), Garbage collected (CLR) • referenzierte Daten (Adresse statt Name), überleben den Scope von Methoden! • nur Objekte inkl. aller Attribute (Felder)! • Programm-/Call-Stack: nicht gemanaged, Freigabe durch Verlassen des Scopes (CLR) • Freigabe bei Rückkehr zum Aufrufer (UP) oder Verlassen des Scopes • lokale Variablen und Referenzen auf Objekte (CObject myObject;) • Value type und Reference type Variable! Studiengang Informatik 88","libVersion":"0.3.2","langs":""}