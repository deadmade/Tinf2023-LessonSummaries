{"path":"DHBW Heidenheim/2025 WiSe/Datenbanken/Skript/Datenbanken (Englisch)/LESSON 05.pdf","text":"LESSON 5 SUBQUERIES IN SELECT CLAUSE Ihor Liutak Content 1. Introduction to Subqueries 2. Why Use Subqueries? 3. Types of Subqueries 4. Best Practices and Common Pitfalls Datenbanken II 2 Content Short description Introduce the concept of subqueries and explain their use in sql. Each how to use subqueries in the select clause to fetch additional data or perform calculations. Kurzbeschreibung Stellen Sie das Konzept von Unterabfragen vor und erklären Sie deren Verwendung in SQL. Erfahren Sie, wie Sie Unterabfragen in der Select-Klausel verwenden, um zusätzliche Daten abzurufen oder Berechnungen durchzuführen. Introduction to Subqueries Datenbanken II 3 Definition: A subquery is a query nested inside another query Primary Purpose: Dynamically compute values Fetch data that depends on results from another query Why Use Subqueries Datenbanken II 4 Advantages: Simplify complex queries by breaking them into smaller parts Make queries more readable, in certain scenarios, than extensive JOINs Typical Scenarios: Filtering data based on aggregated results (e.g., salaries above the average salary) Calculating values for display without writing multiple queries Types of Subqueries Datenbanken II 5 Scalar Subqueries: Return a single value (e.g., average salary) SELECT employee_id, (SELECT AVG(salary) FROM employees) AS average_salary FROM employees; Multi-Row Subqueries: (often used with IN or EXISTS - though those are typically in WHERE clauses; still good to contrast) Non-Correlated: Can run independently of the main query. Correlated: Depend on the main query’s row-by-row context Subqueries in the SELECT Clause Datenbanken II 6 Syntax: SELECT column1, (SELECT some_aggregate FROM table2 WHERE condition) AS alias FROM table1; Example: SELECT p.product_name, (SELECT SUM(s.quantity * s.price) FROM sales s WHERE s.product_id = p.product_id) AS total_revenue FROM products p; Table Structures Datenbanken II 7 Table products : CREATE TABLE products ( product_id INT AUTO_INCREMENT PRIMARY KEY, product_name VARCHAR(100) NOT NULL ); Table sales: CREATE TABLE sales ( sale_id INT AUTO_INCREMENT PRIMARY KEY, product_id INT NOT NULL, quantity INT NOT NULL, price DECIMAL(10,2) NOT NULL, FOREIGN KEY (product_id) REFERENCES products (product_id) ); Result Explanation Datenbanken II 8 Best Practices and Common Pitfalls Datenbanken II 9 Best Practices: Use descriptive aliases for subqueries Keep subqueries simple and ensure they return only one value if placed in the SELECT list as a scalar subquery Common Pitfalls: Returning multiple rows in a scalar subquery, causing errors (ERROR 1242 (21000): Subquery returns more than 1 row). Performance impact when subqueries are used in place of more efficient JOINs Unclear logic if nesting becomes too deep","libVersion":"0.3.2","langs":""}