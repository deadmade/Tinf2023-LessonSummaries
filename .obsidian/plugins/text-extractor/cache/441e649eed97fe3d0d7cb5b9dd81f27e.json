{"path":"DHBW Heidenheim/2025 WiSe/Datenbanken/Skript/Datenbanken (Englisch)/LESSON 10.pdf","text":"LESSON 10 Transactions and ACID Properties Ihor Liutak Content Definition: A transaction is a unit of work that is performed against a database. It consists of one or more SQL operations. Why Transactions? To ensure data consistency. To handle errors gracefully. Example Scenarios: Bank transfers. Booking systems (e.g., flights, hotels). Datenbanken II 2 Introduction to TransactionsACID Properties Datenbanken II 3 ACID Principles: Atomicity: Entire transaction succeeds or fails. Consistency: Data remains in a valid state. Isolation: Transactions do not affect each other. Durability: Changes persist even after a crash Transaction Management Commands Datenbanken II 4 START TRANSACTION / BEGIN: Begins a new transaction. COMMIT: Saves all changes in the transaction. ROLLBACK: Undoes changes made during the transaction. SAVEPOINT: Sets a checkpoint to partially roll back. Lab: Setup Datenbanken II 5 Practice Basic Transaction Commands Datenbanken II 6 Implement a Transfer Deduct from one account and add to another. Simulate an Error Datenbanken II 7 Use ROLLBACK to handle an error scenario. Stored procedure for transferring funds between two accounts Datenbanken II 8 heidenheim.site/transaction.sql Partial rollback Datenbanken II 9 Output: After the Transaction Datenbanken II 10 Pros and Cons of Transactions Datenbanken II 11 Pros of Transactions Data Consistency : Ensures the database remains in a valid state by following ACID properties. Example: Prevents half-completed operations like deducting money from one account without adding it to another. Error Handling : Allows rolling back changes when errors occur, ensuring no invalid or partial data is saved. Atomicity : Transactions are \"all or nothing\" — either all operations succeed, or none are applied. Concurrency Control : Ensures data integrity when multiple users or processes access the database simultaneously. Ease of Recovery : Transactions ensure the database can be restored to a consistent state in case of failure (e.g., crashes). Controlled Workflow : Complex operations (e.g., financial transfers, batch updates) can be managed step by step, with checkpoints (SAVEPOINT). Cons of Transactions Performance Overhead : Managing transactions adds processing overhead, especially for high-volume operations. Locking Issues : Concurrent transactions can cause locking conflicts, reducing database performance in multi-user environments. Complexity : Writing transaction-based logic requires additional effort and careful planning to handle edge cases. Resource Usage: Open transactions consume memory and other resources, which can lead to bottlenecks if not managed properly. Deadlocks : Improper transaction design may cause circular waits, where two or more transactions are stuck waiting for each other to release resources. Requires Careful Management : Forgetting to commit or rollback can leave transactions open, leading to unexpected behavior or resource exhaustion. SURVEY Datenbanken II 12https://heidenheim.site/survey.html This survey is designed to test your understanding of MySQL concepts and features, including subqueries, joins, stored procedures, normalization, relationships, and ACID properties. It's a fun and interactive way to assess your knowledge and explore your expertise in relational database management systems. Please note: This survey does not save your answers or track your results. It is purely for educational and self-assessment purposes. Feel free to try it as many times as you like to enhance your learning experience. After completing the survey, you’ll see instant feedback, with correct answers highlighted for your review. Remember, the goal is to challenge yourself and improve your understanding, so relax and enjoy the process!","libVersion":"0.3.2","langs":""}